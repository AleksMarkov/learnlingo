{"ast":null,"code":"import _asyncToGenerator from \"/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _toConsumableArray from \"/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _possibleConstructorReturn from \"/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\";\nimport _inherits from \"/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _createForOfIteratorHelper from \"/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _defineProperty from \"/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _classCallCheck from \"/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar _PLATFORM_LOG_STRING, _ERRORS;\nimport _regeneratorRuntime from \"/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@babel/runtime/regenerator/index.js\";\nimport { Component, ComponentContainer } from '@firebase/component';\nimport { Logger, setUserLogHandler, setLogLevel as setLogLevel$1 } from '@firebase/logger';\nimport { ErrorFactory, getDefaultAppConfig, deepEqual, isBrowser, isWebWorker, FirebaseError, base64urlEncodeWithoutPadding, isIndexedDBAvailable, validateIndexedDBOpenable } from '@firebase/util';\nexport { FirebaseError } from '@firebase/util';\nimport { openDB } from 'idb';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar PlatformLoggerServiceImpl = /*#__PURE__*/function () {\n  function PlatformLoggerServiceImpl(container) {\n    _classCallCheck(this, PlatformLoggerServiceImpl);\n    this.container = container;\n  }\n  // In initial implementation, this will be called by installations on\n  // auth token refresh, and installations will send this string.\n  _createClass(PlatformLoggerServiceImpl, [{\n    key: \"getPlatformInfoString\",\n    value: function getPlatformInfoString() {\n      var providers = this.container.getProviders();\n      // Loop through providers and get library/version pairs from any that are\n      // version components.\n      return providers.map(function (provider) {\n        if (isVersionServiceProvider(provider)) {\n          var service = provider.getImmediate();\n          return \"\".concat(service.library, \"/\").concat(service.version);\n        } else {\n          return null;\n        }\n      }).filter(function (logString) {\n        return logString;\n      }).join(' ');\n    }\n  }]);\n  return PlatformLoggerServiceImpl;\n}();\n/**\r\n *\r\n * @param provider check if this provider provides a VersionService\r\n *\r\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\r\n * provides VersionService. The provider is not necessarily a 'app-version'\r\n * provider.\r\n */\nfunction isVersionServiceProvider(provider) {\n  var component = provider.getComponent();\n  return (component === null || component === void 0 ? void 0 : component.type) === \"VERSION\" /* ComponentType.VERSION */;\n}\n\nvar name$p = \"@firebase/app\";\nvar version$1 = \"0.10.8\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar logger = new Logger('@firebase/app');\nvar name$o = \"@firebase/app-compat\";\nvar name$n = \"@firebase/analytics-compat\";\nvar name$m = \"@firebase/analytics\";\nvar name$l = \"@firebase/app-check-compat\";\nvar name$k = \"@firebase/app-check\";\nvar name$j = \"@firebase/auth\";\nvar name$i = \"@firebase/auth-compat\";\nvar name$h = \"@firebase/database\";\nvar name$g = \"@firebase/database-compat\";\nvar name$f = \"@firebase/functions\";\nvar name$e = \"@firebase/functions-compat\";\nvar name$d = \"@firebase/installations\";\nvar name$c = \"@firebase/installations-compat\";\nvar name$b = \"@firebase/messaging\";\nvar name$a = \"@firebase/messaging-compat\";\nvar name$9 = \"@firebase/performance\";\nvar name$8 = \"@firebase/performance-compat\";\nvar name$7 = \"@firebase/remote-config\";\nvar name$6 = \"@firebase/remote-config-compat\";\nvar name$5 = \"@firebase/storage\";\nvar name$4 = \"@firebase/storage-compat\";\nvar name$3 = \"@firebase/firestore\";\nvar name$2 = \"@firebase/vertexai-preview\";\nvar name$1 = \"@firebase/firestore-compat\";\nvar name = \"firebase\";\nvar version = \"10.12.5\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * The default app name\r\n *\r\n * @internal\r\n */\nvar DEFAULT_ENTRY_NAME = '[DEFAULT]';\nvar PLATFORM_LOG_STRING = (_PLATFORM_LOG_STRING = {}, _defineProperty(_PLATFORM_LOG_STRING, name$p, 'fire-core'), _defineProperty(_PLATFORM_LOG_STRING, name$o, 'fire-core-compat'), _defineProperty(_PLATFORM_LOG_STRING, name$m, 'fire-analytics'), _defineProperty(_PLATFORM_LOG_STRING, name$n, 'fire-analytics-compat'), _defineProperty(_PLATFORM_LOG_STRING, name$k, 'fire-app-check'), _defineProperty(_PLATFORM_LOG_STRING, name$l, 'fire-app-check-compat'), _defineProperty(_PLATFORM_LOG_STRING, name$j, 'fire-auth'), _defineProperty(_PLATFORM_LOG_STRING, name$i, 'fire-auth-compat'), _defineProperty(_PLATFORM_LOG_STRING, name$h, 'fire-rtdb'), _defineProperty(_PLATFORM_LOG_STRING, name$g, 'fire-rtdb-compat'), _defineProperty(_PLATFORM_LOG_STRING, name$f, 'fire-fn'), _defineProperty(_PLATFORM_LOG_STRING, name$e, 'fire-fn-compat'), _defineProperty(_PLATFORM_LOG_STRING, name$d, 'fire-iid'), _defineProperty(_PLATFORM_LOG_STRING, name$c, 'fire-iid-compat'), _defineProperty(_PLATFORM_LOG_STRING, name$b, 'fire-fcm'), _defineProperty(_PLATFORM_LOG_STRING, name$a, 'fire-fcm-compat'), _defineProperty(_PLATFORM_LOG_STRING, name$9, 'fire-perf'), _defineProperty(_PLATFORM_LOG_STRING, name$8, 'fire-perf-compat'), _defineProperty(_PLATFORM_LOG_STRING, name$7, 'fire-rc'), _defineProperty(_PLATFORM_LOG_STRING, name$6, 'fire-rc-compat'), _defineProperty(_PLATFORM_LOG_STRING, name$5, 'fire-gcs'), _defineProperty(_PLATFORM_LOG_STRING, name$4, 'fire-gcs-compat'), _defineProperty(_PLATFORM_LOG_STRING, name$3, 'fire-fst'), _defineProperty(_PLATFORM_LOG_STRING, name$1, 'fire-fst-compat'), _defineProperty(_PLATFORM_LOG_STRING, name$2, 'fire-vertex'), _defineProperty(_PLATFORM_LOG_STRING, 'fire-js', 'fire-js'), _defineProperty(_PLATFORM_LOG_STRING, name, 'fire-js-all'), _PLATFORM_LOG_STRING);\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * @internal\r\n */\nvar _apps = new Map();\n/**\r\n * @internal\r\n */\nvar _serverApps = new Map();\n/**\r\n * Registered components.\r\n *\r\n * @internal\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nvar _components = new Map();\n/**\r\n * @param component - the component being added to this app's container\r\n *\r\n * @internal\r\n */\nfunction _addComponent(app, component) {\n  try {\n    app.container.addComponent(component);\n  } catch (e) {\n    logger.debug(\"Component \".concat(component.name, \" failed to register with FirebaseApp \").concat(app.name), e);\n  }\n}\n/**\r\n *\r\n * @internal\r\n */\nfunction _addOrOverwriteComponent(app, component) {\n  app.container.addOrOverwriteComponent(component);\n}\n/**\r\n *\r\n * @param component - the component to register\r\n * @returns whether or not the component is registered successfully\r\n *\r\n * @internal\r\n */\nfunction _registerComponent(component) {\n  var componentName = component.name;\n  if (_components.has(componentName)) {\n    logger.debug(\"There were multiple attempts to register component \".concat(componentName, \".\"));\n    return false;\n  }\n  _components.set(componentName, component);\n  // add the component to existing app instances\n  var _iterator = _createForOfIteratorHelper(_apps.values()),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var app = _step.value;\n      _addComponent(app, component);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  var _iterator2 = _createForOfIteratorHelper(_serverApps.values()),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var serverApp = _step2.value;\n      _addComponent(serverApp, component);\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  return true;\n}\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n *\r\n * @returns the provider for the service with the matching name\r\n *\r\n * @internal\r\n */\nfunction _getProvider(app, name) {\n  var heartbeatController = app.container.getProvider('heartbeat').getImmediate({\n    optional: true\n  });\n  if (heartbeatController) {\n    void heartbeatController.triggerHeartbeat();\n  }\n  return app.container.getProvider(name);\n}\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\r\n *\r\n * @internal\r\n */\nfunction _removeServiceInstance(app, name) {\n  var instanceIdentifier = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_ENTRY_NAME;\n  _getProvider(app, name).clearInstance(instanceIdentifier);\n}\n/**\r\n *\r\n * @param obj - an object of type FirebaseApp or FirebaseOptions.\r\n *\r\n * @returns true if the provide object is of type FirebaseApp.\r\n *\r\n * @internal\r\n */\nfunction _isFirebaseApp(obj) {\n  return obj.options !== undefined;\n}\n/**\r\n *\r\n * @param obj - an object of type FirebaseApp.\r\n *\r\n * @returns true if the provided object is of type FirebaseServerAppImpl.\r\n *\r\n * @internal\r\n */\nfunction _isFirebaseServerApp(obj) {\n  return obj.settings !== undefined;\n}\n/**\r\n * Test only\r\n *\r\n * @internal\r\n */\nfunction _clearComponents() {\n  _components.clear();\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar ERRORS = (_ERRORS = {}, _defineProperty(_ERRORS, \"no-app\" /* AppError.NO_APP */, \"No Firebase App '{$appName}' has been created - \" + 'call initializeApp() first'), _defineProperty(_ERRORS, \"bad-app-name\" /* AppError.BAD_APP_NAME */, \"Illegal App name: '{$appName}'\"), _defineProperty(_ERRORS, \"duplicate-app\" /* AppError.DUPLICATE_APP */, \"Firebase App named '{$appName}' already exists with different options or config\"), _defineProperty(_ERRORS, \"app-deleted\" /* AppError.APP_DELETED */, \"Firebase App named '{$appName}' already deleted\"), _defineProperty(_ERRORS, \"server-app-deleted\" /* AppError.SERVER_APP_DELETED */, 'Firebase Server App has been deleted'), _defineProperty(_ERRORS, \"no-options\" /* AppError.NO_OPTIONS */, 'Need to provide options, when not being deployed to hosting via source.'), _defineProperty(_ERRORS, \"invalid-app-argument\" /* AppError.INVALID_APP_ARGUMENT */, 'firebase.{$appName}() takes either no argument or a ' + 'Firebase App instance.'), _defineProperty(_ERRORS, \"invalid-log-argument\" /* AppError.INVALID_LOG_ARGUMENT */, 'First argument to `onLog` must be null or a function.'), _defineProperty(_ERRORS, \"idb-open\" /* AppError.IDB_OPEN */, 'Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.'), _defineProperty(_ERRORS, \"idb-get\" /* AppError.IDB_GET */, 'Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.'), _defineProperty(_ERRORS, \"idb-set\" /* AppError.IDB_WRITE */, 'Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.'), _defineProperty(_ERRORS, \"idb-delete\" /* AppError.IDB_DELETE */, 'Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.'), _defineProperty(_ERRORS, \"finalization-registry-not-supported\" /* AppError.FINALIZATION_REGISTRY_NOT_SUPPORTED */, 'FirebaseServerApp deleteOnDeref field defined but the JS runtime does not support FinalizationRegistry.'), _defineProperty(_ERRORS, \"invalid-server-app-environment\" /* AppError.INVALID_SERVER_APP_ENVIRONMENT */, 'FirebaseServerApp is not for use in browser environments.'), _ERRORS);\nvar ERROR_FACTORY = new ErrorFactory('app', 'Firebase', ERRORS);\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar FirebaseAppImpl = /*#__PURE__*/function () {\n  function FirebaseAppImpl(options, config, container) {\n    var _this = this;\n    _classCallCheck(this, FirebaseAppImpl);\n    this._isDeleted = false;\n    this._options = Object.assign({}, options);\n    this._config = Object.assign({}, config);\n    this._name = config.name;\n    this._automaticDataCollectionEnabled = config.automaticDataCollectionEnabled;\n    this._container = container;\n    this.container.addComponent(new Component('app', function () {\n      return _this;\n    }, \"PUBLIC\" /* ComponentType.PUBLIC */));\n  }\n  _createClass(FirebaseAppImpl, [{\n    key: \"automaticDataCollectionEnabled\",\n    get: function get() {\n      this.checkDestroyed();\n      return this._automaticDataCollectionEnabled;\n    },\n    set: function set(val) {\n      this.checkDestroyed();\n      this._automaticDataCollectionEnabled = val;\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      this.checkDestroyed();\n      return this._name;\n    }\n  }, {\n    key: \"options\",\n    get: function get() {\n      this.checkDestroyed();\n      return this._options;\n    }\n  }, {\n    key: \"config\",\n    get: function get() {\n      this.checkDestroyed();\n      return this._config;\n    }\n  }, {\n    key: \"container\",\n    get: function get() {\n      return this._container;\n    }\n  }, {\n    key: \"isDeleted\",\n    get: function get() {\n      return this._isDeleted;\n    },\n    set: function set(val) {\n      this._isDeleted = val;\n    }\n    /**\r\n     * This function will throw an Error if the App has already been deleted -\r\n     * use before performing API actions on the App.\r\n     */\n  }, {\n    key: \"checkDestroyed\",\n    value: function checkDestroyed() {\n      if (this.isDeleted) {\n        throw ERROR_FACTORY.create(\"app-deleted\" /* AppError.APP_DELETED */, {\n          appName: this._name\n        });\n      }\n    }\n  }]);\n  return FirebaseAppImpl;\n}();\n/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar FirebaseServerAppImpl = /*#__PURE__*/function (_FirebaseAppImpl) {\n  _inherits(FirebaseServerAppImpl, _FirebaseAppImpl);\n  var _super = _createSuper(FirebaseServerAppImpl);\n  function FirebaseServerAppImpl(options, serverConfig, name, container) {\n    var _this2;\n    _classCallCheck(this, FirebaseServerAppImpl);\n    // Build configuration parameters for the FirebaseAppImpl base class.\n    var automaticDataCollectionEnabled = serverConfig.automaticDataCollectionEnabled !== undefined ? serverConfig.automaticDataCollectionEnabled : false;\n    // Create the FirebaseAppSettings object for the FirebaseAppImp constructor.\n    var config = {\n      name: name,\n      automaticDataCollectionEnabled: automaticDataCollectionEnabled\n    };\n    if (options.apiKey !== undefined) {\n      // Construct the parent FirebaseAppImp object.\n      _this2 = _super.call(this, options, config, container);\n    } else {\n      var appImpl = options;\n      _this2 = _super.call(this, appImpl.options, config, container);\n    }\n    // Now construct the data for the FirebaseServerAppImpl.\n    _this2._serverConfig = Object.assign({\n      automaticDataCollectionEnabled: automaticDataCollectionEnabled\n    }, serverConfig);\n    _this2._finalizationRegistry = null;\n    if (typeof FinalizationRegistry !== 'undefined') {\n      _this2._finalizationRegistry = new FinalizationRegistry(function () {\n        _this2.automaticCleanup();\n      });\n    }\n    _this2._refCount = 0;\n    _this2.incRefCount(_this2._serverConfig.releaseOnDeref);\n    // Do not retain a hard reference to the dref object, otherwise the FinalizationRegistry\n    // will never trigger.\n    _this2._serverConfig.releaseOnDeref = undefined;\n    serverConfig.releaseOnDeref = undefined;\n    registerVersion(name$p, version$1, 'serverapp');\n    return _possibleConstructorReturn(_this2);\n  }\n  _createClass(FirebaseServerAppImpl, [{\n    key: \"toJSON\",\n    value: function toJSON() {\n      return undefined;\n    }\n  }, {\n    key: \"refCount\",\n    get: function get() {\n      return this._refCount;\n    }\n    // Increment the reference count of this server app. If an object is provided, register it\n    // with the finalization registry.\n  }, {\n    key: \"incRefCount\",\n    value: function incRefCount(obj) {\n      if (this.isDeleted) {\n        return;\n      }\n      this._refCount++;\n      if (obj !== undefined && this._finalizationRegistry !== null) {\n        this._finalizationRegistry.register(obj, this);\n      }\n    }\n    // Decrement the reference count.\n  }, {\n    key: \"decRefCount\",\n    value: function decRefCount() {\n      if (this.isDeleted) {\n        return 0;\n      }\n      return --this._refCount;\n    }\n    // Invoked by the FinalizationRegistry callback to note that this app should go through its\n    // reference counts and delete itself if no reference count remain. The coordinating logic that\n    // handles this is in deleteApp(...).\n  }, {\n    key: \"automaticCleanup\",\n    value: function automaticCleanup() {\n      void deleteApp(this);\n    }\n  }, {\n    key: \"settings\",\n    get: function get() {\n      this.checkDestroyed();\n      return this._serverConfig;\n    }\n    /**\r\n     * This function will throw an Error if the App has already been deleted -\r\n     * use before performing API actions on the App.\r\n     */\n  }, {\n    key: \"checkDestroyed\",\n    value: function checkDestroyed() {\n      if (this.isDeleted) {\n        throw ERROR_FACTORY.create(\"server-app-deleted\" /* AppError.SERVER_APP_DELETED */);\n      }\n    }\n  }]);\n  return FirebaseServerAppImpl;\n}(FirebaseAppImpl);\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * The current SDK version.\r\n *\r\n * @public\r\n */\nvar SDK_VERSION = version;\nfunction initializeApp(_options) {\n  var rawConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var options = _options;\n  if (typeof rawConfig !== 'object') {\n    var _name = rawConfig;\n    rawConfig = {\n      name: _name\n    };\n  }\n  var config = Object.assign({\n    name: DEFAULT_ENTRY_NAME,\n    automaticDataCollectionEnabled: false\n  }, rawConfig);\n  var name = config.name;\n  if (typeof name !== 'string' || !name) {\n    throw ERROR_FACTORY.create(\"bad-app-name\" /* AppError.BAD_APP_NAME */, {\n      appName: String(name)\n    });\n  }\n  options || (options = getDefaultAppConfig());\n  if (!options) {\n    throw ERROR_FACTORY.create(\"no-options\" /* AppError.NO_OPTIONS */);\n  }\n\n  var existingApp = _apps.get(name);\n  if (existingApp) {\n    // return the existing app if options and config deep equal the ones in the existing app.\n    if (deepEqual(options, existingApp.options) && deepEqual(config, existingApp.config)) {\n      return existingApp;\n    } else {\n      throw ERROR_FACTORY.create(\"duplicate-app\" /* AppError.DUPLICATE_APP */, {\n        appName: name\n      });\n    }\n  }\n  var container = new ComponentContainer(name);\n  var _iterator3 = _createForOfIteratorHelper(_components.values()),\n    _step3;\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var component = _step3.value;\n      container.addComponent(component);\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n  var newApp = new FirebaseAppImpl(options, config, container);\n  _apps.set(name, newApp);\n  return newApp;\n}\nfunction initializeServerApp(_options, _serverAppConfig) {\n  if (isBrowser() && !isWebWorker()) {\n    // FirebaseServerApp isn't designed to be run in browsers.\n    throw ERROR_FACTORY.create(\"invalid-server-app-environment\" /* AppError.INVALID_SERVER_APP_ENVIRONMENT */);\n  }\n\n  if (_serverAppConfig.automaticDataCollectionEnabled === undefined) {\n    _serverAppConfig.automaticDataCollectionEnabled = false;\n  }\n  var appOptions;\n  if (_isFirebaseApp(_options)) {\n    appOptions = _options.options;\n  } else {\n    appOptions = _options;\n  }\n  // Build an app name based on a hash of the configuration options.\n  var nameObj = Object.assign(Object.assign({}, _serverAppConfig), appOptions);\n  // However, Do not mangle the name based on releaseOnDeref, since it will vary between the\n  // construction of FirebaseServerApp instances. For example, if the object is the request headers.\n  if (nameObj.releaseOnDeref !== undefined) {\n    delete nameObj.releaseOnDeref;\n  }\n  var hashCode = function hashCode(s) {\n    return _toConsumableArray(s).reduce(function (hash, c) {\n      return Math.imul(31, hash) + c.charCodeAt(0) | 0;\n    }, 0);\n  };\n  if (_serverAppConfig.releaseOnDeref !== undefined) {\n    if (typeof FinalizationRegistry === 'undefined') {\n      throw ERROR_FACTORY.create(\"finalization-registry-not-supported\" /* AppError.FINALIZATION_REGISTRY_NOT_SUPPORTED */, {});\n    }\n  }\n  var nameString = '' + hashCode(JSON.stringify(nameObj));\n  var existingApp = _serverApps.get(nameString);\n  if (existingApp) {\n    existingApp.incRefCount(_serverAppConfig.releaseOnDeref);\n    return existingApp;\n  }\n  var container = new ComponentContainer(nameString);\n  var _iterator4 = _createForOfIteratorHelper(_components.values()),\n    _step4;\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var component = _step4.value;\n      container.addComponent(component);\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n  var newApp = new FirebaseServerAppImpl(appOptions, _serverAppConfig, nameString, container);\n  _serverApps.set(nameString, newApp);\n  return newApp;\n}\n/**\r\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\r\n *\r\n * When called with no arguments, the default app is returned. When an app name\r\n * is provided, the app corresponding to that name is returned.\r\n *\r\n * An exception is thrown if the app being retrieved has not yet been\r\n * initialized.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return the default app\r\n * const app = getApp();\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return a named app\r\n * const otherApp = getApp(\"otherApp\");\r\n * ```\r\n *\r\n * @param name - Optional name of the app to return. If no name is\r\n *   provided, the default is `\"[DEFAULT]\"`.\r\n *\r\n * @returns The app corresponding to the provided app name.\r\n *   If no app name is provided, the default app is returned.\r\n *\r\n * @public\r\n */\nfunction getApp() {\n  var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_ENTRY_NAME;\n  var app = _apps.get(name);\n  if (!app && name === DEFAULT_ENTRY_NAME && getDefaultAppConfig()) {\n    return initializeApp();\n  }\n  if (!app) {\n    throw ERROR_FACTORY.create(\"no-app\" /* AppError.NO_APP */, {\n      appName: name\n    });\n  }\n  return app;\n}\n/**\r\n * A (read-only) array of all initialized apps.\r\n * @public\r\n */\nfunction getApps() {\n  return Array.from(_apps.values());\n}\n/**\r\n * Renders this app unusable and frees the resources of all associated\r\n * services.\r\n *\r\n * @example\r\n * ```javascript\r\n * deleteApp(app)\r\n *   .then(function() {\r\n *     console.log(\"App deleted successfully\");\r\n *   })\r\n *   .catch(function(error) {\r\n *     console.log(\"Error deleting app:\", error);\r\n *   });\r\n * ```\r\n *\r\n * @public\r\n */\nfunction deleteApp(_x) {\n  return _deleteApp.apply(this, arguments);\n}\n/**\r\n * Registers a library's name and version for platform logging purposes.\r\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\r\n * @param version - Current version of that library.\r\n * @param variant - Bundle variant, e.g., node, rn, etc.\r\n *\r\n * @public\r\n */\nfunction _deleteApp() {\n  _deleteApp = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(app) {\n    var cleanupProviders, name, firebaseServerApp;\n    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            cleanupProviders = false;\n            name = app.name;\n            if (_apps.has(name)) {\n              cleanupProviders = true;\n              _apps.delete(name);\n            } else if (_serverApps.has(name)) {\n              firebaseServerApp = app;\n              if (firebaseServerApp.decRefCount() <= 0) {\n                _serverApps.delete(name);\n                cleanupProviders = true;\n              }\n            }\n            if (!cleanupProviders) {\n              _context7.next = 7;\n              break;\n            }\n            _context7.next = 6;\n            return Promise.all(app.container.getProviders().map(function (provider) {\n              return provider.delete();\n            }));\n          case 6:\n            app.isDeleted = true;\n          case 7:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  }));\n  return _deleteApp.apply(this, arguments);\n}\nfunction registerVersion(libraryKeyOrName, version, variant) {\n  var _a;\n  // TODO: We can use this check to whitelist strings when/if we set up\n  // a good whitelist system.\n  var library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;\n  if (variant) {\n    library += \"-\".concat(variant);\n  }\n  var libraryMismatch = library.match(/\\s|\\//);\n  var versionMismatch = version.match(/\\s|\\//);\n  if (libraryMismatch || versionMismatch) {\n    var warning = [\"Unable to register library \\\"\".concat(library, \"\\\" with version \\\"\").concat(version, \"\\\":\")];\n    if (libraryMismatch) {\n      warning.push(\"library name \\\"\".concat(library, \"\\\" contains illegal characters (whitespace or \\\"/\\\")\"));\n    }\n    if (libraryMismatch && versionMismatch) {\n      warning.push('and');\n    }\n    if (versionMismatch) {\n      warning.push(\"version name \\\"\".concat(version, \"\\\" contains illegal characters (whitespace or \\\"/\\\")\"));\n    }\n    logger.warn(warning.join(' '));\n    return;\n  }\n  _registerComponent(new Component(\"\".concat(library, \"-version\"), function () {\n    return {\n      library: library,\n      version: version\n    };\n  }, \"VERSION\" /* ComponentType.VERSION */));\n}\n/**\r\n * Sets log handler for all Firebase SDKs.\r\n * @param logCallback - An optional custom log handler that executes user code whenever\r\n * the Firebase SDK makes a logging call.\r\n *\r\n * @public\r\n */\nfunction onLog(logCallback, options) {\n  if (logCallback !== null && typeof logCallback !== 'function') {\n    throw ERROR_FACTORY.create(\"invalid-log-argument\" /* AppError.INVALID_LOG_ARGUMENT */);\n  }\n\n  setUserLogHandler(logCallback, options);\n}\n/**\r\n * Sets log level for all Firebase SDKs.\r\n *\r\n * All of the log types above the current log level are captured (i.e. if\r\n * you set the log level to `info`, errors are logged, but `debug` and\r\n * `verbose` logs are not).\r\n *\r\n * @public\r\n */\nfunction setLogLevel(logLevel) {\n  setLogLevel$1(logLevel);\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar DB_NAME = 'firebase-heartbeat-database';\nvar DB_VERSION = 1;\nvar STORE_NAME = 'firebase-heartbeat-store';\nvar dbPromise = null;\nfunction getDbPromise() {\n  if (!dbPromise) {\n    dbPromise = openDB(DB_NAME, DB_VERSION, {\n      upgrade: function upgrade(db, oldVersion) {\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) {\n          case 0:\n            try {\n              db.createObjectStore(STORE_NAME);\n            } catch (e) {\n              // Safari/iOS browsers throw occasional exceptions on\n              // db.createObjectStore() that may be a bug. Avoid blocking\n              // the rest of the app functionality.\n              console.warn(e);\n            }\n        }\n      }\n    }).catch(function (e) {\n      throw ERROR_FACTORY.create(\"idb-open\" /* AppError.IDB_OPEN */, {\n        originalErrorMessage: e.message\n      });\n    });\n  }\n  return dbPromise;\n}\nfunction readHeartbeatsFromIndexedDB(_x2) {\n  return _readHeartbeatsFromIndexedDB.apply(this, arguments);\n}\nfunction _readHeartbeatsFromIndexedDB() {\n  _readHeartbeatsFromIndexedDB = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(app) {\n    var db, tx, result, idbGetError;\n    return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            _context8.prev = 0;\n            _context8.next = 3;\n            return getDbPromise();\n          case 3:\n            db = _context8.sent;\n            tx = db.transaction(STORE_NAME);\n            _context8.next = 7;\n            return tx.objectStore(STORE_NAME).get(computeKey(app));\n          case 7:\n            result = _context8.sent;\n            _context8.next = 10;\n            return tx.done;\n          case 10:\n            return _context8.abrupt(\"return\", result);\n          case 13:\n            _context8.prev = 13;\n            _context8.t0 = _context8[\"catch\"](0);\n            if (_context8.t0 instanceof FirebaseError) {\n              logger.warn(_context8.t0.message);\n            } else {\n              idbGetError = ERROR_FACTORY.create(\"idb-get\" /* AppError.IDB_GET */, {\n                originalErrorMessage: _context8.t0 === null || _context8.t0 === void 0 ? void 0 : _context8.t0.message\n              });\n              logger.warn(idbGetError.message);\n            }\n          case 16:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee8, null, [[0, 13]]);\n  }));\n  return _readHeartbeatsFromIndexedDB.apply(this, arguments);\n}\nfunction writeHeartbeatsToIndexedDB(_x3, _x4) {\n  return _writeHeartbeatsToIndexedDB.apply(this, arguments);\n}\nfunction _writeHeartbeatsToIndexedDB() {\n  _writeHeartbeatsToIndexedDB = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(app, heartbeatObject) {\n    var db, tx, objectStore, idbGetError;\n    return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            _context9.prev = 0;\n            _context9.next = 3;\n            return getDbPromise();\n          case 3:\n            db = _context9.sent;\n            tx = db.transaction(STORE_NAME, 'readwrite');\n            objectStore = tx.objectStore(STORE_NAME);\n            _context9.next = 8;\n            return objectStore.put(heartbeatObject, computeKey(app));\n          case 8:\n            _context9.next = 10;\n            return tx.done;\n          case 10:\n            _context9.next = 15;\n            break;\n          case 12:\n            _context9.prev = 12;\n            _context9.t0 = _context9[\"catch\"](0);\n            if (_context9.t0 instanceof FirebaseError) {\n              logger.warn(_context9.t0.message);\n            } else {\n              idbGetError = ERROR_FACTORY.create(\"idb-set\" /* AppError.IDB_WRITE */, {\n                originalErrorMessage: _context9.t0 === null || _context9.t0 === void 0 ? void 0 : _context9.t0.message\n              });\n              logger.warn(idbGetError.message);\n            }\n          case 15:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, _callee9, null, [[0, 12]]);\n  }));\n  return _writeHeartbeatsToIndexedDB.apply(this, arguments);\n}\nfunction computeKey(app) {\n  return \"\".concat(app.name, \"!\").concat(app.options.appId);\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar MAX_HEADER_BYTES = 1024;\n// 30 days\nvar STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1000;\nvar HeartbeatServiceImpl = /*#__PURE__*/function () {\n  function HeartbeatServiceImpl(container) {\n    var _this3 = this;\n    _classCallCheck(this, HeartbeatServiceImpl);\n    this.container = container;\n    /**\r\n     * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate\r\n     * the header string.\r\n     * Stores one record per date. This will be consolidated into the standard\r\n     * format of one record per user agent string before being sent as a header.\r\n     * Populated from indexedDB when the controller is instantiated and should\r\n     * be kept in sync with indexedDB.\r\n     * Leave public for easier testing.\r\n     */\n    this._heartbeatsCache = null;\n    var app = this.container.getProvider('app').getImmediate();\n    this._storage = new HeartbeatStorageImpl(app);\n    this._heartbeatsCachePromise = this._storage.read().then(function (result) {\n      _this3._heartbeatsCache = result;\n      return result;\n    });\n  }\n  /**\r\n   * Called to report a heartbeat. The function will generate\r\n   * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it\r\n   * to IndexedDB.\r\n   * Note that we only store one heartbeat per day. So if a heartbeat for today is\r\n   * already logged, subsequent calls to this function in the same day will be ignored.\r\n   */\n  _createClass(HeartbeatServiceImpl, [{\n    key: \"triggerHeartbeat\",\n    value: function () {\n      var _triggerHeartbeat = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _a, _b, platformLogger, agent, date;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                platformLogger = this.container.getProvider('platform-logger').getImmediate(); // This is the \"Firebase user agent\" string from the platform logger\n                // service, not the browser user agent.\n                agent = platformLogger.getPlatformInfoString();\n                date = getUTCDateString();\n                if (!(((_a = this._heartbeatsCache) === null || _a === void 0 ? void 0 : _a.heartbeats) == null)) {\n                  _context.next = 9;\n                  break;\n                }\n                _context.next = 6;\n                return this._heartbeatsCachePromise;\n              case 6:\n                this._heartbeatsCache = _context.sent;\n                if (!(((_b = this._heartbeatsCache) === null || _b === void 0 ? void 0 : _b.heartbeats) == null)) {\n                  _context.next = 9;\n                  break;\n                }\n                return _context.abrupt(\"return\");\n              case 9:\n                if (!(this._heartbeatsCache.lastSentHeartbeatDate === date || this._heartbeatsCache.heartbeats.some(function (singleDateHeartbeat) {\n                  return singleDateHeartbeat.date === date;\n                }))) {\n                  _context.next = 13;\n                  break;\n                }\n                return _context.abrupt(\"return\");\n              case 13:\n                // There is no entry for this date. Create one.\n                this._heartbeatsCache.heartbeats.push({\n                  date: date,\n                  agent: agent\n                });\n              case 14:\n                // Remove entries older than 30 days.\n                this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter(function (singleDateHeartbeat) {\n                  var hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();\n                  var now = Date.now();\n                  return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;\n                });\n                return _context.abrupt(\"return\", this._storage.overwrite(this._heartbeatsCache));\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function triggerHeartbeat() {\n        return _triggerHeartbeat.apply(this, arguments);\n      }\n      return triggerHeartbeat;\n    }()\n    /**\r\n     * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.\r\n     * It also clears all heartbeats from memory as well as in IndexedDB.\r\n     *\r\n     * NOTE: Consuming product SDKs should not send the header if this method\r\n     * returns an empty string.\r\n     */\n  }, {\n    key: \"getHeartbeatsHeader\",\n    value: function () {\n      var _getHeartbeatsHeader = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _a, date, _extractHeartbeatsFor, heartbeatsToSend, unsentEntries, headerString;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(this._heartbeatsCache === null)) {\n                  _context2.next = 3;\n                  break;\n                }\n                _context2.next = 3;\n                return this._heartbeatsCachePromise;\n              case 3:\n                if (!(((_a = this._heartbeatsCache) === null || _a === void 0 ? void 0 : _a.heartbeats) == null || this._heartbeatsCache.heartbeats.length === 0)) {\n                  _context2.next = 5;\n                  break;\n                }\n                return _context2.abrupt(\"return\", '');\n              case 5:\n                date = getUTCDateString(); // Extract as many heartbeats from the cache as will fit under the size limit.\n                _extractHeartbeatsFor = extractHeartbeatsForHeader(this._heartbeatsCache.heartbeats), heartbeatsToSend = _extractHeartbeatsFor.heartbeatsToSend, unsentEntries = _extractHeartbeatsFor.unsentEntries;\n                headerString = base64urlEncodeWithoutPadding(JSON.stringify({\n                  version: 2,\n                  heartbeats: heartbeatsToSend\n                })); // Store last sent date to prevent another being logged/sent for the same day.\n                this._heartbeatsCache.lastSentHeartbeatDate = date;\n                if (!(unsentEntries.length > 0)) {\n                  _context2.next = 15;\n                  break;\n                }\n                // Store any unsent entries if they exist.\n                this._heartbeatsCache.heartbeats = unsentEntries;\n                // This seems more likely than emptying the array (below) to lead to some odd state\n                // since the cache isn't empty and this will be called again on the next request,\n                // and is probably safest if we await it.\n                _context2.next = 13;\n                return this._storage.overwrite(this._heartbeatsCache);\n              case 13:\n                _context2.next = 17;\n                break;\n              case 15:\n                this._heartbeatsCache.heartbeats = [];\n                // Do not wait for this, to reduce latency.\n                void this._storage.overwrite(this._heartbeatsCache);\n              case 17:\n                return _context2.abrupt(\"return\", headerString);\n              case 18:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function getHeartbeatsHeader() {\n        return _getHeartbeatsHeader.apply(this, arguments);\n      }\n      return getHeartbeatsHeader;\n    }()\n  }]);\n  return HeartbeatServiceImpl;\n}();\nfunction getUTCDateString() {\n  var today = new Date();\n  // Returns date format 'YYYY-MM-DD'\n  return today.toISOString().substring(0, 10);\n}\nfunction extractHeartbeatsForHeader(heartbeatsCache) {\n  var maxSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : MAX_HEADER_BYTES;\n  // Heartbeats grouped by user agent in the standard format to be sent in\n  // the header.\n  var heartbeatsToSend = [];\n  // Single date format heartbeats that are not sent.\n  var unsentEntries = heartbeatsCache.slice();\n  var _iterator5 = _createForOfIteratorHelper(heartbeatsCache),\n    _step5;\n  try {\n    var _loop = function _loop() {\n      var singleDateHeartbeat = _step5.value;\n      // Look for an existing entry with the same user agent.\n      var heartbeatEntry = heartbeatsToSend.find(function (hb) {\n        return hb.agent === singleDateHeartbeat.agent;\n      });\n      if (!heartbeatEntry) {\n        // If no entry for this user agent exists, create one.\n        heartbeatsToSend.push({\n          agent: singleDateHeartbeat.agent,\n          dates: [singleDateHeartbeat.date]\n        });\n        if (countBytes(heartbeatsToSend) > maxSize) {\n          // If the header would exceed max size, remove the added heartbeat\n          // entry and stop adding to the header.\n          heartbeatsToSend.pop();\n          return \"break\";\n        }\n      } else {\n        heartbeatEntry.dates.push(singleDateHeartbeat.date);\n        // If the header would exceed max size, remove the added date\n        // and stop adding to the header.\n        if (countBytes(heartbeatsToSend) > maxSize) {\n          heartbeatEntry.dates.pop();\n          return \"break\";\n        }\n      }\n      // Pop unsent entry from queue. (Skipped if adding the entry exceeded\n      // quota and the loop breaks early.)\n      unsentEntries = unsentEntries.slice(1);\n    };\n    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n      var _ret = _loop();\n      if (_ret === \"break\") break;\n    }\n  } catch (err) {\n    _iterator5.e(err);\n  } finally {\n    _iterator5.f();\n  }\n  return {\n    heartbeatsToSend: heartbeatsToSend,\n    unsentEntries: unsentEntries\n  };\n}\nvar HeartbeatStorageImpl = /*#__PURE__*/function () {\n  function HeartbeatStorageImpl(app) {\n    _classCallCheck(this, HeartbeatStorageImpl);\n    this.app = app;\n    this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();\n  }\n  _createClass(HeartbeatStorageImpl, [{\n    key: \"runIndexedDBEnvironmentCheck\",\n    value: function () {\n      var _runIndexedDBEnvironmentCheck = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (isIndexedDBAvailable()) {\n                  _context3.next = 4;\n                  break;\n                }\n                return _context3.abrupt(\"return\", false);\n              case 4:\n                return _context3.abrupt(\"return\", validateIndexedDBOpenable().then(function () {\n                  return true;\n                }).catch(function () {\n                  return false;\n                }));\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n      function runIndexedDBEnvironmentCheck() {\n        return _runIndexedDBEnvironmentCheck.apply(this, arguments);\n      }\n      return runIndexedDBEnvironmentCheck;\n    }()\n    /**\r\n     * Read all heartbeats.\r\n     */\n  }, {\n    key: \"read\",\n    value: function () {\n      var _read = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var canUseIndexedDB, idbHeartbeatObject;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this._canUseIndexedDBPromise;\n              case 2:\n                canUseIndexedDB = _context4.sent;\n                if (canUseIndexedDB) {\n                  _context4.next = 7;\n                  break;\n                }\n                return _context4.abrupt(\"return\", {\n                  heartbeats: []\n                });\n              case 7:\n                _context4.next = 9;\n                return readHeartbeatsFromIndexedDB(this.app);\n              case 9:\n                idbHeartbeatObject = _context4.sent;\n                if (!(idbHeartbeatObject === null || idbHeartbeatObject === void 0 ? void 0 : idbHeartbeatObject.heartbeats)) {\n                  _context4.next = 14;\n                  break;\n                }\n                return _context4.abrupt(\"return\", idbHeartbeatObject);\n              case 14:\n                return _context4.abrupt(\"return\", {\n                  heartbeats: []\n                });\n              case 15:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function read() {\n        return _read.apply(this, arguments);\n      }\n      return read;\n    }() // overwrite the storage with the provided heartbeats\n  }, {\n    key: \"overwrite\",\n    value: function () {\n      var _overwrite = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(heartbeatsObject) {\n        var _a, canUseIndexedDB, existingHeartbeatsObject;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this._canUseIndexedDBPromise;\n              case 2:\n                canUseIndexedDB = _context5.sent;\n                if (canUseIndexedDB) {\n                  _context5.next = 7;\n                  break;\n                }\n                return _context5.abrupt(\"return\");\n              case 7:\n                _context5.next = 9;\n                return this.read();\n              case 9:\n                existingHeartbeatsObject = _context5.sent;\n                return _context5.abrupt(\"return\", writeHeartbeatsToIndexedDB(this.app, {\n                  lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,\n                  heartbeats: heartbeatsObject.heartbeats\n                }));\n              case 11:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n      function overwrite(_x5) {\n        return _overwrite.apply(this, arguments);\n      }\n      return overwrite;\n    }() // add heartbeats\n  }, {\n    key: \"add\",\n    value: function () {\n      var _add = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(heartbeatsObject) {\n        var _a, canUseIndexedDB, existingHeartbeatsObject;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this._canUseIndexedDBPromise;\n              case 2:\n                canUseIndexedDB = _context6.sent;\n                if (canUseIndexedDB) {\n                  _context6.next = 7;\n                  break;\n                }\n                return _context6.abrupt(\"return\");\n              case 7:\n                _context6.next = 9;\n                return this.read();\n              case 9:\n                existingHeartbeatsObject = _context6.sent;\n                return _context6.abrupt(\"return\", writeHeartbeatsToIndexedDB(this.app, {\n                  lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,\n                  heartbeats: [].concat(_toConsumableArray(existingHeartbeatsObject.heartbeats), _toConsumableArray(heartbeatsObject.heartbeats))\n                }));\n              case 11:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n      function add(_x6) {\n        return _add.apply(this, arguments);\n      }\n      return add;\n    }()\n  }]);\n  return HeartbeatStorageImpl;\n}();\n/**\r\n * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped\r\n * in a platform logging header JSON object, stringified, and converted\r\n * to base 64.\r\n */\nfunction countBytes(heartbeatsCache) {\n  // base64 has a restricted set of characters, all of which should be 1 byte.\n  return base64urlEncodeWithoutPadding(\n  // heartbeatsCache wrapper properties\n  JSON.stringify({\n    version: 2,\n    heartbeats: heartbeatsCache\n  })).length;\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction registerCoreComponents(variant) {\n  _registerComponent(new Component('platform-logger', function (container) {\n    return new PlatformLoggerServiceImpl(container);\n  }, \"PRIVATE\" /* ComponentType.PRIVATE */));\n  _registerComponent(new Component('heartbeat', function (container) {\n    return new HeartbeatServiceImpl(container);\n  }, \"PRIVATE\" /* ComponentType.PRIVATE */));\n  // Register `app` package.\n  registerVersion(name$p, version$1, variant);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name$p, version$1, 'esm2017');\n  // Register platform SDK identifier (no version).\n  registerVersion('fire-js', '');\n}\n\n/**\r\n * Firebase App\r\n *\r\n * @remarks This package coordinates the communication between the different Firebase components\r\n * @packageDocumentation\r\n */\nregisterCoreComponents('');\nexport { SDK_VERSION, DEFAULT_ENTRY_NAME as _DEFAULT_ENTRY_NAME, _addComponent, _addOrOverwriteComponent, _apps, _clearComponents, _components, _getProvider, _isFirebaseApp, _isFirebaseServerApp, _registerComponent, _removeServiceInstance, _serverApps, deleteApp, getApp, getApps, initializeApp, initializeServerApp, onLog, registerVersion, setLogLevel };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;AAeG;AAfH,IAyBaA,yBAAyB;EACpC,mCAA6BC,SAA6B;IAAAC;IAA7B,IAAS,aAATD,SAAS;;;;;;WAGtC,iCAAqB;MACnB,IAAME,SAAS,GAAG,IAAI,CAACF,SAAS,CAACG,YAAY,EAAE;;;MAG/C,OAAOD,SAAS,CACbE,GAAG,CAAC,kBAAQ,EAAG;QACd,IAAIC,wBAAwB,CAACC,QAAQ,CAAC,EAAE;UACtC,IAAMC,OAAO,GAAGD,QAAQ,CAACE,YAAY,EAAoB;UACzD,iBAAUD,OAAO,CAACE,OAAO,cAAIF,OAAO,CAACG,OAAO;QAC7C,OAAM;UACL,OAAO,IAAI;QACZ;MACH,CAAC,CAAC,CACDC,MAAM,CAAC,mBAAS;QAAA,OAAIC,SAAS;MAAA,EAAC,CAC9BC,IAAI,CAAC,GAAG,CAAC;;EACb;EAAA;AAAA;AAEH;;;;;;;AAOG;AACH,SAASR,wBAAwBA,CAACC,QAAwB;EACxD,IAAMQ,SAAS,GAAGR,QAAQ,CAACS,YAAY,EAAE;EACzC,OAAO,UAAS,KAAT,iBAAS,uBAATD,SAAS,CAAEE,IAAI;AACxB;;;;;ACzDA;;;;;;;;;;;;;;;AAeG;AAII,IAAMC,MAAM,GAAG,IAAIC,MAAM,CAAC,eAAe,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnBjD;;;;;;;;;;;;;;;AAeG;AA6BH;;;;AAIG;AACI,IAAMC,kBAAkB,GAAG;AAE3B,IAAMC,mBAAmB,qEAC7BC,MAAO,EAAG,WAAW,yCACrBC,MAAa,EAAG,kBAAkB,yCAClCC,MAAa,EAAG,gBAAgB,yCAChCC,MAAmB,EAAG,uBAAuB,yCAC7CC,MAAY,EAAG,gBAAgB,yCAC/BC,MAAkB,EAAG,uBAAuB,yCAC5CC,MAAQ,EAAG,WAAW,yCACtBC,MAAc,EAAG,kBAAkB,yCACnCC,MAAY,EAAG,WAAW,yCAC1BC,MAAkB,EAAG,kBAAkB,yCACvCC,MAAa,EAAG,SAAS,yCACzBC,MAAmB,EAAG,gBAAgB,yCACtCC,MAAiB,EAAG,UAAU,yCAC9BC,MAAuB,EAAG,iBAAiB,yCAC3CC,MAAa,EAAG,UAAU,yCAC1BC,MAAmB,EAAG,iBAAiB,yCACvCC,MAAe,EAAG,WAAW,yCAC7BC,MAAqB,EAAG,kBAAkB,yCAC1CC,MAAgB,EAAG,SAAS,yCAC5BC,MAAsB,EAAG,gBAAgB,yCACzCC,MAAW,EAAG,UAAU,yCACxBC,MAAiB,EAAG,iBAAiB,yCACrCC,MAAa,EAAG,UAAU,yCAC1BC,MAAmB,EAAG,iBAAiB,yCACvCC,MAAU,EAAG,aAAa,yCAC3B,SAAS,EAAE,SAAS,yCACnBC,IAAW,EAAG,aAAa,wBACpB;;AC/EV;;;;;;;;;;;;;;;AAeG;AAaH;;AAEG;AACU,SAAK,GAAG,IAAIC,GAAG;AAE5B;;AAEG;AACU,eAAW,GAAG,IAAIA,GAAG;AAElC;;;;AAIG;AACH;AACa,eAAW,GAAG,IAAIA,GAAG;AAElC;;;;AAIG;AACa,sBAAaC,CAC3BC,GAAgB,EAChBnC,SAAuB;EAEvB,IAAI;IACDmC,GAAuB,CAACjD,SAAS,CAACkD,YAAY,CAACpC,SAAS,CAAC;EAC3D,EAAC,OAAOqC,CAAC,EAAE;IACVlC,MAAM,CAACmC,KAAK,qBACGtC,SAAS,CAACuC,IAAI,kDAAwCJ,GAAG,CAACI,IAAI,GAC3EF,CAAC,CACF;EACF;AACH;AAEA;;;AAGG;AACa,iCAAwBG,CACtCL,GAAgB,EAChBnC,SAAoB;EAEnBmC,GAAuB,CAACjD,SAAS,CAACuD,uBAAuB,CAACzC,SAAS,CAAC;AACvE;AAEA;;;;;;AAMG;AACG,SAAU0C,kBAAkBA,CAChC1C,SAAuB;EAEvB,IAAM2C,aAAa,GAAG3C,SAAS,CAACuC,IAAI;EACpC,IAAIK,WAAW,CAACC,GAAG,CAACF,aAAa,CAAC,EAAE;IAClCxC,MAAM,CAACmC,KAAK,8DAC4CK,aAAa,MAAG,CACvE;IAED,OAAO,KAAK;EACb;EAEDC,WAAW,CAACE,GAAG,CAACH,aAAa,EAAE3C,SAAS,CAAC;;6CAGvB+C,KAAK,CAACC,MAAM,EAAE;IAAAC;EAAA;IAAhC,oDAAkC;MAAA,IAAvBd,GAAG;MACZD,aAAa,CAACC,GAAsB,EAAEnC,SAAS,CAAC;IACjD;EAAA;IAAAkD;EAAA;IAAAA;EAAA;EAAA,4CAEuBC,WAAW,CAACH,MAAM,EAAE;IAAAI;EAAA;IAA5C,uDAA8C;MAAA,IAAnCC,SAAS;MAClBnB,aAAa,CAACmB,SAAkC,EAAErD,SAAS,CAAC;IAC7D;EAAA;IAAAsD;EAAA;IAAAA;EAAA;EAED,OAAO,IAAI;AACb;AAEA;;;;;;;;AAQG;AACa,qBAAYC,CAC1BpB,GAAgB,EAChBI,IAAO;EAEP,IAAMiB,mBAAmB,GAAIrB,GAAuB,CAACjD,SAAS,CAC3DuE,WAAW,CAAC,WAAW,CAAC,CACxB/D,YAAY,CAAC;IAAEgE,QAAQ,EAAE;EAAI,CAAE,CAAC;EACnC,IAAIF,mBAAmB,EAAE;IACvB,KAAKA,mBAAmB,CAACG,gBAAgB,EAAE;EAC5C;EACD,OAAQxB,GAAuB,CAACjD,SAAS,CAACuE,WAAW,CAAClB,IAAI,CAAC;AAC7D;AAEA;;;;;;;AAOG;AACG,SAAUqB,sBAAsBA,CACpCzB,GAAgB,EAChBI,IAAO,EACwC;EAAA,IAA/CsB,yFAA6BxD,kBAAkB;EAE/CkD,YAAY,CAACpB,GAAG,EAAEI,IAAI,CAAC,CAACuB,aAAa,CAACD,kBAAkB,CAAC;AAC3D;AAEA;;;;;;;AAOG;AACG,SAAUE,cAAcA,CAC5BC,GAAkC;EAElC,OAAQA,GAAmB,CAACC,OAAO,KAAKC,SAAS;AACnD;AAEA;;;;;;;AAOG;AACG,SAAUC,oBAAoBA,CAClCH,GAAoC;EAEpC,OAAQA,GAAyB,CAACI,QAAQ,KAAKF,SAAS;AAC1D;AAEA;;;;AAIG;SACaG,gBAAgBA;EAC9BzB,WAAW,CAAC0B,KAAK,EAAE;AACrB;;ACtLA;;;;;;;;;;;;;;;AAeG;AAqBH,IAAMC,MAAM,2CACV,gCACE,kDAAkD,GAClD,4BAA4B,4BAC9B,4CAAyB,gCAAgC,4BACzD,8CACE,iFAAiF,4BACnF,0CAAwB,iDAAiD,4BACzE,wDAA+B,sCAAsC,4BACrE,wCACE,yEAAyE,4BAC3E,4DACE,sDAAsD,GACtD,wBAAwB,4BAC1B,4DACE,uDAAuD,4BACzD,oCACE,+EAA+E,4BACjF,kCACE,oFAAoF,4BACtF,oCACE,kFAAkF,4BACpF,wCACE,qFAAqF,4BACvF,0FACE,yGAAyG,4BAC3G,gFACE,2DAA2D,WAC9D;AAeM,IAAMC,aAAa,GAAG,IAAIC,YAAY,CAC3C,KAAK,EACL,UAAU,EACVF,MAAM,CACP;;ACnFD;;;;;;;;;;;;;;;AAeG;AAfH,IA6BaG,eAAe;EAc1B,yBACET,OAAwB,EACxBU,MAAqC,EACrCzF,SAA6B;IAAA;IAAAC;IANrB,IAAU,cAAG,KAAK;IAQ1B,IAAI,CAACyF,QAAQ,GAAQC,yBAAO,CAAE;IAC9B,IAAI,CAACC,OAAO,GAAQD,wBAAM,CAAE;IAC5B,IAAI,CAACE,KAAK,GAAGJ,MAAM,CAACpC,IAAI;IACxB,IAAI,CAACyC,+BAA+B,GAClCL,MAAM,CAACM,8BAA8B;IACvC,IAAI,CAACC,UAAU,GAAGhG,SAAS;IAC3B,IAAI,CAACA,SAAS,CAACkD,YAAY,CACzB,IAAI+C,SAAS,CAAC,KAAK,EAAE;MAAA,OAAMC,KAAI;IAAA,uCAAuB,CACvD;;EACFC;IAAAC;IAAAC,KAED,eAAkC;MAChC,IAAI,CAACC,cAAc,EAAE;MACrB,OAAO,IAAI,CAACR,+BAA+B;KAC5C;IAAAlC,KAED,aAAmC2C,GAAY;MAC7C,IAAI,CAACD,cAAc,EAAE;MACrB,IAAI,CAACR,+BAA+B,GAAGS,GAAG;;EAC3C;IAAAH;IAAAC,KAED,eAAQ;MACN,IAAI,CAACC,cAAc,EAAE;MACrB,OAAO,IAAI,CAACT,KAAK;;EAClB;IAAAO;IAAAC,KAED,eAAW;MACT,IAAI,CAACC,cAAc,EAAE;MACrB,OAAO,IAAI,CAACZ,QAAQ;;EACrB;IAAAU;IAAAC,KAED,eAAU;MACR,IAAI,CAACC,cAAc,EAAE;MACrB,OAAO,IAAI,CAACV,OAAO;;EACpB;IAAAQ;IAAAC,KAED,eAAa;MACX,OAAO,IAAI,CAACL,UAAU;;EACvB;IAAAI;IAAAC,KAED,eAAa;MACX,OAAO,IAAI,CAACG,UAAU;KACvB;IAAA5C,KAED,aAAc2C,GAAY;MACxB,IAAI,CAACC,UAAU,GAAGD,GAAG;;IAGvB;;;AAGG;EAHH;IAAAH;IAAAK,OAIU,0BAAc;MACtB,IAAI,IAAI,CAACC,SAAS,EAAE;QAClB,MAAMpB,aAAa,CAACqB,MAAM,2CAAuB;UAAEtF,OAAO,EAAE,IAAI,CAACwE;QAAK,CAAE,CAAC;MAC1E;;EACF;EAAA;AAAA;ACxGH;;;;;;;;;;;;;;;AAeG;AAfH,IA6Bae,qBACX;EAAAC;EAAA;EAOA,+BACE9B,OAA0C,EAC1C+B,YAAuC,EACvCzD,IAAY,EACZrD,SAA6B;IAAA;IAAAC;;IAG7B,IAAM8F,8BAA8B,GAClCe,YAAY,CAACf,8BAA8B,KAAKf,SAAS,GACrD8B,YAAY,CAACf,8BAA8B,GAC3C,KAAK;;IAGX,IAAMN,MAAM,GAAkC;MAC5CpC,IAAI,EAAJA,IAAI;MACJ0C,8BAA8B,EAA9BA;KACD;IAED,IAAKhB,OAA2B,CAACgC,MAAM,KAAK/B,SAAS,EAAE;;MAErDgC,2BAAMjC,OAA0B,EAAEU,MAAM,EAAEzF,SAAS;IACpD,OAAM;MACL,IAAMiH,OAAO,GAAoBlC,OAA0B;MAC3DiC,2BAAMC,OAAO,CAAClC,OAAO,EAAEU,MAAM,EAAEzF,SAAS;IACzC;;IAGDgH,OAAKE,aAAa;MAChBnB,8BAA8B,EAA9BA;IAA8B,CAC3B,cAAY,CAChB;IAEDiB,OAAKG,qBAAqB,GAAG,IAAI;IACjC,IAAI,OAAOC,oBAAoB,KAAK,WAAW,EAAE;MAC/CJ,OAAKG,qBAAqB,GAAG,IAAIC,oBAAoB,CAAC,YAAK;QACzDJ,OAAKK,gBAAgB,EAAE;MACzB,CAAC,CAAC;IACH;IAEDL,OAAKM,SAAS,GAAG,CAAC;IAClBN,OAAKO,WAAW,CAACP,OAAKE,aAAa,CAACM,cAAc,CAAC;;;IAInDR,OAAKE,aAAa,CAACM,cAAc,GAAGxC,SAAS;IAC7C8B,YAAY,CAACU,cAAc,GAAGxC,SAAS;IAEvCyC,eAAe,CAAC3E,MAAW,EAAEpC,SAAO,EAAE,WAAW,CAAC;IAAC;;EACpDyF;IAAAC;IAAAK,OAED,kBAAM;MACJ,OAAOzB,SAAS;;EACjB;IAAAoB;IAAAC,KAED,eAAY;MACV,OAAO,IAAI,CAACiB,SAAS;;;;;;WAKvB,qBAAYxC,GAAuB;MACjC,IAAI,IAAI,CAAC4B,SAAS,EAAE;QAClB;MACD;MACD,IAAI,CAACY,SAAS,EAAE;MAChB,IAAIxC,GAAG,KAAKE,SAAS,IAAI,IAAI,CAACmC,qBAAqB,KAAK,IAAI,EAAE;QAC5D,IAAI,CAACA,qBAAqB,CAACO,QAAQ,CAAC5C,GAAG,EAAE,IAAI,CAAC;MAC/C;;;;;WAIH,uBAAW;MACT,IAAI,IAAI,CAAC4B,SAAS,EAAE;QAClB,OAAO,CAAC;MACT;MACD,OAAO,EAAE,IAAI,CAACY,SAAS;;;;;;;WAMjB,4BAAgB;MACtB,KAAKK,SAAS,CAAC,IAAI,CAAC;;EACrB;IAAAvB;IAAAC,KAED,eAAY;MACV,IAAI,CAACC,cAAc,EAAE;MACrB,OAAO,IAAI,CAACY,aAAa;;IAG3B;;;AAGG;EAHH;IAAAd;IAAAK,OAIU,0BAAc;MACtB,IAAI,IAAI,CAACC,SAAS,EAAE;QAClB,MAAMpB,aAAa,CAACqB,MAAM,wDAA6B;MACxD;;EACF;EAAA;AAAA,EAzGOnB,eAAe;AC9BzB;;;;;;;;;;;;;;;AAeG;AA4CH;;;;AAIG;AACI,IAAMoC,WAAW,GAAGlH;SAoEXmH,aAAaA,CAC3BnC,QAA0B,EACZ;EAAA,IAAdoC,SAAS,uEAAG,EAAE;EAEd,IAAI/C,OAAO,GAAGW,QAAQ;EAEtB,IAAI,OAAOoC,SAAS,KAAK,QAAQ,EAAE;IACjC,IAAMzE,KAAI,GAAGyE,SAAS;IACtBA,SAAS,GAAG;MAAEzE,IAAI,EAAJA;IAAI,CAAE;EACrB;EAED,IAAMoC,MAAM;IACVpC,IAAI,EAAElC,kBAAkB;IACxB4E,8BAA8B,EAAE;EAAK,GAClC+B,SAAS,CACb;EACD,IAAMzE,IAAI,GAAGoC,MAAM,CAACpC,IAAI;EAExB,IAAI,OAAOA,IAAI,KAAK,QAAQ,IAAI,CAACA,IAAI,EAAE;IACrC,MAAMiC,aAAa,CAACqB,MAAM,CAAwB;MAChDtF,OAAO,EAAE0G,MAAM,CAAC1E,IAAI;IACrB,EAAC;EACH;EAED0B,OAAO,KAAPA,OAAO,GAAKiD,mBAAmB,EAAE,CAAC;EAElC,IAAI,CAACjD,OAAO,EAAE;IACZ,MAAMO,aAAa,CAACqB,MAAM,wCAAqB;EAChD;;EAED,IAAMsB,WAAW,GAAGpE,KAAK,CAACwC,GAAG,CAAChD,IAAI,CAAoB;EACtD,IAAI4E,WAAW,EAAE;;IAEf,IACEC,SAAS,CAACnD,OAAO,EAAEkD,WAAW,CAAClD,OAAO,CAAC,IACvCmD,SAAS,CAACzC,MAAM,EAAEwC,WAAW,CAACxC,MAAM,CAAC,EACrC;MACA,OAAOwC,WAAW;IACnB,OAAM;MACL,MAAM3C,aAAa,CAACqB,MAAM,CAAyB;QAAEtF,OAAO,EAAEgC;MAAI,CAAE,CAAC;IACtE;EACF;EAED,IAAMrD,SAAS,GAAG,IAAImI,kBAAkB,CAAC9E,IAAI,CAAC;EAAC,4CACvBK,WAAW,CAACI,MAAM,EAAE;IAAAsE;EAAA;IAA5C,uDAA8C;MAAA,IAAnCtH,SAAS;MAClBd,SAAS,CAACkD,YAAY,CAACpC,SAAS,CAAC;IAClC;EAAA;IAAAuH;EAAA;IAAAA;EAAA;EAED,IAAMC,MAAM,GAAG,IAAI9C,eAAe,CAACT,OAAO,EAAEU,MAAM,EAAEzF,SAAS,CAAC;EAE9D6D,KAAK,CAACD,GAAG,CAACP,IAAI,EAAEiF,MAAM,CAAC;EAEvB,OAAOA,MAAM;AACf;AAgDgB,4BAAmBC,CACjC7C,QAAuC,EACvC8C,gBAA2C;EAE3C,IAAIC,SAAS,EAAE,IAAI,CAACC,WAAW,EAAE,EAAE;;IAEjC,MAAMpD,aAAa,CAACqB,MAAM,gFAAyC;EACpE;;EAED,IAAI6B,gBAAgB,CAACzC,8BAA8B,KAAKf,SAAS,EAAE;IACjEwD,gBAAgB,CAACzC,8BAA8B,GAAG,KAAK;EACxD;EAED,IAAI4C,UAA2B;EAC/B,IAAI9D,cAAc,CAACa,QAAQ,CAAC,EAAE;IAC5BiD,UAAU,GAAGjD,QAAQ,CAACX,OAAO;EAC9B,OAAM;IACL4D,UAAU,GAAGjD,QAAQ;EACtB;;EAGD,IAAMkD,OAAO,GACRjD,gDAAgB,CAChB,YAAU,CACd;;;EAID,IAAIiD,OAAO,CAACpB,cAAc,KAAKxC,SAAS,EAAE;IACxC,OAAO4D,OAAO,CAACpB,cAAc;EAC9B;EAED,IAAMqB,QAAQ,GAAG,SAAXA,QAAQA,CAAIC,CAAS,EAAY;IACrC,OAAOC,mBAAID,CAAC,EAAEE,MAAM,CAClB,UAACC,IAAI,EAAEC,CAAC;MAAA,OAAMC,IAAI,CAACC,IAAI,CAAC,EAAE,EAAEH,IAAI,CAAC,GAAGC,CAAC,CAACG,UAAU,CAAC,CAAC,CAAC,GAAI,CAAC;IAAA,GACxD,CAAC,CACF;EACH,CAAC;EAED,IAAIb,gBAAgB,CAAChB,cAAc,KAAKxC,SAAS,EAAE;IACjD,IAAI,OAAOoC,oBAAoB,KAAK,WAAW,EAAE;MAC/C,MAAM9B,aAAa,CAACqB,MAAM,CAExB,4FAAE,CACH;IACF;EACF;EAED,IAAM2C,UAAU,GAAG,EAAE,GAAGT,QAAQ,CAACU,IAAI,CAACC,SAAS,CAACZ,OAAO,CAAC,CAAC;EACzD,IAAMX,WAAW,GAAGhE,WAAW,CAACoC,GAAG,CAACiD,UAAU,CAAsB;EACpE,IAAIrB,WAAW,EAAE;IACdA,WAAqC,CAACV,WAAW,CAChDiB,gBAAgB,CAAChB,cAAc,CAChC;IACD,OAAOS,WAAW;EACnB;EAED,IAAMjI,SAAS,GAAG,IAAImI,kBAAkB,CAACmB,UAAU,CAAC;EAAC,4CAC7B5F,WAAW,CAACI,MAAM,EAAE;IAAA2F;EAAA;IAA5C,uDAA8C;MAAA,IAAnC3I,SAAS;MAClBd,SAAS,CAACkD,YAAY,CAACpC,SAAS,CAAC;IAClC;EAAA;IAAA4I;EAAA;IAAAA;EAAA;EAED,IAAMpB,MAAM,GAAG,IAAI1B,qBAAqB,CACtC+B,UAAU,EACVH,gBAAgB,EAChBc,UAAU,EACVtJ,SAAS,CACV;EAEDiE,WAAW,CAACL,GAAG,CAAC0F,UAAU,EAAEhB,MAAM,CAAC;EAEnC,OAAOA,MAAM;AACf;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BG;AACa,eAAMqB,GAAkC;EAAA,IAAjCtG,2EAAelC,kBAAkB;EACtD,IAAM8B,GAAG,GAAGY,KAAK,CAACwC,GAAG,CAAChD,IAAI,CAAC;EAC3B,IAAI,CAACJ,GAAG,IAAII,IAAI,KAAKlC,kBAAkB,IAAI6G,mBAAmB,EAAE,EAAE;IAChE,OAAOH,aAAa,EAAE;EACvB;EACD,IAAI,CAAC5E,GAAG,EAAE;IACR,MAAMqC,aAAa,CAACqB,MAAM,CAAkB;MAAEtF,OAAO,EAAEgC;IAAI,CAAE,CAAC;EAC/D;EAED,OAAOJ,GAAG;AACZ;AAEA;;;AAGG;SACa2G,OAAOA;EACrB,OAAOC,KAAK,CAACC,IAAI,CAACjG,KAAK,CAACC,MAAM,EAAE,CAAC;AACnC;AAEA;;;;;;;;;;;;;;;;AAgBG;AAhBH,SAiBsB6D,SAASA;EAAA;AAAA;AAwB/B;;;;;;;AAOG;AAPH;EAAAoC,sEAxBO,kBAAyB9G,GAAgB;IAAA;IAAA;MAAA;QAAA;UAAA;YAC1C+G,gBAAgB,GAAG,KAAK;YACtB3G,IAAI,GAAGJ,GAAG,CAACI,IAAI;YACrB,IAAIQ,KAAK,CAACF,GAAG,CAACN,IAAI,CAAC,EAAE;cACnB2G,gBAAgB,GAAG,IAAI;cACvBnG,KAAK,CAACoG,MAAM,CAAC5G,IAAI,CAAC;YACnB,OAAM,IAAIY,WAAW,CAACN,GAAG,CAACN,IAAI,CAAC,EAAE;cAC1B6G,iBAAiB,GAAGjH,GAA4B;cACtD,IAAIiH,iBAAiB,CAACC,WAAW,EAAE,IAAI,CAAC,EAAE;gBACxClG,WAAW,CAACgG,MAAM,CAAC5G,IAAI,CAAC;gBACxB2G,gBAAgB,GAAG,IAAI;cACxB;YACF;YAAA,KAEGA,gBAAgB;cAAAI;cAAA;YAAA;YAAAA;YAAA,OACZC,OAAO,CAACC,GAAG,CACdrH,GAAuB,CAACjD,SAAS,CAC/BG,YAAY,EAAE,CACdC,GAAG,CAAC,kBAAQ;cAAA,OAAIE,QAAQ,CAAC2J,MAAM,EAAE;YAAA,EAAC,CACtC;UAAA;YACAhH,GAAuB,CAACyD,SAAS,GAAG,IAAI;UAAC;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAE7C;EAAA;AAAA;SAUee,eAAeA,CAC7B8C,gBAAwB,EACxB7J,OAAe,EACf8J,OAAgB;;;;EAIhB,IAAI/J,OAAO,GAAG,yBAAmB,CAAC8J,gBAAgB,CAAC,MAAI,6CAAgB;EACvE,IAAIC,OAAO,EAAE;IACX/J,OAAO,eAAQ+J,OAAO,CAAE;EACzB;EACD,IAAMC,eAAe,GAAGhK,OAAO,CAACiK,KAAK,CAAC,OAAO,CAAC;EAC9C,IAAMC,eAAe,GAAGjK,OAAO,CAACgK,KAAK,CAAC,OAAO,CAAC;EAC9C,IAAID,eAAe,IAAIE,eAAe,EAAE;IACtC,IAAMC,OAAO,GAAG,wCACiBnK,OAAO,+BAAmBC,OAAO,SACjE;IACD,IAAI+J,eAAe,EAAE;MACnBG,OAAO,CAACC,IAAI,0BACOpK,OAAO,yDAAmD,CAC5E;IACF;IACD,IAAIgK,eAAe,IAAIE,eAAe,EAAE;MACtCC,OAAO,CAACC,IAAI,CAAC,KAAK,CAAC;IACpB;IACD,IAAIF,eAAe,EAAE;MACnBC,OAAO,CAACC,IAAI,0BACOnK,OAAO,yDAAmD,CAC5E;IACF;IACDO,MAAM,CAAC6J,IAAI,CAACF,OAAO,CAAC/J,IAAI,CAAC,GAAG,CAAC,CAAC;IAC9B;EACD;EACD2C,kBAAkB,CAChB,IAAIyC,SAAS,WACRxF,OAAO,eACV;IAAA,OAAO;MAAEA,OAAO,EAAPA,OAAO;MAAEC,OAAO,EAAPA;IAAO,CAAE;EAAA,CAAC,wCAE7B,CACF;AACH;AAEA;;;;;;AAMG;AACa,cAAKqK,CACnBC,WAA+B,EAC/BjG,OAAoB;EAEpB,IAAIiG,WAAW,KAAK,IAAI,IAAI,OAAOA,WAAW,KAAK,UAAU,EAAE;IAC7D,MAAM1F,aAAa,CAACqB,MAAM,4DAA+B;EAC1D;;EACDsE,iBAAiB,CAACD,WAAW,EAAEjG,OAAO,CAAC;AACzC;AAEA;;;;;;;;AAQG;AACG,SAAUmG,WAAWA,CAACC,QAAwB;EAClDC,aAAe,CAACD,QAAQ,CAAC;AAC3B;;AC3dA;;;;;;;;;;;;;;;AAeG;AASH,IAAME,OAAO,GAAG,6BAA6B;AAC7C,IAAMC,UAAU,GAAG,CAAC;AACpB,IAAMC,UAAU,GAAG,0BAA0B;AAS7C,IAAIC,SAAS,GAAwC,IAAI;AACzD,SAASC,YAAYA;EACnB,IAAI,CAACD,SAAS,EAAE;IACdA,SAAS,GAAGE,MAAM,CAAQL,OAAO,EAAEC,UAAU,EAAE;MAC7CK,OAAO,EAAE,iBAACC,EAAE,EAAEC,UAAU,EAAI;;;;;;QAM1B,QAAQA,UAAU;UAChB,KAAK,CAAC;YACJ,IAAI;cACFD,EAAE,CAACE,iBAAiB,CAACP,UAAU,CAAC;YACjC,EAAC,OAAOpI,CAAC,EAAE;;;;cAIV4I,OAAO,CAACjB,IAAI,CAAC3H,CAAC,CAAC;YAChB;QACJ;;IAEJ,EAAC,CAAC6I,KAAK,CAAC,WAAC,EAAG;MACX,MAAM1G,aAAa,CAACqB,MAAM,CAAoB;QAC5CsF,oBAAoB,EAAE9I,CAAC,CAAC+I;MACzB,EAAC;IACJ,CAAC,CAAC;EACH;EACD,OAAOV,SAAS;AAClB;AAAC,SAEqBW,2BAA2BA;EAAA;AAAA;AAAA;EAAAC,wFAA1C,kBACLnJ,GAAgB;IAAA;IAAA;MAAA;QAAA;UAAA;YAAAoJ;YAAAA;YAAA,OAGGZ,YAAY,EAAE;UAAA;YAAzBG,EAAE;YACFU,EAAE,GAAGV,EAAE,CAACW,WAAW,CAAChB,UAAU,CAAC;YAAAc;YAAA,OAChBC,EAAE,CAACE,WAAW,CAACjB,UAAU,CAAC,CAAClF,GAAG,CAACoG,UAAU,CAACxJ,GAAG,CAAC,CAAC;UAAA;YAA9DyJ,MAAM;YAAAL;YAAA,OAGNC,EAAE,CAACK,IAAI;UAAA;YAAA,kCACND,MAAM;UAAA;YAAAL;YAAAA;YAEb,IAAIA,wBAAaO,aAAa,EAAE;cAC9B3L,MAAM,CAAC6J,IAAI,CAACuB,aAAEH,OAAO,CAAC;YACvB,OAAM;cACCW,WAAW,GAAGvH,aAAa,CAACqB,MAAM,CAAmB;gBACzDsF,oBAAoB,EAAGI,iBAAW,QAAXA,gDAAaH;cACrC,EAAC;cACFjL,MAAM,CAAC6J,IAAI,CAAC+B,WAAW,CAACX,OAAO,CAAC;YACjC;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAEJ;EAAA;AAAA;AAAA,SAEqBY,0BAA0BA;EAAA;AAAA;AAAA;EAAAC,uFAAzC,kBACL9J,GAAgB,EAChB+J,eAAsC;IAAA;IAAA;MAAA;QAAA;UAAA;YAAAC;YAAAA;YAAA,OAGnBxB,YAAY,EAAE;UAAA;YAAzBG,EAAE;YACFU,EAAE,GAAGV,EAAE,CAACW,WAAW,CAAChB,UAAU,EAAE,WAAW,CAAC;YAC5CiB,WAAW,GAAGF,EAAE,CAACE,WAAW,CAACjB,UAAU,CAAC;YAAA0B;YAAA,OACxCT,WAAW,CAACU,GAAG,CAACF,eAAe,EAAEP,UAAU,CAACxJ,GAAG,CAAC,CAAC;UAAA;YAAAgK;YAAA,OACjDX,EAAE,CAACK,IAAI;UAAA;YAAAM;YAAA;UAAA;YAAAA;YAAAA;YAEb,IAAIA,wBAAaL,aAAa,EAAE;cAC9B3L,MAAM,CAAC6J,IAAI,CAACmC,aAAEf,OAAO,CAAC;YACvB,OAAM;cACCW,WAAW,GAAGvH,aAAa,CAACqB,MAAM,CAAqB;gBAC3DsF,oBAAoB,EAAGgB,iBAAW,QAAXA,gDAAaf;cACrC,EAAC;cACFjL,MAAM,CAAC6J,IAAI,CAAC+B,WAAW,CAACX,OAAO,CAAC;YACjC;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAEJ;EAAA;AAAA;AAED,SAASO,UAAUA,CAACxJ,GAAgB;EAClC,iBAAUA,GAAG,CAACI,IAAI,cAAIJ,GAAG,CAAC8B,OAAO,CAACoI,KAAK;AACzC;;ACjHA;;;;;;;;;;;;;;;AAeG;AAqBH,IAAMC,gBAAgB,GAAG,IAAI;AAC7B;AACA,IAAMC,qCAAqC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;AAAC,IAE1DC,oBAAoB;EAyB/B,8BAA6BtN,SAA6B;IAAA;IAAAC;IAA7B,IAAS,aAATD,SAAS;IAlBtC;;;;;;;;AAQG;IACH,IAAgB,oBAAiC,IAAI;IAUnD,IAAMiD,GAAG,GAAG,IAAI,CAACjD,SAAS,CAACuE,WAAW,CAAC,KAAK,CAAC,CAAC/D,YAAY,EAAE;IAC5D,IAAI,CAAC+M,QAAQ,GAAG,IAAIC,oBAAoB,CAACvK,GAAG,CAAC;IAC7C,IAAI,CAACwK,uBAAuB,GAAG,IAAI,CAACF,QAAQ,CAACG,IAAI,EAAE,CAACC,IAAI,CAAC,gBAAM,EAAG;MAChEC,MAAI,CAACC,gBAAgB,GAAGnB,MAAM;MAC9B,OAAOA,MAAM;IACf,CAAC,CAAC;;EAGJ;;;;;;AAMG;EANHvG;IAAAC;IAAAK;MAAA,iFAOA;QAAA;QAAA;UAAA;YAAA;cAAA;gBACQqH,cAAc,GAAG,IAAI,CAAC9N,SAAS,CAClCuE,WAAW,CAAC,iBAAiB,CAAC,CAC9B/D,YAAY,EAAE;;gBAIXuN,KAAK,GAAGD,cAAc,CAACE,qBAAqB,EAAE;gBAC9CC,IAAI,GAAGC,gBAAgB,EAAE;gBAAA,MAC3B,WAAI,CAACL,gBAAgB,MAAE,8CAAU,KAAI,IAAI;kBAAAM;kBAAA;gBAAA;gBAAAA;gBAAA,OACb,IAAI,CAACV,uBAAuB;cAAA;gBAA1D,IAAI,CAACI,gBAAgB;gBAAA,MAEjB,WAAI,CAACA,gBAAgB,MAAE,8CAAU,KAAI,IAAI;kBAAAM;kBAAA;gBAAA;gBAAA;cAAA;gBAAA,MAO7C,IAAI,CAACN,gBAAgB,CAACO,qBAAqB,KAAKH,IAAI,IACpD,IAAI,CAACJ,gBAAgB,CAACQ,UAAU,CAACC,IAAI,CACnC,6BAAmB;kBAAA,OAAIC,mBAAmB,CAACN,IAAI,KAAKA,IAAI;gBAAA,EACzD;kBAAAE;kBAAA;gBAAA;gBAAA;cAAA;;gBAKD,IAAI,CAACN,gBAAgB,CAACQ,UAAU,CAACxD,IAAI,CAAC;kBAAEoD,IAAI,EAAJA,IAAI;kBAAEF,KAAK,EAALA;gBAAK,CAAE,CAAC;cAAC;;gBAGzD,IAAI,CAACF,gBAAgB,CAACQ,UAAU,GAAG,IAAI,CAACR,gBAAgB,CAACQ,UAAU,CAAC1N,MAAM,CACxE,6BAAmB,EAAG;kBACpB,IAAM6N,WAAW,GAAG,IAAIC,IAAI,CAACF,mBAAmB,CAACN,IAAI,CAAC,CAACS,OAAO,EAAE;kBAChE,IAAMC,GAAG,GAAGF,IAAI,CAACE,GAAG,EAAE;kBACtB,OAAOA,GAAG,GAAGH,WAAW,IAAInB,qCAAqC;gBACnE,CAAC,CACF;gBAAC,iCACK,IAAI,CAACE,QAAQ,CAACqB,SAAS,CAAC,IAAI,CAACf,gBAAgB,CAAC;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACtD;MAAA;QAAA;MAAA;MAAA;IAAA;IAED;;;;;;AAMG;EANH;IAAAzH;IAAAK;MAAA,oFAOA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA,MACM,IAAI,CAACoH,gBAAgB,KAAK,IAAI;kBAAAgB;kBAAA;gBAAA;gBAAAA;gBAAA,OAC1B,IAAI,CAACpB,uBAAuB;cAAA;gBAAA,MAIlC,WAAI,CAACI,gBAAgB,MAAE,8CAAU,KAAI,IAAI,IACzC,IAAI,CAACA,gBAAgB,CAACQ,UAAU,CAACS,MAAM,KAAK,CAAC;kBAAAD;kBAAA;gBAAA;gBAAA,kCAEtC,EAAE;cAAA;gBAELZ,IAAI,GAAGC,gBAAgB,EAAE;wCAEaa,0BAA0B,CACpE,IAAI,CAAClB,gBAAgB,CAACQ,UAAU,CACjC,EAFOW,gBAAgB,yBAAhBA,gBAAgB,EAAEC,aAAa,yBAAbA,aAAa;gBAGjCC,YAAY,GAAGC,6BAA6B,CAChD5F,IAAI,CAACC,SAAS,CAAC;kBAAE9I,OAAO,EAAE,CAAC;kBAAE2N,UAAU,EAAEW;gBAAgB,CAAE,CAAC,CAC7D;gBAED,IAAI,CAACnB,gBAAgB,CAACO,qBAAqB,GAAGH,IAAI;gBAAC,MAC/CgB,aAAa,CAACH,MAAM,GAAG,CAAC;kBAAAD;kBAAA;gBAAA;;gBAE1B,IAAI,CAAChB,gBAAgB,CAACQ,UAAU,GAAGY,aAAa;;;;;uBAI1C,IAAI,CAAC1B,QAAQ,CAACqB,SAAS,CAAC,IAAI,CAACf,gBAAgB,CAAC;cAAA;gBAAAgB;gBAAA;cAAA;gBAEpD,IAAI,CAAChB,gBAAgB,CAACQ,UAAU,GAAG,EAAE;;gBAErC,KAAK,IAAI,CAACd,QAAQ,CAACqB,SAAS,CAAC,IAAI,CAACf,gBAAgB,CAAC;cAAC;gBAAA,kCAE/CqB,YAAY;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACpB;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;EAAA;AAAA;AAGH,SAAShB,gBAAgBA;EACvB,IAAMkB,KAAK,GAAG,IAAIX,IAAI,EAAE;;EAExB,OAAOW,KAAK,CAACC,WAAW,EAAE,CAACC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;AAC7C;SAEgBP,0BAA0BA,CACxCQ,eAAsC,EACZ;EAAA,IAA1BC,OAAO,uEAAGpC,gBAAgB;;;EAO1B,IAAM4B,gBAAgB,GAA4B,EAAE;;EAEpD,IAAIC,aAAa,GAAGM,eAAe,CAACE,KAAK,EAAE;EAAC,4CACVF,eAAe;IAAAG;EAAA;IAAA;MAAA,IAAtCnB,mBAAmB;;MAE5B,IAAMoB,cAAc,GAAGX,gBAAgB,CAACY,IAAI,CAC1C,YAAE;QAAA,OAAIC,EAAE,CAAC9B,KAAK,KAAKQ,mBAAmB,CAACR,KAAK;MAAA,EAC7C;MACD,IAAI,CAAC4B,cAAc,EAAE;;QAEnBX,gBAAgB,CAACnE,IAAI,CAAC;UACpBkD,KAAK,EAAEQ,mBAAmB,CAACR,KAAK;UAChC+B,KAAK,EAAE,CAACvB,mBAAmB,CAACN,IAAI;QACjC,EAAC;QACF,IAAI8B,UAAU,CAACf,gBAAgB,CAAC,GAAGQ,OAAO,EAAE;;;UAG1CR,gBAAgB,CAACgB,GAAG,EAAE;UACtB;QACD;MACF,OAAM;QACLL,cAAc,CAACG,KAAK,CAACjF,IAAI,CAAC0D,mBAAmB,CAACN,IAAI,CAAC;;;QAGnD,IAAI8B,UAAU,CAACf,gBAAgB,CAAC,GAAGQ,OAAO,EAAE;UAC1CG,cAAc,CAACG,KAAK,CAACE,GAAG,EAAE;UAC1B;QACD;MACF;;;MAGDf,aAAa,GAAGA,aAAa,CAACQ,KAAK,CAAC,CAAC,CAAC;IAAC;IA5BzC,uDAAmD;MAAA;MAAA,sBAuB7C;IAML;EAAA;IAAAQ;EAAA;IAAAA;EAAA;EACD,OAAO;IACLjB,gBAAgB,EAAhBA,gBAAgB;IAChBC,aAAa,EAAbA;GACD;AACH;AAAC,IAEYzB,oBAAoB;EAE/B,8BAAmBvK,GAAgB;IAAAhD;IAAhB,IAAG,OAAHgD,GAAG;IACpB,IAAI,CAACiN,uBAAuB,GAAG,IAAI,CAACC,4BAA4B,EAAE;;EACnEhK;IAAAC;IAAAK;MAAA,6FACD;QAAA;UAAA;YAAA;cAAA;gBAAA,IACO2J,oBAAoB,EAAE;kBAAAC;kBAAA;gBAAA;gBAAA,kCAClB,KAAK;cAAA;gBAAA,kCAELC,yBAAyB,EAAE,CAC/B3C,IAAI,CAAC;kBAAA,OAAM,IAAI;gBAAA,EAAC,CAChB3B,KAAK,CAAC;kBAAA,OAAM,KAAK;gBAAA,EAAC;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAExB;MAAA;QAAA;MAAA;MAAA;IAAA;IACD;;AAEG;EAFH;IAAA5F;IAAAK;MAAA,qEAGA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA8J;gBAAA,OACgC,IAAI,CAACL,uBAAuB;cAAA;gBAApDM,eAAe;gBAAA,IAChBA,eAAe;kBAAAD;kBAAA;gBAAA;gBAAA,kCACX;kBAAElC,UAAU,EAAE;gBAAE,CAAE;cAAA;gBAAAkC;gBAAA,OAEQpE,2BAA2B,CAAC,IAAI,CAAClJ,GAAG,CAAC;cAAA;gBAAhEwN,kBAAkB;gBAAA,MACpBA,kBAAkB,KAAlB,0BAAkB,uBAAlBA,kBAAkB,CAAEpC,UAAU;kBAAAkC;kBAAA;gBAAA;gBAAA,kCACzBE,kBAAkB;cAAA;gBAAA,kCAElB;kBAAEpC,UAAU,EAAE;gBAAE,CAAE;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAG9B;MAAA;QAAA;MAAA;MAAA;IAAA;;;;gFAED,kBAAgBqC,gBAAuC;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAAC;gBAAA,OACvB,IAAI,CAACT,uBAAuB;cAAA;gBAApDM,eAAe;gBAAA,IAChBA,eAAe;kBAAAG;kBAAA;gBAAA;gBAAA;cAAA;gBAAAA;gBAAA,OAGqB,IAAI,CAACjD,IAAI,EAAE;cAAA;gBAA5CkD,wBAAwB;gBAAA,kCACvB9D,0BAA0B,CAAC,IAAI,CAAC7J,GAAG,EAAE;kBAC1CmL,qBAAqB,EACnB,sBAAgB,CAACA,qBAAqB,MACtC,qDAAwB,CAACA,qBAAqB;kBAChDC,UAAU,EAAEqC,gBAAgB,CAACrC;gBAC9B,EAAC;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAEL;MAAA;QAAA;MAAA;MAAA;IAAA;;;;0EAED,kBAAUqC,gBAAuC;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAAG;gBAAA,OACjB,IAAI,CAACX,uBAAuB;cAAA;gBAApDM,eAAe;gBAAA,IAChBA,eAAe;kBAAAK;kBAAA;gBAAA;gBAAA;cAAA;gBAAAA;gBAAA,OAGqB,IAAI,CAACnD,IAAI,EAAE;cAAA;gBAA5CkD,wBAAwB;gBAAA,kCACvB9D,0BAA0B,CAAC,IAAI,CAAC7J,GAAG,EAAE;kBAC1CmL,qBAAqB,EACnB,sBAAgB,CAACA,qBAAqB,MACtC,qDAAwB,CAACA,qBAAqB;kBAChDC,UAAU,+BACLuC,wBAAwB,CAACvC,UAAU,sBACnCqC,gBAAgB,CAACrC,UAAU;gBAEjC,EAAC;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAEL;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;EAAA;AAAA;AAGH;;;;AAIG;AACG,SAAU0B,UAAUA,CAACR,eAAwC;;EAEjE,OAAOJ,6BAA6B;;EAElC5F,IAAI,CAACC,SAAS,CAAC;IAAE9I,OAAO,EAAE,CAAC;IAAE2N,UAAU,EAAEkB;EAAe,CAAE,CAAC,CAC5D,CAACT,MAAM;AACV;;ACvSA;;;;;;;;;;;;;;;AAeG;AASG,SAAUgC,sBAAsBA,CAACtG,OAAgB;EACrDhH,kBAAkB,CAChB,IAAIyC,SAAS,CACX,iBAAiB,EACjB,mBAAS;IAAA,OAAI,IAAIlG,yBAAyB,CAACC,SAAS,CAAC;EAAA,yCAEtD,CACF;EACDwD,kBAAkB,CAChB,IAAIyC,SAAS,CACX,WAAW,EACX,mBAAS;IAAA,OAAI,IAAIqH,oBAAoB,CAACtN,SAAS,CAAC;EAAA,yCAEjD,CACF;;EAGDyH,eAAe,CAACpE,MAAI,EAAE3C,SAAO,EAAE8J,OAAO,CAAC;;EAEvC/C,eAAe,CAACpE,MAAI,EAAE3C,SAAO,EAAE,SAAkB,CAAC;;EAElD+G,eAAe,CAAC,SAAS,EAAE,EAAE,CAAC;AAChC;;AC9CA;;;;;AAKG;AAyBHqJ,sBAAsB,CAAC,EAAiB,CAAC","names":["PlatformLoggerServiceImpl","container","_classCallCheck","providers","getProviders","map","isVersionServiceProvider","provider","service","getImmediate","library","version","filter","logString","join","component","getComponent","type","logger","Logger","DEFAULT_ENTRY_NAME","PLATFORM_LOG_STRING","appName","appCompatName","analyticsName","analyticsCompatName","appCheckName","appCheckCompatName","authName","authCompatName","databaseName","databaseCompatName","functionsName","functionsCompatName","installationsName","installationsCompatName","messagingName","messagingCompatName","performanceName","performanceCompatName","remoteConfigName","remoteConfigCompatName","storageName","storageCompatName","firestoreName","firestoreCompatName","vertexName","packageName","Map","_addComponent","app","addComponent","e","debug","name","_addOrOverwriteComponent","addOrOverwriteComponent","_registerComponent","componentName","_components","has","set","_apps","values","_step","_iterator","_serverApps","_step2","serverApp","_iterator2","_getProvider","heartbeatController","getProvider","optional","triggerHeartbeat","_removeServiceInstance","instanceIdentifier","clearInstance","_isFirebaseApp","obj","options","undefined","_isFirebaseServerApp","settings","_clearComponents","clear","ERRORS","ERROR_FACTORY","ErrorFactory","FirebaseAppImpl","config","_options","Object","_config","_name","_automaticDataCollectionEnabled","automaticDataCollectionEnabled","_container","Component","_this","_createClass","key","get","checkDestroyed","val","_isDeleted","value","isDeleted","create","FirebaseServerAppImpl","_inherits","serverConfig","apiKey","_this2","appImpl","_serverConfig","_finalizationRegistry","FinalizationRegistry","automaticCleanup","_refCount","incRefCount","releaseOnDeref","registerVersion","register","deleteApp","SDK_VERSION","initializeApp","rawConfig","String","getDefaultAppConfig","existingApp","deepEqual","ComponentContainer","_step3","_iterator3","newApp","initializeServerApp","_serverAppConfig","isBrowser","isWebWorker","appOptions","nameObj","hashCode","s","_toConsumableArray","reduce","hash","c","Math","imul","charCodeAt","nameString","JSON","stringify","_step4","_iterator4","getApp","getApps","Array","from","_deleteApp","cleanupProviders","delete","firebaseServerApp","decRefCount","_context7","Promise","all","libraryKeyOrName","variant","libraryMismatch","match","versionMismatch","warning","push","warn","onLog","logCallback","setUserLogHandler","setLogLevel","logLevel","setLogLevelImpl","DB_NAME","DB_VERSION","STORE_NAME","dbPromise","getDbPromise","openDB","upgrade","db","oldVersion","createObjectStore","console","catch","originalErrorMessage","message","readHeartbeatsFromIndexedDB","_readHeartbeatsFromIndexedDB","_context8","tx","transaction","objectStore","computeKey","result","done","FirebaseError","idbGetError","writeHeartbeatsToIndexedDB","_writeHeartbeatsToIndexedDB","heartbeatObject","_context9","put","appId","MAX_HEADER_BYTES","STORED_HEARTBEAT_RETENTION_MAX_MILLIS","HeartbeatServiceImpl","_storage","HeartbeatStorageImpl","_heartbeatsCachePromise","read","then","_this3","_heartbeatsCache","platformLogger","agent","getPlatformInfoString","date","getUTCDateString","_context","lastSentHeartbeatDate","heartbeats","some","singleDateHeartbeat","hbTimestamp","Date","valueOf","now","overwrite","_context2","length","extractHeartbeatsForHeader","heartbeatsToSend","unsentEntries","headerString","base64urlEncodeWithoutPadding","today","toISOString","substring","heartbeatsCache","maxSize","slice","_step5","heartbeatEntry","find","hb","dates","countBytes","pop","_iterator5","_canUseIndexedDBPromise","runIndexedDBEnvironmentCheck","isIndexedDBAvailable","_context3","validateIndexedDBOpenable","_context4","canUseIndexedDB","idbHeartbeatObject","heartbeatsObject","_context5","existingHeartbeatsObject","_context6","registerCoreComponents"],"sources":["/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@firebase/app/src/platformLoggerService.ts","/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@firebase/app/src/logger.ts","/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@firebase/app/src/constants.ts","/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@firebase/app/src/internal.ts","/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@firebase/app/src/errors.ts","/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@firebase/app/src/firebaseApp.ts","/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@firebase/app/src/firebaseServerApp.ts","/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@firebase/app/src/api.ts","/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@firebase/app/src/indexeddb.ts","/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@firebase/app/src/heartbeatService.ts","/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@firebase/app/src/registerCoreComponents.ts","/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@firebase/app/src/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ComponentContainer,\n  ComponentType,\n  Provider,\n  Name\n} from '@firebase/component';\nimport { PlatformLoggerService, VersionService } from './types';\n\nexport class PlatformLoggerServiceImpl implements PlatformLoggerService {\n  constructor(private readonly container: ComponentContainer) {}\n  // In initial implementation, this will be called by installations on\n  // auth token refresh, and installations will send this string.\n  getPlatformInfoString(): string {\n    const providers = this.container.getProviders();\n    // Loop through providers and get library/version pairs from any that are\n    // version components.\n    return providers\n      .map(provider => {\n        if (isVersionServiceProvider(provider)) {\n          const service = provider.getImmediate() as VersionService;\n          return `${service.library}/${service.version}`;\n        } else {\n          return null;\n        }\n      })\n      .filter(logString => logString)\n      .join(' ');\n  }\n}\n/**\n *\n * @param provider check if this provider provides a VersionService\n *\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\n * provides VersionService. The provider is not necessarily a 'app-version'\n * provider.\n */\nfunction isVersionServiceProvider(provider: Provider<Name>): boolean {\n  const component = provider.getComponent();\n  return component?.type === ComponentType.VERSION;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@firebase/logger';\n\nexport const logger = new Logger('@firebase/app');\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { name as appName } from '../package.json';\nimport { name as appCompatName } from '../../app-compat/package.json';\nimport { name as analyticsCompatName } from '../../../packages/analytics-compat/package.json';\nimport { name as analyticsName } from '../../../packages/analytics/package.json';\nimport { name as appCheckCompatName } from '../../../packages/app-check-compat/package.json';\nimport { name as appCheckName } from '../../../packages/app-check/package.json';\nimport { name as authName } from '../../../packages/auth/package.json';\nimport { name as authCompatName } from '../../../packages/auth-compat/package.json';\nimport { name as databaseName } from '../../../packages/database/package.json';\nimport { name as databaseCompatName } from '../../../packages/database-compat/package.json';\nimport { name as functionsName } from '../../../packages/functions/package.json';\nimport { name as functionsCompatName } from '../../../packages/functions-compat/package.json';\nimport { name as installationsName } from '../../../packages/installations/package.json';\nimport { name as installationsCompatName } from '../../../packages/installations-compat/package.json';\nimport { name as messagingName } from '../../../packages/messaging/package.json';\nimport { name as messagingCompatName } from '../../../packages/messaging-compat/package.json';\nimport { name as performanceName } from '../../../packages/performance/package.json';\nimport { name as performanceCompatName } from '../../../packages/performance-compat/package.json';\nimport { name as remoteConfigName } from '../../../packages/remote-config/package.json';\nimport { name as remoteConfigCompatName } from '../../../packages/remote-config-compat/package.json';\nimport { name as storageName } from '../../../packages/storage/package.json';\nimport { name as storageCompatName } from '../../../packages/storage-compat/package.json';\nimport { name as firestoreName } from '../../../packages/firestore/package.json';\nimport { name as vertexName } from '../../../packages/vertexai/package.json';\nimport { name as firestoreCompatName } from '../../../packages/firestore-compat/package.json';\nimport { name as packageName } from '../../../packages/firebase/package.json';\n\n/**\n * The default app name\n *\n * @internal\n */\nexport const DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\nexport const PLATFORM_LOG_STRING = {\n  [appName]: 'fire-core',\n  [appCompatName]: 'fire-core-compat',\n  [analyticsName]: 'fire-analytics',\n  [analyticsCompatName]: 'fire-analytics-compat',\n  [appCheckName]: 'fire-app-check',\n  [appCheckCompatName]: 'fire-app-check-compat',\n  [authName]: 'fire-auth',\n  [authCompatName]: 'fire-auth-compat',\n  [databaseName]: 'fire-rtdb',\n  [databaseCompatName]: 'fire-rtdb-compat',\n  [functionsName]: 'fire-fn',\n  [functionsCompatName]: 'fire-fn-compat',\n  [installationsName]: 'fire-iid',\n  [installationsCompatName]: 'fire-iid-compat',\n  [messagingName]: 'fire-fcm',\n  [messagingCompatName]: 'fire-fcm-compat',\n  [performanceName]: 'fire-perf',\n  [performanceCompatName]: 'fire-perf-compat',\n  [remoteConfigName]: 'fire-rc',\n  [remoteConfigCompatName]: 'fire-rc-compat',\n  [storageName]: 'fire-gcs',\n  [storageCompatName]: 'fire-gcs-compat',\n  [firestoreName]: 'fire-fst',\n  [firestoreCompatName]: 'fire-fst-compat',\n  [vertexName]: 'fire-vertex',\n  'fire-js': 'fire-js', // Platform identifier for JS SDK.\n  [packageName]: 'fire-js-all'\n} as const;\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  FirebaseServerApp\n} from './public-types';\nimport { Component, Provider, Name } from '@firebase/component';\nimport { logger } from './logger';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport { FirebaseAppImpl } from './firebaseApp';\nimport { FirebaseServerAppImpl } from './firebaseServerApp';\n\n/**\n * @internal\n */\nexport const _apps = new Map<string, FirebaseApp>();\n\n/**\n * @internal\n */\nexport const _serverApps = new Map<string, FirebaseServerApp>();\n\n/**\n * Registered components.\n *\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const _components = new Map<string, Component<any>>();\n\n/**\n * @param component - the component being added to this app's container\n *\n * @internal\n */\nexport function _addComponent<T extends Name>(\n  app: FirebaseApp,\n  component: Component<T>\n): void {\n  try {\n    (app as FirebaseAppImpl).container.addComponent(component);\n  } catch (e) {\n    logger.debug(\n      `Component ${component.name} failed to register with FirebaseApp ${app.name}`,\n      e\n    );\n  }\n}\n\n/**\n *\n * @internal\n */\nexport function _addOrOverwriteComponent(\n  app: FirebaseApp,\n  component: Component\n): void {\n  (app as FirebaseAppImpl).container.addOrOverwriteComponent(component);\n}\n\n/**\n *\n * @param component - the component to register\n * @returns whether or not the component is registered successfully\n *\n * @internal\n */\nexport function _registerComponent<T extends Name>(\n  component: Component<T>\n): boolean {\n  const componentName = component.name;\n  if (_components.has(componentName)) {\n    logger.debug(\n      `There were multiple attempts to register component ${componentName}.`\n    );\n\n    return false;\n  }\n\n  _components.set(componentName, component);\n\n  // add the component to existing app instances\n  for (const app of _apps.values()) {\n    _addComponent(app as FirebaseAppImpl, component);\n  }\n\n  for (const serverApp of _serverApps.values()) {\n    _addComponent(serverApp as FirebaseServerAppImpl, component);\n  }\n\n  return true;\n}\n\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n *\n * @returns the provider for the service with the matching name\n *\n * @internal\n */\nexport function _getProvider<T extends Name>(\n  app: FirebaseApp,\n  name: T\n): Provider<T> {\n  const heartbeatController = (app as FirebaseAppImpl).container\n    .getProvider('heartbeat')\n    .getImmediate({ optional: true });\n  if (heartbeatController) {\n    void heartbeatController.triggerHeartbeat();\n  }\n  return (app as FirebaseAppImpl).container.getProvider(name);\n}\n\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\n *\n * @internal\n */\nexport function _removeServiceInstance<T extends Name>(\n  app: FirebaseApp,\n  name: T,\n  instanceIdentifier: string = DEFAULT_ENTRY_NAME\n): void {\n  _getProvider(app, name).clearInstance(instanceIdentifier);\n}\n\n/**\n *\n * @param obj - an object of type FirebaseApp or FirebaseOptions.\n *\n * @returns true if the provide object is of type FirebaseApp.\n *\n * @internal\n */\nexport function _isFirebaseApp(\n  obj: FirebaseApp | FirebaseOptions\n): obj is FirebaseApp {\n  return (obj as FirebaseApp).options !== undefined;\n}\n\n/**\n *\n * @param obj - an object of type FirebaseApp.\n *\n * @returns true if the provided object is of type FirebaseServerAppImpl.\n *\n * @internal\n */\nexport function _isFirebaseServerApp(\n  obj: FirebaseApp | FirebaseServerApp\n): obj is FirebaseServerApp {\n  return (obj as FirebaseServerApp).settings !== undefined;\n}\n\n/**\n * Test only\n *\n * @internal\n */\nexport function _clearComponents(): void {\n  _components.clear();\n}\n\n/**\n * Exported in order to be used in app-compat package\n */\nexport { DEFAULT_ENTRY_NAME as _DEFAULT_ENTRY_NAME };\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AppError {\n  NO_APP = 'no-app',\n  BAD_APP_NAME = 'bad-app-name',\n  DUPLICATE_APP = 'duplicate-app',\n  APP_DELETED = 'app-deleted',\n  SERVER_APP_DELETED = 'server-app-deleted',\n  NO_OPTIONS = 'no-options',\n  INVALID_APP_ARGUMENT = 'invalid-app-argument',\n  INVALID_LOG_ARGUMENT = 'invalid-log-argument',\n  IDB_OPEN = 'idb-open',\n  IDB_GET = 'idb-get',\n  IDB_WRITE = 'idb-set',\n  IDB_DELETE = 'idb-delete',\n  FINALIZATION_REGISTRY_NOT_SUPPORTED = 'finalization-registry-not-supported',\n  INVALID_SERVER_APP_ENVIRONMENT = 'invalid-server-app-environment'\n}\n\nconst ERRORS: ErrorMap<AppError> = {\n  [AppError.NO_APP]:\n    \"No Firebase App '{$appName}' has been created - \" +\n    'call initializeApp() first',\n  [AppError.BAD_APP_NAME]: \"Illegal App name: '{$appName}'\",\n  [AppError.DUPLICATE_APP]:\n    \"Firebase App named '{$appName}' already exists with different options or config\",\n  [AppError.APP_DELETED]: \"Firebase App named '{$appName}' already deleted\",\n  [AppError.SERVER_APP_DELETED]: 'Firebase Server App has been deleted',\n  [AppError.NO_OPTIONS]:\n    'Need to provide options, when not being deployed to hosting via source.',\n  [AppError.INVALID_APP_ARGUMENT]:\n    'firebase.{$appName}() takes either no argument or a ' +\n    'Firebase App instance.',\n  [AppError.INVALID_LOG_ARGUMENT]:\n    'First argument to `onLog` must be null or a function.',\n  [AppError.IDB_OPEN]:\n    'Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_GET]:\n    'Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_WRITE]:\n    'Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_DELETE]:\n    'Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.FINALIZATION_REGISTRY_NOT_SUPPORTED]:\n    'FirebaseServerApp deleteOnDeref field defined but the JS runtime does not support FinalizationRegistry.',\n  [AppError.INVALID_SERVER_APP_ENVIRONMENT]:\n    'FirebaseServerApp is not for use in browser environments.'\n};\n\ninterface ErrorParams {\n  [AppError.NO_APP]: { appName: string };\n  [AppError.BAD_APP_NAME]: { appName: string };\n  [AppError.DUPLICATE_APP]: { appName: string };\n  [AppError.APP_DELETED]: { appName: string };\n  [AppError.INVALID_APP_ARGUMENT]: { appName: string };\n  [AppError.IDB_OPEN]: { originalErrorMessage?: string };\n  [AppError.IDB_GET]: { originalErrorMessage?: string };\n  [AppError.IDB_WRITE]: { originalErrorMessage?: string };\n  [AppError.IDB_DELETE]: { originalErrorMessage?: string };\n  [AppError.FINALIZATION_REGISTRY_NOT_SUPPORTED]: { appName?: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AppError, ErrorParams>(\n  'app',\n  'Firebase',\n  ERRORS\n);\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  FirebaseAppSettings\n} from './public-types';\nimport {\n  ComponentContainer,\n  Component,\n  ComponentType\n} from '@firebase/component';\nimport { ERROR_FACTORY, AppError } from './errors';\n\nexport class FirebaseAppImpl implements FirebaseApp {\n  protected readonly _options: FirebaseOptions;\n  protected readonly _name: string;\n  /**\n   * Original config values passed in as a constructor parameter.\n   * It is only used to compare with another config object to support idempotent initializeApp().\n   *\n   * Updating automaticDataCollectionEnabled on the App instance will not change its value in _config.\n   */\n  private readonly _config: Required<FirebaseAppSettings>;\n  private _automaticDataCollectionEnabled: boolean;\n  protected _isDeleted = false;\n  private readonly _container: ComponentContainer;\n\n  constructor(\n    options: FirebaseOptions,\n    config: Required<FirebaseAppSettings>,\n    container: ComponentContainer\n  ) {\n    this._options = { ...options };\n    this._config = { ...config };\n    this._name = config.name;\n    this._automaticDataCollectionEnabled =\n      config.automaticDataCollectionEnabled;\n    this._container = container;\n    this.container.addComponent(\n      new Component('app', () => this, ComponentType.PUBLIC)\n    );\n  }\n\n  get automaticDataCollectionEnabled(): boolean {\n    this.checkDestroyed();\n    return this._automaticDataCollectionEnabled;\n  }\n\n  set automaticDataCollectionEnabled(val: boolean) {\n    this.checkDestroyed();\n    this._automaticDataCollectionEnabled = val;\n  }\n\n  get name(): string {\n    this.checkDestroyed();\n    return this._name;\n  }\n\n  get options(): FirebaseOptions {\n    this.checkDestroyed();\n    return this._options;\n  }\n\n  get config(): Required<FirebaseAppSettings> {\n    this.checkDestroyed();\n    return this._config;\n  }\n\n  get container(): ComponentContainer {\n    return this._container;\n  }\n\n  get isDeleted(): boolean {\n    return this._isDeleted;\n  }\n\n  set isDeleted(val: boolean) {\n    this._isDeleted = val;\n  }\n\n  /**\n   * This function will throw an Error if the App has already been deleted -\n   * use before performing API actions on the App.\n   */\n  protected checkDestroyed(): void {\n    if (this.isDeleted) {\n      throw ERROR_FACTORY.create(AppError.APP_DELETED, { appName: this._name });\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseAppSettings,\n  FirebaseServerApp,\n  FirebaseServerAppSettings,\n  FirebaseOptions\n} from './public-types';\nimport { deleteApp, registerVersion } from './api';\nimport { ComponentContainer } from '@firebase/component';\nimport { FirebaseAppImpl } from './firebaseApp';\nimport { ERROR_FACTORY, AppError } from './errors';\nimport { name as packageName, version } from '../package.json';\n\nexport class FirebaseServerAppImpl\n  extends FirebaseAppImpl\n  implements FirebaseServerApp\n{\n  private readonly _serverConfig: FirebaseServerAppSettings;\n  private _finalizationRegistry: FinalizationRegistry<object> | null;\n  private _refCount: number;\n\n  constructor(\n    options: FirebaseOptions | FirebaseAppImpl,\n    serverConfig: FirebaseServerAppSettings,\n    name: string,\n    container: ComponentContainer\n  ) {\n    // Build configuration parameters for the FirebaseAppImpl base class.\n    const automaticDataCollectionEnabled =\n      serverConfig.automaticDataCollectionEnabled !== undefined\n        ? serverConfig.automaticDataCollectionEnabled\n        : false;\n\n    // Create the FirebaseAppSettings object for the FirebaseAppImp constructor.\n    const config: Required<FirebaseAppSettings> = {\n      name,\n      automaticDataCollectionEnabled\n    };\n\n    if ((options as FirebaseOptions).apiKey !== undefined) {\n      // Construct the parent FirebaseAppImp object.\n      super(options as FirebaseOptions, config, container);\n    } else {\n      const appImpl: FirebaseAppImpl = options as FirebaseAppImpl;\n      super(appImpl.options, config, container);\n    }\n\n    // Now construct the data for the FirebaseServerAppImpl.\n    this._serverConfig = {\n      automaticDataCollectionEnabled,\n      ...serverConfig\n    };\n\n    this._finalizationRegistry = null;\n    if (typeof FinalizationRegistry !== 'undefined') {\n      this._finalizationRegistry = new FinalizationRegistry(() => {\n        this.automaticCleanup();\n      });\n    }\n\n    this._refCount = 0;\n    this.incRefCount(this._serverConfig.releaseOnDeref);\n\n    // Do not retain a hard reference to the dref object, otherwise the FinalizationRegistry\n    // will never trigger.\n    this._serverConfig.releaseOnDeref = undefined;\n    serverConfig.releaseOnDeref = undefined;\n\n    registerVersion(packageName, version, 'serverapp');\n  }\n\n  toJSON(): undefined {\n    return undefined;\n  }\n\n  get refCount(): number {\n    return this._refCount;\n  }\n\n  // Increment the reference count of this server app. If an object is provided, register it\n  // with the finalization registry.\n  incRefCount(obj: object | undefined): void {\n    if (this.isDeleted) {\n      return;\n    }\n    this._refCount++;\n    if (obj !== undefined && this._finalizationRegistry !== null) {\n      this._finalizationRegistry.register(obj, this);\n    }\n  }\n\n  // Decrement the reference count.\n  decRefCount(): number {\n    if (this.isDeleted) {\n      return 0;\n    }\n    return --this._refCount;\n  }\n\n  // Invoked by the FinalizationRegistry callback to note that this app should go through its\n  // reference counts and delete itself if no reference count remain. The coordinating logic that\n  // handles this is in deleteApp(...).\n  private automaticCleanup(): void {\n    void deleteApp(this);\n  }\n\n  get settings(): FirebaseServerAppSettings {\n    this.checkDestroyed();\n    return this._serverConfig;\n  }\n\n  /**\n   * This function will throw an Error if the App has already been deleted -\n   * use before performing API actions on the App.\n   */\n  protected checkDestroyed(): void {\n    if (this.isDeleted) {\n      throw ERROR_FACTORY.create(AppError.SERVER_APP_DELETED);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseServerApp,\n  FirebaseOptions,\n  FirebaseAppSettings,\n  FirebaseServerAppSettings\n} from './public-types';\nimport { DEFAULT_ENTRY_NAME, PLATFORM_LOG_STRING } from './constants';\nimport { ERROR_FACTORY, AppError } from './errors';\nimport {\n  ComponentContainer,\n  Component,\n  Name,\n  ComponentType\n} from '@firebase/component';\nimport { version } from '../../firebase/package.json';\nimport { FirebaseAppImpl } from './firebaseApp';\nimport { FirebaseServerAppImpl } from './firebaseServerApp';\nimport {\n  _apps,\n  _components,\n  _isFirebaseApp,\n  _registerComponent,\n  _serverApps\n} from './internal';\nimport { logger } from './logger';\nimport {\n  LogLevelString,\n  setLogLevel as setLogLevelImpl,\n  LogCallback,\n  LogOptions,\n  setUserLogHandler\n} from '@firebase/logger';\nimport {\n  deepEqual,\n  getDefaultAppConfig,\n  isBrowser,\n  isWebWorker\n} from '@firebase/util';\n\nexport { FirebaseError } from '@firebase/util';\n\n/**\n * The current SDK version.\n *\n * @public\n */\nexport const SDK_VERSION = version;\n\n/**\n * Creates and initializes a {@link @firebase/app#FirebaseApp} instance.\n *\n * See\n * {@link\n *   https://firebase.google.com/docs/web/setup#add_firebase_to_your_app\n *   | Add Firebase to your app} and\n * {@link\n *   https://firebase.google.com/docs/web/setup#multiple-projects\n *   | Initialize multiple projects} for detailed documentation.\n *\n * @example\n * ```javascript\n *\n * // Initialize default app\n * // Retrieve your own options values by adding a web app on\n * // https://console.firebase.google.com\n * initializeApp({\n *   apiKey: \"AIza....\",                             // Auth / General Use\n *   authDomain: \"YOUR_APP.firebaseapp.com\",         // Auth with popup/redirect\n *   databaseURL: \"https://YOUR_APP.firebaseio.com\", // Realtime Database\n *   storageBucket: \"YOUR_APP.appspot.com\",          // Storage\n *   messagingSenderId: \"123456789\"                  // Cloud Messaging\n * });\n * ```\n *\n * @example\n * ```javascript\n *\n * // Initialize another app\n * const otherApp = initializeApp({\n *   databaseURL: \"https://<OTHER_DATABASE_NAME>.firebaseio.com\",\n *   storageBucket: \"<OTHER_STORAGE_BUCKET>.appspot.com\"\n * }, \"otherApp\");\n * ```\n *\n * @param options - Options to configure the app's services.\n * @param name - Optional name of the app to initialize. If no name\n *   is provided, the default is `\"[DEFAULT]\"`.\n *\n * @returns The initialized app.\n *\n * @public\n */\nexport function initializeApp(\n  options: FirebaseOptions,\n  name?: string\n): FirebaseApp;\n/**\n * Creates and initializes a FirebaseApp instance.\n *\n * @param options - Options to configure the app's services.\n * @param config - FirebaseApp Configuration\n *\n * @public\n */\nexport function initializeApp(\n  options: FirebaseOptions,\n  config?: FirebaseAppSettings\n): FirebaseApp;\n/**\n * Creates and initializes a FirebaseApp instance.\n *\n * @public\n */\nexport function initializeApp(): FirebaseApp;\nexport function initializeApp(\n  _options?: FirebaseOptions,\n  rawConfig = {}\n): FirebaseApp {\n  let options = _options;\n\n  if (typeof rawConfig !== 'object') {\n    const name = rawConfig;\n    rawConfig = { name };\n  }\n\n  const config: Required<FirebaseAppSettings> = {\n    name: DEFAULT_ENTRY_NAME,\n    automaticDataCollectionEnabled: false,\n    ...rawConfig\n  };\n  const name = config.name;\n\n  if (typeof name !== 'string' || !name) {\n    throw ERROR_FACTORY.create(AppError.BAD_APP_NAME, {\n      appName: String(name)\n    });\n  }\n\n  options ||= getDefaultAppConfig();\n\n  if (!options) {\n    throw ERROR_FACTORY.create(AppError.NO_OPTIONS);\n  }\n\n  const existingApp = _apps.get(name) as FirebaseAppImpl;\n  if (existingApp) {\n    // return the existing app if options and config deep equal the ones in the existing app.\n    if (\n      deepEqual(options, existingApp.options) &&\n      deepEqual(config, existingApp.config)\n    ) {\n      return existingApp;\n    } else {\n      throw ERROR_FACTORY.create(AppError.DUPLICATE_APP, { appName: name });\n    }\n  }\n\n  const container = new ComponentContainer(name);\n  for (const component of _components.values()) {\n    container.addComponent(component);\n  }\n\n  const newApp = new FirebaseAppImpl(options, config, container);\n\n  _apps.set(name, newApp);\n\n  return newApp;\n}\n\n/**\n * Creates and initializes a {@link @firebase/app#FirebaseServerApp} instance.\n *\n * The `FirebaseServerApp` is similar to `FirebaseApp`, but is intended for execution in\n * server side rendering environments only. Initialization will fail if invoked from a\n * browser environment.\n *\n * See\n * {@link\n *   https://firebase.google.com/docs/web/setup#add_firebase_to_your_app\n *   | Add Firebase to your app} and\n * {@link\n *   https://firebase.google.com/docs/web/setup#multiple-projects\n *   | Initialize multiple projects} for detailed documentation.\n *\n * @example\n * ```javascript\n *\n * // Initialize an instance of `FirebaseServerApp`.\n * // Retrieve your own options values by adding a web app on\n * // https://console.firebase.google.com\n * initializeServerApp({\n *     apiKey: \"AIza....\",                             // Auth / General Use\n *     authDomain: \"YOUR_APP.firebaseapp.com\",         // Auth with popup/redirect\n *     databaseURL: \"https://YOUR_APP.firebaseio.com\", // Realtime Database\n *     storageBucket: \"YOUR_APP.appspot.com\",          // Storage\n *     messagingSenderId: \"123456789\"                  // Cloud Messaging\n *   },\n *   {\n *    authIdToken: \"Your Auth ID Token\"\n *   });\n * ```\n *\n * @param options - `Firebase.AppOptions` to configure the app's services, or a\n *   a `FirebaseApp` instance which contains the `AppOptions` within.\n * @param config - `FirebaseServerApp` configuration.\n *\n * @returns The initialized `FirebaseServerApp`.\n *\n * @public\n */\nexport function initializeServerApp(\n  options: FirebaseOptions | FirebaseApp,\n  config: FirebaseServerAppSettings\n): FirebaseServerApp;\n\nexport function initializeServerApp(\n  _options: FirebaseOptions | FirebaseApp,\n  _serverAppConfig: FirebaseServerAppSettings\n): FirebaseServerApp {\n  if (isBrowser() && !isWebWorker()) {\n    // FirebaseServerApp isn't designed to be run in browsers.\n    throw ERROR_FACTORY.create(AppError.INVALID_SERVER_APP_ENVIRONMENT);\n  }\n\n  if (_serverAppConfig.automaticDataCollectionEnabled === undefined) {\n    _serverAppConfig.automaticDataCollectionEnabled = false;\n  }\n\n  let appOptions: FirebaseOptions;\n  if (_isFirebaseApp(_options)) {\n    appOptions = _options.options;\n  } else {\n    appOptions = _options;\n  }\n\n  // Build an app name based on a hash of the configuration options.\n  const nameObj = {\n    ..._serverAppConfig,\n    ...appOptions\n  };\n\n  // However, Do not mangle the name based on releaseOnDeref, since it will vary between the\n  // construction of FirebaseServerApp instances. For example, if the object is the request headers.\n  if (nameObj.releaseOnDeref !== undefined) {\n    delete nameObj.releaseOnDeref;\n  }\n\n  const hashCode = (s: string): number => {\n    return [...s].reduce(\n      (hash, c) => (Math.imul(31, hash) + c.charCodeAt(0)) | 0,\n      0\n    );\n  };\n\n  if (_serverAppConfig.releaseOnDeref !== undefined) {\n    if (typeof FinalizationRegistry === 'undefined') {\n      throw ERROR_FACTORY.create(\n        AppError.FINALIZATION_REGISTRY_NOT_SUPPORTED,\n        {}\n      );\n    }\n  }\n\n  const nameString = '' + hashCode(JSON.stringify(nameObj));\n  const existingApp = _serverApps.get(nameString) as FirebaseServerApp;\n  if (existingApp) {\n    (existingApp as FirebaseServerAppImpl).incRefCount(\n      _serverAppConfig.releaseOnDeref\n    );\n    return existingApp;\n  }\n\n  const container = new ComponentContainer(nameString);\n  for (const component of _components.values()) {\n    container.addComponent(component);\n  }\n\n  const newApp = new FirebaseServerAppImpl(\n    appOptions,\n    _serverAppConfig,\n    nameString,\n    container\n  );\n\n  _serverApps.set(nameString, newApp);\n\n  return newApp;\n}\n\n/**\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\n *\n * When called with no arguments, the default app is returned. When an app name\n * is provided, the app corresponding to that name is returned.\n *\n * An exception is thrown if the app being retrieved has not yet been\n * initialized.\n *\n * @example\n * ```javascript\n * // Return the default app\n * const app = getApp();\n * ```\n *\n * @example\n * ```javascript\n * // Return a named app\n * const otherApp = getApp(\"otherApp\");\n * ```\n *\n * @param name - Optional name of the app to return. If no name is\n *   provided, the default is `\"[DEFAULT]\"`.\n *\n * @returns The app corresponding to the provided app name.\n *   If no app name is provided, the default app is returned.\n *\n * @public\n */\nexport function getApp(name: string = DEFAULT_ENTRY_NAME): FirebaseApp {\n  const app = _apps.get(name);\n  if (!app && name === DEFAULT_ENTRY_NAME && getDefaultAppConfig()) {\n    return initializeApp();\n  }\n  if (!app) {\n    throw ERROR_FACTORY.create(AppError.NO_APP, { appName: name });\n  }\n\n  return app;\n}\n\n/**\n * A (read-only) array of all initialized apps.\n * @public\n */\nexport function getApps(): FirebaseApp[] {\n  return Array.from(_apps.values());\n}\n\n/**\n * Renders this app unusable and frees the resources of all associated\n * services.\n *\n * @example\n * ```javascript\n * deleteApp(app)\n *   .then(function() {\n *     console.log(\"App deleted successfully\");\n *   })\n *   .catch(function(error) {\n *     console.log(\"Error deleting app:\", error);\n *   });\n * ```\n *\n * @public\n */\nexport async function deleteApp(app: FirebaseApp): Promise<void> {\n  let cleanupProviders = false;\n  const name = app.name;\n  if (_apps.has(name)) {\n    cleanupProviders = true;\n    _apps.delete(name);\n  } else if (_serverApps.has(name)) {\n    const firebaseServerApp = app as FirebaseServerAppImpl;\n    if (firebaseServerApp.decRefCount() <= 0) {\n      _serverApps.delete(name);\n      cleanupProviders = true;\n    }\n  }\n\n  if (cleanupProviders) {\n    await Promise.all(\n      (app as FirebaseAppImpl).container\n        .getProviders()\n        .map(provider => provider.delete())\n    );\n    (app as FirebaseAppImpl).isDeleted = true;\n  }\n}\n\n/**\n * Registers a library's name and version for platform logging purposes.\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\n * @param version - Current version of that library.\n * @param variant - Bundle variant, e.g., node, rn, etc.\n *\n * @public\n */\nexport function registerVersion(\n  libraryKeyOrName: string,\n  version: string,\n  variant?: string\n): void {\n  // TODO: We can use this check to whitelist strings when/if we set up\n  // a good whitelist system.\n  let library = PLATFORM_LOG_STRING[libraryKeyOrName] ?? libraryKeyOrName;\n  if (variant) {\n    library += `-${variant}`;\n  }\n  const libraryMismatch = library.match(/\\s|\\//);\n  const versionMismatch = version.match(/\\s|\\//);\n  if (libraryMismatch || versionMismatch) {\n    const warning = [\n      `Unable to register library \"${library}\" with version \"${version}\":`\n    ];\n    if (libraryMismatch) {\n      warning.push(\n        `library name \"${library}\" contains illegal characters (whitespace or \"/\")`\n      );\n    }\n    if (libraryMismatch && versionMismatch) {\n      warning.push('and');\n    }\n    if (versionMismatch) {\n      warning.push(\n        `version name \"${version}\" contains illegal characters (whitespace or \"/\")`\n      );\n    }\n    logger.warn(warning.join(' '));\n    return;\n  }\n  _registerComponent(\n    new Component(\n      `${library}-version` as Name,\n      () => ({ library, version }),\n      ComponentType.VERSION\n    )\n  );\n}\n\n/**\n * Sets log handler for all Firebase SDKs.\n * @param logCallback - An optional custom log handler that executes user code whenever\n * the Firebase SDK makes a logging call.\n *\n * @public\n */\nexport function onLog(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void {\n  if (logCallback !== null && typeof logCallback !== 'function') {\n    throw ERROR_FACTORY.create(AppError.INVALID_LOG_ARGUMENT);\n  }\n  setUserLogHandler(logCallback, options);\n}\n\n/**\n * Sets log level for all Firebase SDKs.\n *\n * All of the log types above the current log level are captured (i.e. if\n * you set the log level to `info`, errors are logged, but `debug` and\n * `verbose` logs are not).\n *\n * @public\n */\nexport function setLogLevel(logLevel: LogLevelString): void {\n  setLogLevelImpl(logLevel);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { DBSchema, openDB, IDBPDatabase } from 'idb';\nimport { AppError, ERROR_FACTORY } from './errors';\nimport { FirebaseApp } from './public-types';\nimport { HeartbeatsInIndexedDB } from './types';\nimport { logger } from './logger';\n\nconst DB_NAME = 'firebase-heartbeat-database';\nconst DB_VERSION = 1;\nconst STORE_NAME = 'firebase-heartbeat-store';\n\ninterface AppDB extends DBSchema {\n  'firebase-heartbeat-store': {\n    key: string;\n    value: HeartbeatsInIndexedDB;\n  };\n}\n\nlet dbPromise: Promise<IDBPDatabase<AppDB>> | null = null;\nfunction getDbPromise(): Promise<IDBPDatabase<AppDB>> {\n  if (!dbPromise) {\n    dbPromise = openDB<AppDB>(DB_NAME, DB_VERSION, {\n      upgrade: (db, oldVersion) => {\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) {\n          case 0:\n            try {\n              db.createObjectStore(STORE_NAME);\n            } catch (e) {\n              // Safari/iOS browsers throw occasional exceptions on\n              // db.createObjectStore() that may be a bug. Avoid blocking\n              // the rest of the app functionality.\n              console.warn(e);\n            }\n        }\n      }\n    }).catch(e => {\n      throw ERROR_FACTORY.create(AppError.IDB_OPEN, {\n        originalErrorMessage: e.message\n      });\n    });\n  }\n  return dbPromise;\n}\n\nexport async function readHeartbeatsFromIndexedDB(\n  app: FirebaseApp\n): Promise<HeartbeatsInIndexedDB | undefined> {\n  try {\n    const db = await getDbPromise();\n    const tx = db.transaction(STORE_NAME);\n    const result = await tx.objectStore(STORE_NAME).get(computeKey(app));\n    // We already have the value but tx.done can throw,\n    // so we need to await it here to catch errors\n    await tx.done;\n    return result;\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      logger.warn(e.message);\n    } else {\n      const idbGetError = ERROR_FACTORY.create(AppError.IDB_GET, {\n        originalErrorMessage: (e as Error)?.message\n      });\n      logger.warn(idbGetError.message);\n    }\n  }\n}\n\nexport async function writeHeartbeatsToIndexedDB(\n  app: FirebaseApp,\n  heartbeatObject: HeartbeatsInIndexedDB\n): Promise<void> {\n  try {\n    const db = await getDbPromise();\n    const tx = db.transaction(STORE_NAME, 'readwrite');\n    const objectStore = tx.objectStore(STORE_NAME);\n    await objectStore.put(heartbeatObject, computeKey(app));\n    await tx.done;\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      logger.warn(e.message);\n    } else {\n      const idbGetError = ERROR_FACTORY.create(AppError.IDB_WRITE, {\n        originalErrorMessage: (e as Error)?.message\n      });\n      logger.warn(idbGetError.message);\n    }\n  }\n}\n\nfunction computeKey(app: FirebaseApp): string {\n  return `${app.name}!${app.options.appId}`;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ComponentContainer } from '@firebase/component';\nimport {\n  base64urlEncodeWithoutPadding,\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable\n} from '@firebase/util';\nimport {\n  readHeartbeatsFromIndexedDB,\n  writeHeartbeatsToIndexedDB\n} from './indexeddb';\nimport { FirebaseApp } from './public-types';\nimport {\n  HeartbeatsByUserAgent,\n  HeartbeatService,\n  HeartbeatsInIndexedDB,\n  HeartbeatStorage,\n  SingleDateHeartbeat\n} from './types';\n\nconst MAX_HEADER_BYTES = 1024;\n// 30 days\nconst STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1000;\n\nexport class HeartbeatServiceImpl implements HeartbeatService {\n  /**\n   * The persistence layer for heartbeats\n   * Leave public for easier testing.\n   */\n  _storage: HeartbeatStorageImpl;\n\n  /**\n   * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate\n   * the header string.\n   * Stores one record per date. This will be consolidated into the standard\n   * format of one record per user agent string before being sent as a header.\n   * Populated from indexedDB when the controller is instantiated and should\n   * be kept in sync with indexedDB.\n   * Leave public for easier testing.\n   */\n  _heartbeatsCache: HeartbeatsInIndexedDB | null = null;\n\n  /**\n   * the initialization promise for populating heartbeatCache.\n   * If getHeartbeatsHeader() is called before the promise resolves\n   * (heartbeatsCache == null), it should wait for this promise\n   * Leave public for easier testing.\n   */\n  _heartbeatsCachePromise: Promise<HeartbeatsInIndexedDB>;\n  constructor(private readonly container: ComponentContainer) {\n    const app = this.container.getProvider('app').getImmediate();\n    this._storage = new HeartbeatStorageImpl(app);\n    this._heartbeatsCachePromise = this._storage.read().then(result => {\n      this._heartbeatsCache = result;\n      return result;\n    });\n  }\n\n  /**\n   * Called to report a heartbeat. The function will generate\n   * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it\n   * to IndexedDB.\n   * Note that we only store one heartbeat per day. So if a heartbeat for today is\n   * already logged, subsequent calls to this function in the same day will be ignored.\n   */\n  async triggerHeartbeat(): Promise<void> {\n    const platformLogger = this.container\n      .getProvider('platform-logger')\n      .getImmediate();\n\n    // This is the \"Firebase user agent\" string from the platform logger\n    // service, not the browser user agent.\n    const agent = platformLogger.getPlatformInfoString();\n    const date = getUTCDateString();\n    if (this._heartbeatsCache?.heartbeats == null) {\n      this._heartbeatsCache = await this._heartbeatsCachePromise;\n      // If we failed to construct a heartbeats cache, then return immediately.\n      if (this._heartbeatsCache?.heartbeats == null) {\n        return;\n      }\n    }\n    // Do not store a heartbeat if one is already stored for this day\n    // or if a header has already been sent today.\n    if (\n      this._heartbeatsCache.lastSentHeartbeatDate === date ||\n      this._heartbeatsCache.heartbeats.some(\n        singleDateHeartbeat => singleDateHeartbeat.date === date\n      )\n    ) {\n      return;\n    } else {\n      // There is no entry for this date. Create one.\n      this._heartbeatsCache.heartbeats.push({ date, agent });\n    }\n    // Remove entries older than 30 days.\n    this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter(\n      singleDateHeartbeat => {\n        const hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();\n        const now = Date.now();\n        return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;\n      }\n    );\n    return this._storage.overwrite(this._heartbeatsCache);\n  }\n\n  /**\n   * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.\n   * It also clears all heartbeats from memory as well as in IndexedDB.\n   *\n   * NOTE: Consuming product SDKs should not send the header if this method\n   * returns an empty string.\n   */\n  async getHeartbeatsHeader(): Promise<string> {\n    if (this._heartbeatsCache === null) {\n      await this._heartbeatsCachePromise;\n    }\n    // If it's still null or the array is empty, there is no data to send.\n    if (\n      this._heartbeatsCache?.heartbeats == null ||\n      this._heartbeatsCache.heartbeats.length === 0\n    ) {\n      return '';\n    }\n    const date = getUTCDateString();\n    // Extract as many heartbeats from the cache as will fit under the size limit.\n    const { heartbeatsToSend, unsentEntries } = extractHeartbeatsForHeader(\n      this._heartbeatsCache.heartbeats\n    );\n    const headerString = base64urlEncodeWithoutPadding(\n      JSON.stringify({ version: 2, heartbeats: heartbeatsToSend })\n    );\n    // Store last sent date to prevent another being logged/sent for the same day.\n    this._heartbeatsCache.lastSentHeartbeatDate = date;\n    if (unsentEntries.length > 0) {\n      // Store any unsent entries if they exist.\n      this._heartbeatsCache.heartbeats = unsentEntries;\n      // This seems more likely than emptying the array (below) to lead to some odd state\n      // since the cache isn't empty and this will be called again on the next request,\n      // and is probably safest if we await it.\n      await this._storage.overwrite(this._heartbeatsCache);\n    } else {\n      this._heartbeatsCache.heartbeats = [];\n      // Do not wait for this, to reduce latency.\n      void this._storage.overwrite(this._heartbeatsCache);\n    }\n    return headerString;\n  }\n}\n\nfunction getUTCDateString(): string {\n  const today = new Date();\n  // Returns date format 'YYYY-MM-DD'\n  return today.toISOString().substring(0, 10);\n}\n\nexport function extractHeartbeatsForHeader(\n  heartbeatsCache: SingleDateHeartbeat[],\n  maxSize = MAX_HEADER_BYTES\n): {\n  heartbeatsToSend: HeartbeatsByUserAgent[];\n  unsentEntries: SingleDateHeartbeat[];\n} {\n  // Heartbeats grouped by user agent in the standard format to be sent in\n  // the header.\n  const heartbeatsToSend: HeartbeatsByUserAgent[] = [];\n  // Single date format heartbeats that are not sent.\n  let unsentEntries = heartbeatsCache.slice();\n  for (const singleDateHeartbeat of heartbeatsCache) {\n    // Look for an existing entry with the same user agent.\n    const heartbeatEntry = heartbeatsToSend.find(\n      hb => hb.agent === singleDateHeartbeat.agent\n    );\n    if (!heartbeatEntry) {\n      // If no entry for this user agent exists, create one.\n      heartbeatsToSend.push({\n        agent: singleDateHeartbeat.agent,\n        dates: [singleDateHeartbeat.date]\n      });\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        // If the header would exceed max size, remove the added heartbeat\n        // entry and stop adding to the header.\n        heartbeatsToSend.pop();\n        break;\n      }\n    } else {\n      heartbeatEntry.dates.push(singleDateHeartbeat.date);\n      // If the header would exceed max size, remove the added date\n      // and stop adding to the header.\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        heartbeatEntry.dates.pop();\n        break;\n      }\n    }\n    // Pop unsent entry from queue. (Skipped if adding the entry exceeded\n    // quota and the loop breaks early.)\n    unsentEntries = unsentEntries.slice(1);\n  }\n  return {\n    heartbeatsToSend,\n    unsentEntries\n  };\n}\n\nexport class HeartbeatStorageImpl implements HeartbeatStorage {\n  private _canUseIndexedDBPromise: Promise<boolean>;\n  constructor(public app: FirebaseApp) {\n    this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();\n  }\n  async runIndexedDBEnvironmentCheck(): Promise<boolean> {\n    if (!isIndexedDBAvailable()) {\n      return false;\n    } else {\n      return validateIndexedDBOpenable()\n        .then(() => true)\n        .catch(() => false);\n    }\n  }\n  /**\n   * Read all heartbeats.\n   */\n  async read(): Promise<HeartbeatsInIndexedDB> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return { heartbeats: [] };\n    } else {\n      const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);\n      if (idbHeartbeatObject?.heartbeats) {\n        return idbHeartbeatObject;\n      } else {\n        return { heartbeats: [] };\n      }\n    }\n  }\n  // overwrite the storage with the provided heartbeats\n  async overwrite(heartbeatsObject: HeartbeatsInIndexedDB): Promise<void> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate:\n          heartbeatsObject.lastSentHeartbeatDate ??\n          existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: heartbeatsObject.heartbeats\n      });\n    }\n  }\n  // add heartbeats\n  async add(heartbeatsObject: HeartbeatsInIndexedDB): Promise<void> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate:\n          heartbeatsObject.lastSentHeartbeatDate ??\n          existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: [\n          ...existingHeartbeatsObject.heartbeats,\n          ...heartbeatsObject.heartbeats\n        ]\n      });\n    }\n  }\n}\n\n/**\n * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped\n * in a platform logging header JSON object, stringified, and converted\n * to base 64.\n */\nexport function countBytes(heartbeatsCache: HeartbeatsByUserAgent[]): number {\n  // base64 has a restricted set of characters, all of which should be 1 byte.\n  return base64urlEncodeWithoutPadding(\n    // heartbeatsCache wrapper properties\n    JSON.stringify({ version: 2, heartbeats: heartbeatsCache })\n  ).length;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ComponentType } from '@firebase/component';\nimport { PlatformLoggerServiceImpl } from './platformLoggerService';\nimport { name, version } from '../package.json';\nimport { _registerComponent } from './internal';\nimport { registerVersion } from './api';\nimport { HeartbeatServiceImpl } from './heartbeatService';\n\nexport function registerCoreComponents(variant?: string): void {\n  _registerComponent(\n    new Component(\n      'platform-logger',\n      container => new PlatformLoggerServiceImpl(container),\n      ComponentType.PRIVATE\n    )\n  );\n  _registerComponent(\n    new Component(\n      'heartbeat',\n      container => new HeartbeatServiceImpl(container),\n      ComponentType.PRIVATE\n    )\n  );\n\n  // Register `app` package.\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n  // Register platform SDK identifier (no version).\n  registerVersion('fire-js', '');\n}\n","/**\n * Firebase App\n *\n * @remarks This package coordinates the communication between the different Firebase components\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { registerCoreComponents } from './registerCoreComponents';\n\nexport * from './api';\nexport * from './internal';\nexport * from './public-types';\n\nregisterCoreComponents('__RUNTIME_ENV__');\n"]},"metadata":{},"sourceType":"module"}