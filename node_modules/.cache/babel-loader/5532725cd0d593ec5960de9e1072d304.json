{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _asyncToGenerator from \"/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _defineProperty from \"/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nvar _ERROR_DESCRIPTION_MA;\nimport _regeneratorRuntime from \"/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@babel/runtime/regenerator/index.js\";\nimport { _getProvider, getApp, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { ErrorFactory, FirebaseError } from '@firebase/util';\nimport { openDB } from 'idb';\nvar name = \"@firebase/installations\";\nvar version = \"0.6.8\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar PENDING_TIMEOUT_MS = 10000;\nvar PACKAGE_VERSION = \"w:\".concat(version);\nvar INTERNAL_AUTH_VERSION = 'FIS_v2';\nvar INSTALLATIONS_API_URL = 'https://firebaseinstallations.googleapis.com/v1';\nvar TOKEN_EXPIRATION_BUFFER = 60 * 60 * 1000; // One hour\nvar SERVICE = 'installations';\nvar SERVICE_NAME = 'Installations';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar ERROR_DESCRIPTION_MAP = (_ERROR_DESCRIPTION_MA = {}, _defineProperty(_ERROR_DESCRIPTION_MA, \"missing-app-config-values\" /* ErrorCode.MISSING_APP_CONFIG_VALUES */, 'Missing App configuration value: \"{$valueName}\"'), _defineProperty(_ERROR_DESCRIPTION_MA, \"not-registered\" /* ErrorCode.NOT_REGISTERED */, 'Firebase Installation is not registered.'), _defineProperty(_ERROR_DESCRIPTION_MA, \"installation-not-found\" /* ErrorCode.INSTALLATION_NOT_FOUND */, 'Firebase Installation not found.'), _defineProperty(_ERROR_DESCRIPTION_MA, \"request-failed\" /* ErrorCode.REQUEST_FAILED */, '{$requestName} request failed with error \"{$serverCode} {$serverStatus}: {$serverMessage}\"'), _defineProperty(_ERROR_DESCRIPTION_MA, \"app-offline\" /* ErrorCode.APP_OFFLINE */, 'Could not process request. Application offline.'), _defineProperty(_ERROR_DESCRIPTION_MA, \"delete-pending-registration\" /* ErrorCode.DELETE_PENDING_REGISTRATION */, \"Can't delete installation while there is a pending registration request.\"), _ERROR_DESCRIPTION_MA);\nvar ERROR_FACTORY = new ErrorFactory(SERVICE, SERVICE_NAME, ERROR_DESCRIPTION_MAP);\n/** Returns true if error is a FirebaseError that is based on an error from the server. */\nfunction isServerError(error) {\n  return error instanceof FirebaseError && error.code.includes(\"request-failed\" /* ErrorCode.REQUEST_FAILED */);\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction getInstallationsEndpoint(_ref) {\n  var projectId = _ref.projectId;\n  return \"\".concat(INSTALLATIONS_API_URL, \"/projects/\").concat(projectId, \"/installations\");\n}\nfunction extractAuthTokenInfoFromResponse(response) {\n  return {\n    token: response.token,\n    requestStatus: 2 /* RequestStatus.COMPLETED */,\n    expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),\n    creationTime: Date.now()\n  };\n}\nfunction getErrorFromResponse(_x, _x2) {\n  return _getErrorFromResponse.apply(this, arguments);\n}\nfunction _getErrorFromResponse() {\n  _getErrorFromResponse = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(requestName, response) {\n    var responseJson, errorData;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return response.json();\n          case 2:\n            responseJson = _context.sent;\n            errorData = responseJson.error;\n            return _context.abrupt(\"return\", ERROR_FACTORY.create(\"request-failed\" /* ErrorCode.REQUEST_FAILED */, {\n              requestName: requestName,\n              serverCode: errorData.code,\n              serverMessage: errorData.message,\n              serverStatus: errorData.status\n            }));\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getErrorFromResponse.apply(this, arguments);\n}\nfunction getHeaders(_ref2) {\n  var apiKey = _ref2.apiKey;\n  return new Headers({\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\nfunction getHeadersWithAuth(appConfig, _ref3) {\n  var refreshToken = _ref3.refreshToken;\n  var headers = getHeaders(appConfig);\n  headers.append('Authorization', getAuthorizationHeader(refreshToken));\n  return headers;\n}\n/**\r\n * Calls the passed in fetch wrapper and returns the response.\r\n * If the returned response has a status of 5xx, re-runs the function once and\r\n * returns the response.\r\n */\nfunction retryIfServerError(_x3) {\n  return _retryIfServerError.apply(this, arguments);\n}\nfunction _retryIfServerError() {\n  _retryIfServerError = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(fn) {\n    var result;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return fn();\n          case 2:\n            result = _context2.sent;\n            if (!(result.status >= 500 && result.status < 600)) {\n              _context2.next = 5;\n              break;\n            }\n            return _context2.abrupt(\"return\", fn());\n          case 5:\n            return _context2.abrupt(\"return\", result);\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _retryIfServerError.apply(this, arguments);\n}\nfunction getExpiresInFromResponseExpiresIn(responseExpiresIn) {\n  // This works because the server will never respond with fractions of a second.\n  return Number(responseExpiresIn.replace('s', '000'));\n}\nfunction getAuthorizationHeader(refreshToken) {\n  return \"\".concat(INTERNAL_AUTH_VERSION, \" \").concat(refreshToken);\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction createInstallationRequest(_x4, _x5) {\n  return _createInstallationRequest.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/** Returns a promise that resolves after given time passes. */\nfunction _createInstallationRequest() {\n  _createInstallationRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(_ref4, _ref5) {\n    var appConfig, heartbeatServiceProvider, fid, endpoint, headers, heartbeatService, heartbeatsHeader, body, request, response, responseValue, registeredInstallationEntry;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            appConfig = _ref4.appConfig, heartbeatServiceProvider = _ref4.heartbeatServiceProvider;\n            fid = _ref5.fid;\n            endpoint = getInstallationsEndpoint(appConfig);\n            headers = getHeaders(appConfig); // If heartbeat service exists, add the heartbeat string to the header.\n            heartbeatService = heartbeatServiceProvider.getImmediate({\n              optional: true\n            });\n            if (!heartbeatService) {\n              _context3.next = 10;\n              break;\n            }\n            _context3.next = 8;\n            return heartbeatService.getHeartbeatsHeader();\n          case 8:\n            heartbeatsHeader = _context3.sent;\n            if (heartbeatsHeader) {\n              headers.append('x-firebase-client', heartbeatsHeader);\n            }\n          case 10:\n            body = {\n              fid: fid,\n              authVersion: INTERNAL_AUTH_VERSION,\n              appId: appConfig.appId,\n              sdkVersion: PACKAGE_VERSION\n            };\n            request = {\n              method: 'POST',\n              headers: headers,\n              body: JSON.stringify(body)\n            };\n            _context3.next = 14;\n            return retryIfServerError(function () {\n              return fetch(endpoint, request);\n            });\n          case 14:\n            response = _context3.sent;\n            if (!response.ok) {\n              _context3.next = 23;\n              break;\n            }\n            _context3.next = 18;\n            return response.json();\n          case 18:\n            responseValue = _context3.sent;\n            registeredInstallationEntry = {\n              fid: responseValue.fid || fid,\n              registrationStatus: 2 /* RequestStatus.COMPLETED */,\n              refreshToken: responseValue.refreshToken,\n              authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)\n            };\n            return _context3.abrupt(\"return\", registeredInstallationEntry);\n          case 23:\n            _context3.next = 25;\n            return getErrorFromResponse('Create Installation', response);\n          case 25:\n            throw _context3.sent;\n          case 26:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _createInstallationRequest.apply(this, arguments);\n}\nfunction sleep(ms) {\n  return new Promise(function (resolve) {\n    setTimeout(resolve, ms);\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction bufferToBase64UrlSafe(array) {\n  var b64 = btoa(String.fromCharCode.apply(String, _toConsumableArray(array)));\n  return b64.replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar VALID_FID_PATTERN = /^[cdef][\\w-]{21}$/;\nvar INVALID_FID = '';\n/**\r\n * Generates a new FID using random values from Web Crypto API.\r\n * Returns an empty string if FID generation fails for any reason.\r\n */\nfunction generateFid() {\n  try {\n    // A valid FID has exactly 22 base64 characters, which is 132 bits, or 16.5\n    // bytes. our implementation generates a 17 byte array instead.\n    var fidByteArray = new Uint8Array(17);\n    var crypto = self.crypto || self.msCrypto;\n    crypto.getRandomValues(fidByteArray);\n    // Replace the first 4 random bits with the constant FID header of 0b0111.\n    fidByteArray[0] = 112 + fidByteArray[0] % 16;\n    var fid = encode(fidByteArray);\n    return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;\n  } catch (_a) {\n    // FID generation errored\n    return INVALID_FID;\n  }\n}\n/** Converts a FID Uint8Array to a base64 string representation. */\nfunction encode(fidByteArray) {\n  var b64String = bufferToBase64UrlSafe(fidByteArray);\n  // Remove the 23rd character that was added because of the extra 4 bits at the\n  // end of our 17 byte array, and the '=' padding.\n  return b64String.substr(0, 22);\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/** Returns a string key that can be used to identify the app. */\nfunction getKey(appConfig) {\n  return \"\".concat(appConfig.appName, \"!\").concat(appConfig.appId);\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar fidChangeCallbacks = new Map();\n/**\r\n * Calls the onIdChange callbacks with the new FID value, and broadcasts the\r\n * change to other tabs.\r\n */\nfunction fidChanged(appConfig, fid) {\n  var key = getKey(appConfig);\n  callFidChangeCallbacks(key, fid);\n  broadcastFidChange(key, fid);\n}\nfunction addCallback(appConfig, callback) {\n  // Open the broadcast channel if it's not already open,\n  // to be able to listen to change events from other tabs.\n  getBroadcastChannel();\n  var key = getKey(appConfig);\n  var callbackSet = fidChangeCallbacks.get(key);\n  if (!callbackSet) {\n    callbackSet = new Set();\n    fidChangeCallbacks.set(key, callbackSet);\n  }\n  callbackSet.add(callback);\n}\nfunction removeCallback(appConfig, callback) {\n  var key = getKey(appConfig);\n  var callbackSet = fidChangeCallbacks.get(key);\n  if (!callbackSet) {\n    return;\n  }\n  callbackSet.delete(callback);\n  if (callbackSet.size === 0) {\n    fidChangeCallbacks.delete(key);\n  }\n  // Close broadcast channel if there are no more callbacks.\n  closeBroadcastChannel();\n}\nfunction callFidChangeCallbacks(key, fid) {\n  var callbacks = fidChangeCallbacks.get(key);\n  if (!callbacks) {\n    return;\n  }\n  var _iterator = _createForOfIteratorHelper(callbacks),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var callback = _step.value;\n      callback(fid);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\nfunction broadcastFidChange(key, fid) {\n  var channel = getBroadcastChannel();\n  if (channel) {\n    channel.postMessage({\n      key: key,\n      fid: fid\n    });\n  }\n  closeBroadcastChannel();\n}\nvar broadcastChannel = null;\n/** Opens and returns a BroadcastChannel if it is supported by the browser. */\nfunction getBroadcastChannel() {\n  if (!broadcastChannel && 'BroadcastChannel' in self) {\n    broadcastChannel = new BroadcastChannel('[Firebase] FID Change');\n    broadcastChannel.onmessage = function (e) {\n      callFidChangeCallbacks(e.data.key, e.data.fid);\n    };\n  }\n  return broadcastChannel;\n}\nfunction closeBroadcastChannel() {\n  if (fidChangeCallbacks.size === 0 && broadcastChannel) {\n    broadcastChannel.close();\n    broadcastChannel = null;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar DATABASE_NAME = 'firebase-installations-database';\nvar DATABASE_VERSION = 1;\nvar OBJECT_STORE_NAME = 'firebase-installations-store';\nvar dbPromise = null;\nfunction getDbPromise() {\n  if (!dbPromise) {\n    dbPromise = openDB(DATABASE_NAME, DATABASE_VERSION, {\n      upgrade: function upgrade(db, oldVersion) {\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) {\n          case 0:\n            db.createObjectStore(OBJECT_STORE_NAME);\n        }\n      }\n    });\n  }\n  return dbPromise;\n}\n/** Assigns or overwrites the record for the given key with the given value. */\nfunction set(_x6, _x7) {\n  return _set.apply(this, arguments);\n}\n/** Removes record(s) from the objectStore that match the given key. */\nfunction _set() {\n  _set = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(appConfig, value) {\n    var key, db, tx, objectStore, oldValue;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            key = getKey(appConfig);\n            _context4.next = 3;\n            return getDbPromise();\n          case 3:\n            db = _context4.sent;\n            tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n            objectStore = tx.objectStore(OBJECT_STORE_NAME);\n            _context4.next = 8;\n            return objectStore.get(key);\n          case 8:\n            oldValue = _context4.sent;\n            _context4.next = 11;\n            return objectStore.put(value, key);\n          case 11:\n            _context4.next = 13;\n            return tx.done;\n          case 13:\n            if (!oldValue || oldValue.fid !== value.fid) {\n              fidChanged(appConfig, value.fid);\n            }\n            return _context4.abrupt(\"return\", value);\n          case 15:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _set.apply(this, arguments);\n}\nfunction remove(_x8) {\n  return _remove.apply(this, arguments);\n}\n/**\r\n * Atomically updates a record with the result of updateFn, which gets\r\n * called with the current value. If newValue is undefined, the record is\r\n * deleted instead.\r\n * @return Updated value\r\n */\nfunction _remove() {\n  _remove = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(appConfig) {\n    var key, db, tx;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            key = getKey(appConfig);\n            _context5.next = 3;\n            return getDbPromise();\n          case 3:\n            db = _context5.sent;\n            tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n            _context5.next = 7;\n            return tx.objectStore(OBJECT_STORE_NAME).delete(key);\n          case 7:\n            _context5.next = 9;\n            return tx.done;\n          case 9:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _remove.apply(this, arguments);\n}\nfunction update(_x9, _x10) {\n  return _update.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Updates and returns the InstallationEntry from the database.\r\n * Also triggers a registration request if it is necessary and possible.\r\n */\nfunction _update() {\n  _update = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(appConfig, updateFn) {\n    var key, db, tx, store, oldValue, newValue;\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            key = getKey(appConfig);\n            _context6.next = 3;\n            return getDbPromise();\n          case 3:\n            db = _context6.sent;\n            tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n            store = tx.objectStore(OBJECT_STORE_NAME);\n            _context6.next = 8;\n            return store.get(key);\n          case 8:\n            oldValue = _context6.sent;\n            newValue = updateFn(oldValue);\n            if (!(newValue === undefined)) {\n              _context6.next = 15;\n              break;\n            }\n            _context6.next = 13;\n            return store.delete(key);\n          case 13:\n            _context6.next = 17;\n            break;\n          case 15:\n            _context6.next = 17;\n            return store.put(newValue, key);\n          case 17:\n            _context6.next = 19;\n            return tx.done;\n          case 19:\n            if (newValue && (!oldValue || oldValue.fid !== newValue.fid)) {\n              fidChanged(appConfig, newValue.fid);\n            }\n            return _context6.abrupt(\"return\", newValue);\n          case 21:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n  return _update.apply(this, arguments);\n}\nfunction getInstallationEntry(_x11) {\n  return _getInstallationEntry.apply(this, arguments);\n}\n/**\r\n * Creates a new Installation Entry if one does not exist.\r\n * Also clears timed out pending requests.\r\n */\nfunction _getInstallationEntry() {\n  _getInstallationEntry = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(installations) {\n    var registrationPromise, installationEntry;\n    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            _context7.next = 2;\n            return update(installations.appConfig, function (oldEntry) {\n              var installationEntry = updateOrCreateInstallationEntry(oldEntry);\n              var entryWithPromise = triggerRegistrationIfNecessary(installations, installationEntry);\n              registrationPromise = entryWithPromise.registrationPromise;\n              return entryWithPromise.installationEntry;\n            });\n          case 2:\n            installationEntry = _context7.sent;\n            if (!(installationEntry.fid === INVALID_FID)) {\n              _context7.next = 8;\n              break;\n            }\n            _context7.next = 6;\n            return registrationPromise;\n          case 6:\n            _context7.t0 = _context7.sent;\n            return _context7.abrupt(\"return\", {\n              installationEntry: _context7.t0\n            });\n          case 8:\n            return _context7.abrupt(\"return\", {\n              installationEntry: installationEntry,\n              registrationPromise: registrationPromise\n            });\n          case 9:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  }));\n  return _getInstallationEntry.apply(this, arguments);\n}\nfunction updateOrCreateInstallationEntry(oldEntry) {\n  var entry = oldEntry || {\n    fid: generateFid(),\n    registrationStatus: 0 /* RequestStatus.NOT_STARTED */\n  };\n\n  return clearTimedOutRequest(entry);\n}\n/**\r\n * If the Firebase Installation is not registered yet, this will trigger the\r\n * registration and return an InProgressInstallationEntry.\r\n *\r\n * If registrationPromise does not exist, the installationEntry is guaranteed\r\n * to be registered.\r\n */\nfunction triggerRegistrationIfNecessary(installations, installationEntry) {\n  if (installationEntry.registrationStatus === 0 /* RequestStatus.NOT_STARTED */) {\n    if (!navigator.onLine) {\n      // Registration required but app is offline.\n      var registrationPromiseWithError = Promise.reject(ERROR_FACTORY.create(\"app-offline\" /* ErrorCode.APP_OFFLINE */));\n      return {\n        installationEntry: installationEntry,\n        registrationPromise: registrationPromiseWithError\n      };\n    }\n    // Try registering. Change status to IN_PROGRESS.\n    var inProgressEntry = {\n      fid: installationEntry.fid,\n      registrationStatus: 1 /* RequestStatus.IN_PROGRESS */,\n      registrationTime: Date.now()\n    };\n    var registrationPromise = registerInstallation(installations, inProgressEntry);\n    return {\n      installationEntry: inProgressEntry,\n      registrationPromise: registrationPromise\n    };\n  } else if (installationEntry.registrationStatus === 1 /* RequestStatus.IN_PROGRESS */) {\n    return {\n      installationEntry: installationEntry,\n      registrationPromise: waitUntilFidRegistration(installations)\n    };\n  } else {\n    return {\n      installationEntry: installationEntry\n    };\n  }\n}\n/** This will be executed only once for each new Firebase Installation. */\nfunction registerInstallation(_x12, _x13) {\n  return _registerInstallation.apply(this, arguments);\n}\n/** Call if FID registration is pending in another request. */\nfunction _registerInstallation() {\n  _registerInstallation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(installations, installationEntry) {\n    var registeredInstallationEntry;\n    return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            _context8.prev = 0;\n            _context8.next = 3;\n            return createInstallationRequest(installations, installationEntry);\n          case 3:\n            registeredInstallationEntry = _context8.sent;\n            return _context8.abrupt(\"return\", set(installations.appConfig, registeredInstallationEntry));\n          case 7:\n            _context8.prev = 7;\n            _context8.t0 = _context8[\"catch\"](0);\n            if (!(isServerError(_context8.t0) && _context8.t0.customData.serverCode === 409)) {\n              _context8.next = 14;\n              break;\n            }\n            _context8.next = 12;\n            return remove(installations.appConfig);\n          case 12:\n            _context8.next = 16;\n            break;\n          case 14:\n            _context8.next = 16;\n            return set(installations.appConfig, {\n              fid: installationEntry.fid,\n              registrationStatus: 0 /* RequestStatus.NOT_STARTED */\n            });\n          case 16:\n            throw _context8.t0;\n          case 17:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee8, null, [[0, 7]]);\n  }));\n  return _registerInstallation.apply(this, arguments);\n}\nfunction waitUntilFidRegistration(_x14) {\n  return _waitUntilFidRegistration.apply(this, arguments);\n}\n/**\r\n * Called only if there is a CreateInstallation request in progress.\r\n *\r\n * Updates the InstallationEntry in the DB based on the status of the\r\n * CreateInstallation request.\r\n *\r\n * Returns the updated InstallationEntry.\r\n */\nfunction _waitUntilFidRegistration() {\n  _waitUntilFidRegistration = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(installations) {\n    var entry, _yield$getInstallatio, installationEntry, registrationPromise;\n    return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            _context9.next = 2;\n            return updateInstallationRequest(installations.appConfig);\n          case 2:\n            entry = _context9.sent;\n          case 3:\n            if (!(entry.registrationStatus === 1 /* RequestStatus.IN_PROGRESS */)) {\n              _context9.next = 11;\n              break;\n            }\n            _context9.next = 6;\n            return sleep(100);\n          case 6:\n            _context9.next = 8;\n            return updateInstallationRequest(installations.appConfig);\n          case 8:\n            entry = _context9.sent;\n            _context9.next = 3;\n            break;\n          case 11:\n            if (!(entry.registrationStatus === 0 /* RequestStatus.NOT_STARTED */)) {\n              _context9.next = 22;\n              break;\n            }\n            _context9.next = 14;\n            return getInstallationEntry(installations);\n          case 14:\n            _yield$getInstallatio = _context9.sent;\n            installationEntry = _yield$getInstallatio.installationEntry;\n            registrationPromise = _yield$getInstallatio.registrationPromise;\n            if (!registrationPromise) {\n              _context9.next = 21;\n              break;\n            }\n            return _context9.abrupt(\"return\", registrationPromise);\n          case 21:\n            return _context9.abrupt(\"return\", installationEntry);\n          case 22:\n            return _context9.abrupt(\"return\", entry);\n          case 23:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, _callee9);\n  }));\n  return _waitUntilFidRegistration.apply(this, arguments);\n}\nfunction updateInstallationRequest(appConfig) {\n  return update(appConfig, function (oldEntry) {\n    if (!oldEntry) {\n      throw ERROR_FACTORY.create(\"installation-not-found\" /* ErrorCode.INSTALLATION_NOT_FOUND */);\n    }\n\n    return clearTimedOutRequest(oldEntry);\n  });\n}\nfunction clearTimedOutRequest(entry) {\n  if (hasInstallationRequestTimedOut(entry)) {\n    return {\n      fid: entry.fid,\n      registrationStatus: 0 /* RequestStatus.NOT_STARTED */\n    };\n  }\n\n  return entry;\n}\nfunction hasInstallationRequestTimedOut(installationEntry) {\n  return installationEntry.registrationStatus === 1 /* RequestStatus.IN_PROGRESS */ && installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now();\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction generateAuthTokenRequest(_x15, _x16) {\n  return _generateAuthTokenRequest.apply(this, arguments);\n}\nfunction _generateAuthTokenRequest() {\n  _generateAuthTokenRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(_ref6, installationEntry) {\n    var appConfig, heartbeatServiceProvider, endpoint, headers, heartbeatService, heartbeatsHeader, body, request, response, responseValue, completedAuthToken;\n    return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            appConfig = _ref6.appConfig, heartbeatServiceProvider = _ref6.heartbeatServiceProvider;\n            endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);\n            headers = getHeadersWithAuth(appConfig, installationEntry); // If heartbeat service exists, add the heartbeat string to the header.\n            heartbeatService = heartbeatServiceProvider.getImmediate({\n              optional: true\n            });\n            if (!heartbeatService) {\n              _context10.next = 9;\n              break;\n            }\n            _context10.next = 7;\n            return heartbeatService.getHeartbeatsHeader();\n          case 7:\n            heartbeatsHeader = _context10.sent;\n            if (heartbeatsHeader) {\n              headers.append('x-firebase-client', heartbeatsHeader);\n            }\n          case 9:\n            body = {\n              installation: {\n                sdkVersion: PACKAGE_VERSION,\n                appId: appConfig.appId\n              }\n            };\n            request = {\n              method: 'POST',\n              headers: headers,\n              body: JSON.stringify(body)\n            };\n            _context10.next = 13;\n            return retryIfServerError(function () {\n              return fetch(endpoint, request);\n            });\n          case 13:\n            response = _context10.sent;\n            if (!response.ok) {\n              _context10.next = 22;\n              break;\n            }\n            _context10.next = 17;\n            return response.json();\n          case 17:\n            responseValue = _context10.sent;\n            completedAuthToken = extractAuthTokenInfoFromResponse(responseValue);\n            return _context10.abrupt(\"return\", completedAuthToken);\n          case 22:\n            _context10.next = 24;\n            return getErrorFromResponse('Generate Auth Token', response);\n          case 24:\n            throw _context10.sent;\n          case 25:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, _callee10);\n  }));\n  return _generateAuthTokenRequest.apply(this, arguments);\n}\nfunction getGenerateAuthTokenEndpoint(appConfig, _ref7) {\n  var fid = _ref7.fid;\n  return \"\".concat(getInstallationsEndpoint(appConfig), \"/\").concat(fid, \"/authTokens:generate\");\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Returns a valid authentication token for the installation. Generates a new\r\n * token if one doesn't exist, is expired or about to expire.\r\n *\r\n * Should only be called if the Firebase Installation is registered.\r\n */\nfunction refreshAuthToken(_x17) {\n  return _refreshAuthToken.apply(this, arguments);\n}\n/**\r\n * Call only if FID is registered and Auth Token request is in progress.\r\n *\r\n * Waits until the current pending request finishes. If the request times out,\r\n * tries once in this thread as well.\r\n */\nfunction _refreshAuthToken() {\n  _refreshAuthToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(installations) {\n    var forceRefresh,\n      tokenPromise,\n      entry,\n      authToken,\n      _args11 = arguments;\n    return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n      while (1) {\n        switch (_context11.prev = _context11.next) {\n          case 0:\n            forceRefresh = _args11.length > 1 && _args11[1] !== undefined ? _args11[1] : false;\n            _context11.next = 3;\n            return update(installations.appConfig, function (oldEntry) {\n              if (!isEntryRegistered(oldEntry)) {\n                throw ERROR_FACTORY.create(\"not-registered\" /* ErrorCode.NOT_REGISTERED */);\n              }\n\n              var oldAuthToken = oldEntry.authToken;\n              if (!forceRefresh && isAuthTokenValid(oldAuthToken)) {\n                // There is a valid token in the DB.\n                return oldEntry;\n              } else if (oldAuthToken.requestStatus === 1 /* RequestStatus.IN_PROGRESS */) {\n                // There already is a token request in progress.\n                tokenPromise = waitUntilAuthTokenRequest(installations, forceRefresh);\n                return oldEntry;\n              } else {\n                // No token or token expired.\n                if (!navigator.onLine) {\n                  throw ERROR_FACTORY.create(\"app-offline\" /* ErrorCode.APP_OFFLINE */);\n                }\n\n                var inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);\n                tokenPromise = fetchAuthTokenFromServer(installations, inProgressEntry);\n                return inProgressEntry;\n              }\n            });\n          case 3:\n            entry = _context11.sent;\n            if (!tokenPromise) {\n              _context11.next = 10;\n              break;\n            }\n            _context11.next = 7;\n            return tokenPromise;\n          case 7:\n            _context11.t0 = _context11.sent;\n            _context11.next = 11;\n            break;\n          case 10:\n            _context11.t0 = entry.authToken;\n          case 11:\n            authToken = _context11.t0;\n            return _context11.abrupt(\"return\", authToken);\n          case 13:\n          case \"end\":\n            return _context11.stop();\n        }\n      }\n    }, _callee11);\n  }));\n  return _refreshAuthToken.apply(this, arguments);\n}\nfunction waitUntilAuthTokenRequest(_x18, _x19) {\n  return _waitUntilAuthTokenRequest.apply(this, arguments);\n}\n/**\r\n * Called only if there is a GenerateAuthToken request in progress.\r\n *\r\n * Updates the InstallationEntry in the DB based on the status of the\r\n * GenerateAuthToken request.\r\n *\r\n * Returns the updated InstallationEntry.\r\n */\nfunction _waitUntilAuthTokenRequest() {\n  _waitUntilAuthTokenRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(installations, forceRefresh) {\n    var entry, authToken;\n    return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n      while (1) {\n        switch (_context12.prev = _context12.next) {\n          case 0:\n            _context12.next = 2;\n            return updateAuthTokenRequest(installations.appConfig);\n          case 2:\n            entry = _context12.sent;\n          case 3:\n            if (!(entry.authToken.requestStatus === 1 /* RequestStatus.IN_PROGRESS */)) {\n              _context12.next = 11;\n              break;\n            }\n            _context12.next = 6;\n            return sleep(100);\n          case 6:\n            _context12.next = 8;\n            return updateAuthTokenRequest(installations.appConfig);\n          case 8:\n            entry = _context12.sent;\n            _context12.next = 3;\n            break;\n          case 11:\n            authToken = entry.authToken;\n            if (!(authToken.requestStatus === 0 /* RequestStatus.NOT_STARTED */)) {\n              _context12.next = 16;\n              break;\n            }\n            return _context12.abrupt(\"return\", refreshAuthToken(installations, forceRefresh));\n          case 16:\n            return _context12.abrupt(\"return\", authToken);\n          case 17:\n          case \"end\":\n            return _context12.stop();\n        }\n      }\n    }, _callee12);\n  }));\n  return _waitUntilAuthTokenRequest.apply(this, arguments);\n}\nfunction updateAuthTokenRequest(appConfig) {\n  return update(appConfig, function (oldEntry) {\n    if (!isEntryRegistered(oldEntry)) {\n      throw ERROR_FACTORY.create(\"not-registered\" /* ErrorCode.NOT_REGISTERED */);\n    }\n\n    var oldAuthToken = oldEntry.authToken;\n    if (hasAuthTokenRequestTimedOut(oldAuthToken)) {\n      return Object.assign(Object.assign({}, oldEntry), {\n        authToken: {\n          requestStatus: 0 /* RequestStatus.NOT_STARTED */\n        }\n      });\n    }\n\n    return oldEntry;\n  });\n}\nfunction fetchAuthTokenFromServer(_x20, _x21) {\n  return _fetchAuthTokenFromServer.apply(this, arguments);\n}\nfunction _fetchAuthTokenFromServer() {\n  _fetchAuthTokenFromServer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(installations, installationEntry) {\n    var authToken, updatedInstallationEntry, _updatedInstallationEntry;\n    return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n      while (1) {\n        switch (_context13.prev = _context13.next) {\n          case 0:\n            _context13.prev = 0;\n            _context13.next = 3;\n            return generateAuthTokenRequest(installations, installationEntry);\n          case 3:\n            authToken = _context13.sent;\n            updatedInstallationEntry = Object.assign(Object.assign({}, installationEntry), {\n              authToken: authToken\n            });\n            _context13.next = 7;\n            return set(installations.appConfig, updatedInstallationEntry);\n          case 7:\n            return _context13.abrupt(\"return\", authToken);\n          case 10:\n            _context13.prev = 10;\n            _context13.t0 = _context13[\"catch\"](0);\n            if (!(isServerError(_context13.t0) && (_context13.t0.customData.serverCode === 401 || _context13.t0.customData.serverCode === 404))) {\n              _context13.next = 17;\n              break;\n            }\n            _context13.next = 15;\n            return remove(installations.appConfig);\n          case 15:\n            _context13.next = 20;\n            break;\n          case 17:\n            _updatedInstallationEntry = Object.assign(Object.assign({}, installationEntry), {\n              authToken: {\n                requestStatus: 0 /* RequestStatus.NOT_STARTED */\n              }\n            });\n            _context13.next = 20;\n            return set(installations.appConfig, _updatedInstallationEntry);\n          case 20:\n            throw _context13.t0;\n          case 21:\n          case \"end\":\n            return _context13.stop();\n        }\n      }\n    }, _callee13, null, [[0, 10]]);\n  }));\n  return _fetchAuthTokenFromServer.apply(this, arguments);\n}\nfunction isEntryRegistered(installationEntry) {\n  return installationEntry !== undefined && installationEntry.registrationStatus === 2 /* RequestStatus.COMPLETED */;\n}\n\nfunction isAuthTokenValid(authToken) {\n  return authToken.requestStatus === 2 /* RequestStatus.COMPLETED */ && !isAuthTokenExpired(authToken);\n}\nfunction isAuthTokenExpired(authToken) {\n  var now = Date.now();\n  return now < authToken.creationTime || authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER;\n}\n/** Returns an updated InstallationEntry with an InProgressAuthToken. */\nfunction makeAuthTokenRequestInProgressEntry(oldEntry) {\n  var inProgressAuthToken = {\n    requestStatus: 1 /* RequestStatus.IN_PROGRESS */,\n    requestTime: Date.now()\n  };\n  return Object.assign(Object.assign({}, oldEntry), {\n    authToken: inProgressAuthToken\n  });\n}\nfunction hasAuthTokenRequestTimedOut(authToken) {\n  return authToken.requestStatus === 1 /* RequestStatus.IN_PROGRESS */ && authToken.requestTime + PENDING_TIMEOUT_MS < Date.now();\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Creates a Firebase Installation if there isn't one for the app and\r\n * returns the Installation ID.\r\n * @param installations - The `Installations` instance.\r\n *\r\n * @public\r\n */\nfunction _getId2(_x22) {\n  return _getId.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Returns a Firebase Installations auth token, identifying the current\r\n * Firebase Installation.\r\n * @param installations - The `Installations` instance.\r\n * @param forceRefresh - Force refresh regardless of token expiration.\r\n *\r\n * @public\r\n */\nfunction _getId() {\n  _getId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(installations) {\n    var installationsImpl, _yield$getInstallatio2, installationEntry, registrationPromise;\n    return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n      while (1) {\n        switch (_context14.prev = _context14.next) {\n          case 0:\n            installationsImpl = installations;\n            _context14.next = 3;\n            return getInstallationEntry(installationsImpl);\n          case 3:\n            _yield$getInstallatio2 = _context14.sent;\n            installationEntry = _yield$getInstallatio2.installationEntry;\n            registrationPromise = _yield$getInstallatio2.registrationPromise;\n            if (registrationPromise) {\n              registrationPromise.catch(console.error);\n            } else {\n              // If the installation is already registered, update the authentication\n              // token if needed.\n              refreshAuthToken(installationsImpl).catch(console.error);\n            }\n            return _context14.abrupt(\"return\", installationEntry.fid);\n          case 8:\n          case \"end\":\n            return _context14.stop();\n        }\n      }\n    }, _callee14);\n  }));\n  return _getId.apply(this, arguments);\n}\nfunction _getToken2(_x23) {\n  return _getToken.apply(this, arguments);\n}\nfunction _getToken() {\n  _getToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(installations) {\n    var forceRefresh,\n      installationsImpl,\n      authToken,\n      _args15 = arguments;\n    return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n      while (1) {\n        switch (_context15.prev = _context15.next) {\n          case 0:\n            forceRefresh = _args15.length > 1 && _args15[1] !== undefined ? _args15[1] : false;\n            installationsImpl = installations;\n            _context15.next = 4;\n            return completeInstallationRegistration(installationsImpl);\n          case 4:\n            _context15.next = 6;\n            return refreshAuthToken(installationsImpl, forceRefresh);\n          case 6:\n            authToken = _context15.sent;\n            return _context15.abrupt(\"return\", authToken.token);\n          case 8:\n          case \"end\":\n            return _context15.stop();\n        }\n      }\n    }, _callee15);\n  }));\n  return _getToken.apply(this, arguments);\n}\nfunction completeInstallationRegistration(_x24) {\n  return _completeInstallationRegistration.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction _completeInstallationRegistration() {\n  _completeInstallationRegistration = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(installations) {\n    var _yield$getInstallatio3, registrationPromise;\n    return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n      while (1) {\n        switch (_context16.prev = _context16.next) {\n          case 0:\n            _context16.next = 2;\n            return getInstallationEntry(installations);\n          case 2:\n            _yield$getInstallatio3 = _context16.sent;\n            registrationPromise = _yield$getInstallatio3.registrationPromise;\n            if (!registrationPromise) {\n              _context16.next = 7;\n              break;\n            }\n            _context16.next = 7;\n            return registrationPromise;\n          case 7:\n          case \"end\":\n            return _context16.stop();\n        }\n      }\n    }, _callee16);\n  }));\n  return _completeInstallationRegistration.apply(this, arguments);\n}\nfunction deleteInstallationRequest(_x25, _x26) {\n  return _deleteInstallationRequest.apply(this, arguments);\n}\nfunction _deleteInstallationRequest() {\n  _deleteInstallationRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(appConfig, installationEntry) {\n    var endpoint, headers, request, response;\n    return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n      while (1) {\n        switch (_context17.prev = _context17.next) {\n          case 0:\n            endpoint = getDeleteEndpoint(appConfig, installationEntry);\n            headers = getHeadersWithAuth(appConfig, installationEntry);\n            request = {\n              method: 'DELETE',\n              headers: headers\n            };\n            _context17.next = 5;\n            return retryIfServerError(function () {\n              return fetch(endpoint, request);\n            });\n          case 5:\n            response = _context17.sent;\n            if (response.ok) {\n              _context17.next = 10;\n              break;\n            }\n            _context17.next = 9;\n            return getErrorFromResponse('Delete Installation', response);\n          case 9:\n            throw _context17.sent;\n          case 10:\n          case \"end\":\n            return _context17.stop();\n        }\n      }\n    }, _callee17);\n  }));\n  return _deleteInstallationRequest.apply(this, arguments);\n}\nfunction getDeleteEndpoint(appConfig, _ref8) {\n  var fid = _ref8.fid;\n  return \"\".concat(getInstallationsEndpoint(appConfig), \"/\").concat(fid);\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Deletes the Firebase Installation and all associated data.\r\n * @param installations - The `Installations` instance.\r\n *\r\n * @public\r\n */\nfunction deleteInstallations(_x27) {\n  return _deleteInstallations.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Sets a new callback that will get called when Installation ID changes.\r\n * Returns an unsubscribe function that will remove the callback when called.\r\n * @param installations - The `Installations` instance.\r\n * @param callback - The callback function that is invoked when FID changes.\r\n * @returns A function that can be called to unsubscribe.\r\n *\r\n * @public\r\n */\nfunction _deleteInstallations() {\n  _deleteInstallations = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18(installations) {\n    var appConfig, entry;\n    return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n      while (1) {\n        switch (_context18.prev = _context18.next) {\n          case 0:\n            appConfig = installations.appConfig;\n            _context18.next = 3;\n            return update(appConfig, function (oldEntry) {\n              if (oldEntry && oldEntry.registrationStatus === 0 /* RequestStatus.NOT_STARTED */) {\n                // Delete the unregistered entry without sending a deleteInstallation request.\n                return undefined;\n              }\n              return oldEntry;\n            });\n          case 3:\n            entry = _context18.sent;\n            if (!entry) {\n              _context18.next = 18;\n              break;\n            }\n            if (!(entry.registrationStatus === 1 /* RequestStatus.IN_PROGRESS */)) {\n              _context18.next = 9;\n              break;\n            }\n            throw ERROR_FACTORY.create(\"delete-pending-registration\" /* ErrorCode.DELETE_PENDING_REGISTRATION */);\n          case 9:\n            if (!(entry.registrationStatus === 2 /* RequestStatus.COMPLETED */)) {\n              _context18.next = 18;\n              break;\n            }\n            if (navigator.onLine) {\n              _context18.next = 14;\n              break;\n            }\n            throw ERROR_FACTORY.create(\"app-offline\" /* ErrorCode.APP_OFFLINE */);\n          case 14:\n            _context18.next = 16;\n            return deleteInstallationRequest(appConfig, entry);\n          case 16:\n            _context18.next = 18;\n            return remove(appConfig);\n          case 18:\n          case \"end\":\n            return _context18.stop();\n        }\n      }\n    }, _callee18);\n  }));\n  return _deleteInstallations.apply(this, arguments);\n}\nfunction onIdChange(installations, callback) {\n  var appConfig = installations.appConfig;\n  addCallback(appConfig, callback);\n  return function () {\n    removeCallback(appConfig, callback);\n  };\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Returns an instance of {@link Installations} associated with the given\r\n * {@link @firebase/app#FirebaseApp} instance.\r\n * @param app - The {@link @firebase/app#FirebaseApp} instance.\r\n *\r\n * @public\r\n */\nfunction getInstallations() {\n  var app = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getApp();\n  var installationsImpl = _getProvider(app, 'installations').getImmediate();\n  return installationsImpl;\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction extractAppConfig(app) {\n  if (!app || !app.options) {\n    throw getMissingValueError('App Configuration');\n  }\n  if (!app.name) {\n    throw getMissingValueError('App Name');\n  }\n  // Required app config keys\n  var configKeys = ['projectId', 'apiKey', 'appId'];\n  for (var _i = 0, _configKeys = configKeys; _i < _configKeys.length; _i++) {\n    var keyName = _configKeys[_i];\n    if (!app.options[keyName]) {\n      throw getMissingValueError(keyName);\n    }\n  }\n  return {\n    appName: app.name,\n    projectId: app.options.projectId,\n    apiKey: app.options.apiKey,\n    appId: app.options.appId\n  };\n}\nfunction getMissingValueError(valueName) {\n  return ERROR_FACTORY.create(\"missing-app-config-values\" /* ErrorCode.MISSING_APP_CONFIG_VALUES */, {\n    valueName: valueName\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar INSTALLATIONS_NAME = 'installations';\nvar INSTALLATIONS_NAME_INTERNAL = 'installations-internal';\nvar publicFactory = function publicFactory(container) {\n  var app = container.getProvider('app').getImmediate();\n  // Throws if app isn't configured properly.\n  var appConfig = extractAppConfig(app);\n  var heartbeatServiceProvider = _getProvider(app, 'heartbeat');\n  var installationsImpl = {\n    app: app,\n    appConfig: appConfig,\n    heartbeatServiceProvider: heartbeatServiceProvider,\n    _delete: function _delete() {\n      return Promise.resolve();\n    }\n  };\n  return installationsImpl;\n};\nvar internalFactory = function internalFactory(container) {\n  var app = container.getProvider('app').getImmediate();\n  // Internal FIS instance relies on public FIS instance.\n  var installations = _getProvider(app, INSTALLATIONS_NAME).getImmediate();\n  var installationsInternal = {\n    getId: function getId() {\n      return _getId2(installations);\n    },\n    getToken: function getToken(forceRefresh) {\n      return _getToken2(installations, forceRefresh);\n    }\n  };\n  return installationsInternal;\n};\nfunction registerInstallations() {\n  _registerComponent(new Component(INSTALLATIONS_NAME, publicFactory, \"PUBLIC\" /* ComponentType.PUBLIC */));\n  _registerComponent(new Component(INSTALLATIONS_NAME_INTERNAL, internalFactory, \"PRIVATE\" /* ComponentType.PRIVATE */));\n}\n\n/**\r\n * The Firebase Installations Web SDK.\r\n * This SDK does not work in a Node.js environment.\r\n *\r\n * @packageDocumentation\r\n */\nregisterInstallations();\nregisterVersion(name, version);\n// BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\nregisterVersion(name, version, 'esm2017');\nexport { deleteInstallations, _getId2 as getId, getInstallations, _getToken2 as getToken, onIdChange };","map":{"version":3,"mappings":"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","names":["PENDING_TIMEOUT_MS","PACKAGE_VERSION","version","INTERNAL_AUTH_VERSION","INSTALLATIONS_API_URL","TOKEN_EXPIRATION_BUFFER","SERVICE","SERVICE_NAME","ERROR_DESCRIPTION_MAP","ERROR_FACTORY","ErrorFactory","isServerError","error","FirebaseError","code","includes","getInstallationsEndpoint","projectId","extractAuthTokenInfoFromResponse","response","token","requestStatus","expiresIn","getExpiresInFromResponseExpiresIn","creationTime","Date","now","getErrorFromResponse","_getErrorFromResponse","requestName","_context","json","responseJson","errorData","create","serverCode","serverMessage","message","serverStatus","status","getHeaders","apiKey","Headers","Accept","getHeadersWithAuth","appConfig","refreshToken","headers","append","getAuthorizationHeader","retryIfServerError","_retryIfServerError","fn","_context2","result","responseExpiresIn","Number","replace","createInstallationRequest","_createInstallationRequest","heartbeatServiceProvider","fid","endpoint","heartbeatService","getImmediate","optional","_context3","getHeartbeatsHeader","heartbeatsHeader","body","authVersion","appId","sdkVersion","request","method","JSON","stringify","fetch","ok","responseValue","registeredInstallationEntry","registrationStatus","authToken","sleep","ms","Promise","setTimeout","resolve","bufferToBase64UrlSafe","array","b64","btoa","String","fromCharCode","VALID_FID_PATTERN","INVALID_FID","generateFid","fidByteArray","Uint8Array","crypto","self","msCrypto","getRandomValues","encode","test","_a","b64String","substr","getKey","appName","fidChangeCallbacks","Map","fidChanged","key","callFidChangeCallbacks","broadcastFidChange","addCallback","callback","getBroadcastChannel","callbackSet","get","Set","set","add","removeCallback","delete","size","closeBroadcastChannel","callbacks","_step","_iterator","channel","postMessage","broadcastChannel","BroadcastChannel","onmessage","e","data","close","DATABASE_NAME","DATABASE_VERSION","OBJECT_STORE_NAME","dbPromise","getDbPromise","openDB","upgrade","db","oldVersion","createObjectStore","_set","value","_context4","tx","transaction","objectStore","oldValue","put","done","remove","_remove","_context5","update","_update","updateFn","_context6","store","newValue","undefined","getInstallationEntry","_getInstallationEntry","installations","_context7","installationEntry","updateOrCreateInstallationEntry","oldEntry","entryWithPromise","triggerRegistrationIfNecessary","registrationPromise","entry","clearTimedOutRequest","navigator","onLine","registrationPromiseWithError","reject","inProgressEntry","registrationTime","registerInstallation","waitUntilFidRegistration","_registerInstallation","_context8","customData","_waitUntilFidRegistration","_context9","updateInstallationRequest","_yield$getInstallatio","hasInstallationRequestTimedOut","generateAuthTokenRequest","_generateAuthTokenRequest","getGenerateAuthTokenEndpoint","_context10","installation","completedAuthToken","refreshAuthToken","_refreshAuthToken","tokenPromise","_args11","forceRefresh","_context11","isEntryRegistered","oldAuthToken","isAuthTokenValid","waitUntilAuthTokenRequest","makeAuthTokenRequestInProgressEntry","fetchAuthTokenFromServer","_waitUntilAuthTokenRequest","_context12","updateAuthTokenRequest","hasAuthTokenRequestTimedOut","Object","_fetchAuthTokenFromServer","_context13","updatedInstallationEntry","isAuthTokenExpired","inProgressAuthToken","requestTime","getId","_getId","installationsImpl","_context14","_yield$getInstallatio2","catch","console","getToken","_getToken","_args15","_context15","completeInstallationRegistration","_completeInstallationRegistration","_context16","_yield$getInstallatio3","deleteInstallationRequest","_deleteInstallationRequest","getDeleteEndpoint","_context17","deleteInstallations","_deleteInstallations","_context18","onIdChange","getInstallations","app","getApp","_getProvider","extractAppConfig","options","getMissingValueError","name","configKeys","keyName","valueName","INSTALLATIONS_NAME","INSTALLATIONS_NAME_INTERNAL","publicFactory","container","getProvider","_delete","internalFactory","installationsInternal","registerInstallations","_registerComponent","Component","registerVersion"],"sources":["/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@firebase/installations/src/util/constants.ts","/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@firebase/installations/src/util/errors.ts","/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@firebase/installations/src/functions/common.ts","/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@firebase/installations/src/functions/create-installation-request.ts","/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@firebase/installations/src/util/sleep.ts","/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@firebase/installations/src/helpers/buffer-to-base64-url-safe.ts","/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@firebase/installations/src/helpers/generate-fid.ts","/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@firebase/installations/src/util/get-key.ts","/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@firebase/installations/src/helpers/fid-changed.ts","/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@firebase/installations/src/helpers/idb-manager.ts","/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@firebase/installations/src/helpers/get-installation-entry.ts","/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@firebase/installations/src/functions/generate-auth-token-request.ts","/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@firebase/installations/src/helpers/refresh-auth-token.ts","/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@firebase/installations/src/api/get-id.ts","/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@firebase/installations/src/api/get-token.ts","/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@firebase/installations/src/functions/delete-installation-request.ts","/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@firebase/installations/src/api/delete-installations.ts","/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@firebase/installations/src/api/on-id-change.ts","/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@firebase/installations/src/api/get-installations.ts","/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@firebase/installations/src/helpers/extract-app-config.ts","/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@firebase/installations/src/functions/config.ts","/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@firebase/installations/src/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { version } from '../../package.json';\n\nexport const PENDING_TIMEOUT_MS = 10000;\n\nexport const PACKAGE_VERSION = `w:${version}`;\nexport const INTERNAL_AUTH_VERSION = 'FIS_v2';\n\nexport const INSTALLATIONS_API_URL =\n  'https://firebaseinstallations.googleapis.com/v1';\n\nexport const TOKEN_EXPIRATION_BUFFER = 60 * 60 * 1000; // One hour\n\nexport const SERVICE = 'installations';\nexport const SERVICE_NAME = 'Installations';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, FirebaseError } from '@firebase/util';\nimport { SERVICE, SERVICE_NAME } from './constants';\n\nexport const enum ErrorCode {\n  MISSING_APP_CONFIG_VALUES = 'missing-app-config-values',\n  NOT_REGISTERED = 'not-registered',\n  INSTALLATION_NOT_FOUND = 'installation-not-found',\n  REQUEST_FAILED = 'request-failed',\n  APP_OFFLINE = 'app-offline',\n  DELETE_PENDING_REGISTRATION = 'delete-pending-registration'\n}\n\nconst ERROR_DESCRIPTION_MAP: { readonly [key in ErrorCode]: string } = {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]:\n    'Missing App configuration value: \"{$valueName}\"',\n  [ErrorCode.NOT_REGISTERED]: 'Firebase Installation is not registered.',\n  [ErrorCode.INSTALLATION_NOT_FOUND]: 'Firebase Installation not found.',\n  [ErrorCode.REQUEST_FAILED]:\n    '{$requestName} request failed with error \"{$serverCode} {$serverStatus}: {$serverMessage}\"',\n  [ErrorCode.APP_OFFLINE]: 'Could not process request. Application offline.',\n  [ErrorCode.DELETE_PENDING_REGISTRATION]:\n    \"Can't delete installation while there is a pending registration request.\"\n};\n\ninterface ErrorParams {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]: {\n    valueName: string;\n  };\n  [ErrorCode.REQUEST_FAILED]: {\n    requestName: string;\n    [index: string]: string | number; // to make Typescript 3.8 happy\n  } & ServerErrorData;\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  SERVICE,\n  SERVICE_NAME,\n  ERROR_DESCRIPTION_MAP\n);\n\nexport interface ServerErrorData {\n  serverCode: number;\n  serverMessage: string;\n  serverStatus: string;\n}\n\nexport type ServerError = FirebaseError & { customData: ServerErrorData };\n\n/** Returns true if error is a FirebaseError that is based on an error from the server. */\nexport function isServerError(error: unknown): error is ServerError {\n  return (\n    error instanceof FirebaseError &&\n    error.code.includes(ErrorCode.REQUEST_FAILED)\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { GenerateAuthTokenResponse } from '../interfaces/api-response';\nimport {\n  CompletedAuthToken,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport {\n  INSTALLATIONS_API_URL,\n  INTERNAL_AUTH_VERSION\n} from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { AppConfig } from '../interfaces/installation-impl';\n\nexport function getInstallationsEndpoint({ projectId }: AppConfig): string {\n  return `${INSTALLATIONS_API_URL}/projects/${projectId}/installations`;\n}\n\nexport function extractAuthTokenInfoFromResponse(\n  response: GenerateAuthTokenResponse\n): CompletedAuthToken {\n  return {\n    token: response.token,\n    requestStatus: RequestStatus.COMPLETED,\n    expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),\n    creationTime: Date.now()\n  };\n}\n\nexport async function getErrorFromResponse(\n  requestName: string,\n  response: Response\n): Promise<FirebaseError> {\n  const responseJson: ErrorResponse = await response.json();\n  const errorData = responseJson.error;\n  return ERROR_FACTORY.create(ErrorCode.REQUEST_FAILED, {\n    requestName,\n    serverCode: errorData.code,\n    serverMessage: errorData.message,\n    serverStatus: errorData.status\n  });\n}\n\nexport function getHeaders({ apiKey }: AppConfig): Headers {\n  return new Headers({\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\n\nexport function getHeadersWithAuth(\n  appConfig: AppConfig,\n  { refreshToken }: RegisteredInstallationEntry\n): Headers {\n  const headers = getHeaders(appConfig);\n  headers.append('Authorization', getAuthorizationHeader(refreshToken));\n  return headers;\n}\n\nexport interface ErrorResponse {\n  error: {\n    code: number;\n    message: string;\n    status: string;\n  };\n}\n\n/**\n * Calls the passed in fetch wrapper and returns the response.\n * If the returned response has a status of 5xx, re-runs the function once and\n * returns the response.\n */\nexport async function retryIfServerError(\n  fn: () => Promise<Response>\n): Promise<Response> {\n  const result = await fn();\n\n  if (result.status >= 500 && result.status < 600) {\n    // Internal Server Error. Retry request.\n    return fn();\n  }\n\n  return result;\n}\n\nfunction getExpiresInFromResponseExpiresIn(responseExpiresIn: string): number {\n  // This works because the server will never respond with fractions of a second.\n  return Number(responseExpiresIn.replace('s', '000'));\n}\n\nfunction getAuthorizationHeader(refreshToken: string): string {\n  return `${INTERNAL_AUTH_VERSION} ${refreshToken}`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CreateInstallationResponse } from '../interfaces/api-response';\nimport {\n  InProgressInstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { INTERNAL_AUTH_VERSION, PACKAGE_VERSION } from '../util/constants';\nimport {\n  extractAuthTokenInfoFromResponse,\n  getErrorFromResponse,\n  getHeaders,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\n\nexport async function createInstallationRequest(\n  { appConfig, heartbeatServiceProvider }: FirebaseInstallationsImpl,\n  { fid }: InProgressInstallationEntry\n): Promise<RegisteredInstallationEntry> {\n  const endpoint = getInstallationsEndpoint(appConfig);\n\n  const headers = getHeaders(appConfig);\n\n  // If heartbeat service exists, add the heartbeat string to the header.\n  const heartbeatService = heartbeatServiceProvider.getImmediate({\n    optional: true\n  });\n  if (heartbeatService) {\n    const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();\n    if (heartbeatsHeader) {\n      headers.append('x-firebase-client', heartbeatsHeader);\n    }\n  }\n\n  const body = {\n    fid,\n    authVersion: INTERNAL_AUTH_VERSION,\n    appId: appConfig.appId,\n    sdkVersion: PACKAGE_VERSION\n  };\n\n  const request: RequestInit = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (response.ok) {\n    const responseValue: CreateInstallationResponse = await response.json();\n    const registeredInstallationEntry: RegisteredInstallationEntry = {\n      fid: responseValue.fid || fid,\n      registrationStatus: RequestStatus.COMPLETED,\n      refreshToken: responseValue.refreshToken,\n      authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)\n    };\n    return registeredInstallationEntry;\n  } else {\n    throw await getErrorFromResponse('Create Installation', response);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Returns a promise that resolves after given time passes. */\nexport function sleep(ms: number): Promise<void> {\n  return new Promise<void>(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function bufferToBase64UrlSafe(array: Uint8Array): string {\n  const b64 = btoa(String.fromCharCode(...array));\n  return b64.replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bufferToBase64UrlSafe } from './buffer-to-base64-url-safe';\n\nexport const VALID_FID_PATTERN = /^[cdef][\\w-]{21}$/;\nexport const INVALID_FID = '';\n\n/**\n * Generates a new FID using random values from Web Crypto API.\n * Returns an empty string if FID generation fails for any reason.\n */\nexport function generateFid(): string {\n  try {\n    // A valid FID has exactly 22 base64 characters, which is 132 bits, or 16.5\n    // bytes. our implementation generates a 17 byte array instead.\n    const fidByteArray = new Uint8Array(17);\n    const crypto =\n      self.crypto || (self as unknown as { msCrypto: Crypto }).msCrypto;\n    crypto.getRandomValues(fidByteArray);\n\n    // Replace the first 4 random bits with the constant FID header of 0b0111.\n    fidByteArray[0] = 0b01110000 + (fidByteArray[0] % 0b00010000);\n\n    const fid = encode(fidByteArray);\n\n    return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;\n  } catch {\n    // FID generation errored\n    return INVALID_FID;\n  }\n}\n\n/** Converts a FID Uint8Array to a base64 string representation. */\nfunction encode(fidByteArray: Uint8Array): string {\n  const b64String = bufferToBase64UrlSafe(fidByteArray);\n\n  // Remove the 23rd character that was added because of the extra 4 bits at the\n  // end of our 17 byte array, and the '=' padding.\n  return b64String.substr(0, 22);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppConfig } from '../interfaces/installation-impl';\n\n/** Returns a string key that can be used to identify the app. */\nexport function getKey(appConfig: AppConfig): string {\n  return `${appConfig.appName}!${appConfig.appId}`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getKey } from '../util/get-key';\nimport { AppConfig } from '../interfaces/installation-impl';\nimport { IdChangeCallbackFn } from '../api';\n\nconst fidChangeCallbacks: Map<string, Set<IdChangeCallbackFn>> = new Map();\n\n/**\n * Calls the onIdChange callbacks with the new FID value, and broadcasts the\n * change to other tabs.\n */\nexport function fidChanged(appConfig: AppConfig, fid: string): void {\n  const key = getKey(appConfig);\n\n  callFidChangeCallbacks(key, fid);\n  broadcastFidChange(key, fid);\n}\n\nexport function addCallback(\n  appConfig: AppConfig,\n  callback: IdChangeCallbackFn\n): void {\n  // Open the broadcast channel if it's not already open,\n  // to be able to listen to change events from other tabs.\n  getBroadcastChannel();\n\n  const key = getKey(appConfig);\n\n  let callbackSet = fidChangeCallbacks.get(key);\n  if (!callbackSet) {\n    callbackSet = new Set();\n    fidChangeCallbacks.set(key, callbackSet);\n  }\n  callbackSet.add(callback);\n}\n\nexport function removeCallback(\n  appConfig: AppConfig,\n  callback: IdChangeCallbackFn\n): void {\n  const key = getKey(appConfig);\n\n  const callbackSet = fidChangeCallbacks.get(key);\n\n  if (!callbackSet) {\n    return;\n  }\n\n  callbackSet.delete(callback);\n  if (callbackSet.size === 0) {\n    fidChangeCallbacks.delete(key);\n  }\n\n  // Close broadcast channel if there are no more callbacks.\n  closeBroadcastChannel();\n}\n\nfunction callFidChangeCallbacks(key: string, fid: string): void {\n  const callbacks = fidChangeCallbacks.get(key);\n  if (!callbacks) {\n    return;\n  }\n\n  for (const callback of callbacks) {\n    callback(fid);\n  }\n}\n\nfunction broadcastFidChange(key: string, fid: string): void {\n  const channel = getBroadcastChannel();\n  if (channel) {\n    channel.postMessage({ key, fid });\n  }\n  closeBroadcastChannel();\n}\n\nlet broadcastChannel: BroadcastChannel | null = null;\n/** Opens and returns a BroadcastChannel if it is supported by the browser. */\nfunction getBroadcastChannel(): BroadcastChannel | null {\n  if (!broadcastChannel && 'BroadcastChannel' in self) {\n    broadcastChannel = new BroadcastChannel('[Firebase] FID Change');\n    broadcastChannel.onmessage = e => {\n      callFidChangeCallbacks(e.data.key, e.data.fid);\n    };\n  }\n  return broadcastChannel;\n}\n\nfunction closeBroadcastChannel(): void {\n  if (fidChangeCallbacks.size === 0 && broadcastChannel) {\n    broadcastChannel.close();\n    broadcastChannel = null;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DBSchema, IDBPDatabase, openDB } from 'idb';\nimport { AppConfig } from '../interfaces/installation-impl';\nimport { InstallationEntry } from '../interfaces/installation-entry';\nimport { getKey } from '../util/get-key';\nimport { fidChanged } from './fid-changed';\n\nconst DATABASE_NAME = 'firebase-installations-database';\nconst DATABASE_VERSION = 1;\nconst OBJECT_STORE_NAME = 'firebase-installations-store';\n\ninterface InstallationsDB extends DBSchema {\n  'firebase-installations-store': {\n    key: string;\n    value: InstallationEntry | undefined;\n  };\n}\n\nlet dbPromise: Promise<IDBPDatabase<InstallationsDB>> | null = null;\nfunction getDbPromise(): Promise<IDBPDatabase<InstallationsDB>> {\n  if (!dbPromise) {\n    dbPromise = openDB(DATABASE_NAME, DATABASE_VERSION, {\n      upgrade: (db, oldVersion) => {\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) {\n          case 0:\n            db.createObjectStore(OBJECT_STORE_NAME);\n        }\n      }\n    });\n  }\n  return dbPromise;\n}\n\n/** Gets record(s) from the objectStore that match the given key. */\nexport async function get(\n  appConfig: AppConfig\n): Promise<InstallationEntry | undefined> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  return db\n    .transaction(OBJECT_STORE_NAME)\n    .objectStore(OBJECT_STORE_NAME)\n    .get(key) as Promise<InstallationEntry>;\n}\n\n/** Assigns or overwrites the record for the given key with the given value. */\nexport async function set<ValueType extends InstallationEntry>(\n  appConfig: AppConfig,\n  value: ValueType\n): Promise<ValueType> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  const objectStore = tx.objectStore(OBJECT_STORE_NAME);\n  const oldValue = (await objectStore.get(key)) as InstallationEntry;\n  await objectStore.put(value, key);\n  await tx.done;\n\n  if (!oldValue || oldValue.fid !== value.fid) {\n    fidChanged(appConfig, value.fid);\n  }\n\n  return value;\n}\n\n/** Removes record(s) from the objectStore that match the given key. */\nexport async function remove(appConfig: AppConfig): Promise<void> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).delete(key);\n  await tx.done;\n}\n\n/**\n * Atomically updates a record with the result of updateFn, which gets\n * called with the current value. If newValue is undefined, the record is\n * deleted instead.\n * @return Updated value\n */\nexport async function update<ValueType extends InstallationEntry | undefined>(\n  appConfig: AppConfig,\n  updateFn: (previousValue: InstallationEntry | undefined) => ValueType\n): Promise<ValueType> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  const store = tx.objectStore(OBJECT_STORE_NAME);\n  const oldValue: InstallationEntry | undefined = (await store.get(\n    key\n  )) as InstallationEntry;\n  const newValue = updateFn(oldValue);\n\n  if (newValue === undefined) {\n    await store.delete(key);\n  } else {\n    await store.put(newValue, key);\n  }\n  await tx.done;\n\n  if (newValue && (!oldValue || oldValue.fid !== newValue.fid)) {\n    fidChanged(appConfig, newValue.fid);\n  }\n\n  return newValue;\n}\n\nexport async function clear(): Promise<void> {\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).clear();\n  await tx.done;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createInstallationRequest } from '../functions/create-installation-request';\nimport {\n  AppConfig,\n  FirebaseInstallationsImpl\n} from '../interfaces/installation-impl';\nimport {\n  InProgressInstallationEntry,\n  InstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { PENDING_TIMEOUT_MS } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode, isServerError } from '../util/errors';\nimport { sleep } from '../util/sleep';\nimport { generateFid, INVALID_FID } from './generate-fid';\nimport { remove, set, update } from './idb-manager';\n\nexport interface InstallationEntryWithRegistrationPromise {\n  installationEntry: InstallationEntry;\n  /** Exist iff the installationEntry is not registered. */\n  registrationPromise?: Promise<RegisteredInstallationEntry>;\n}\n\n/**\n * Updates and returns the InstallationEntry from the database.\n * Also triggers a registration request if it is necessary and possible.\n */\nexport async function getInstallationEntry(\n  installations: FirebaseInstallationsImpl\n): Promise<InstallationEntryWithRegistrationPromise> {\n  let registrationPromise: Promise<RegisteredInstallationEntry> | undefined;\n\n  const installationEntry = await update(installations.appConfig, oldEntry => {\n    const installationEntry = updateOrCreateInstallationEntry(oldEntry);\n    const entryWithPromise = triggerRegistrationIfNecessary(\n      installations,\n      installationEntry\n    );\n    registrationPromise = entryWithPromise.registrationPromise;\n    return entryWithPromise.installationEntry;\n  });\n\n  if (installationEntry.fid === INVALID_FID) {\n    // FID generation failed. Waiting for the FID from the server.\n    return { installationEntry: await registrationPromise! };\n  }\n\n  return {\n    installationEntry,\n    registrationPromise\n  };\n}\n\n/**\n * Creates a new Installation Entry if one does not exist.\n * Also clears timed out pending requests.\n */\nfunction updateOrCreateInstallationEntry(\n  oldEntry: InstallationEntry | undefined\n): InstallationEntry {\n  const entry: InstallationEntry = oldEntry || {\n    fid: generateFid(),\n    registrationStatus: RequestStatus.NOT_STARTED\n  };\n\n  return clearTimedOutRequest(entry);\n}\n\n/**\n * If the Firebase Installation is not registered yet, this will trigger the\n * registration and return an InProgressInstallationEntry.\n *\n * If registrationPromise does not exist, the installationEntry is guaranteed\n * to be registered.\n */\nfunction triggerRegistrationIfNecessary(\n  installations: FirebaseInstallationsImpl,\n  installationEntry: InstallationEntry\n): InstallationEntryWithRegistrationPromise {\n  if (installationEntry.registrationStatus === RequestStatus.NOT_STARTED) {\n    if (!navigator.onLine) {\n      // Registration required but app is offline.\n      const registrationPromiseWithError = Promise.reject(\n        ERROR_FACTORY.create(ErrorCode.APP_OFFLINE)\n      );\n      return {\n        installationEntry,\n        registrationPromise: registrationPromiseWithError\n      };\n    }\n\n    // Try registering. Change status to IN_PROGRESS.\n    const inProgressEntry: InProgressInstallationEntry = {\n      fid: installationEntry.fid,\n      registrationStatus: RequestStatus.IN_PROGRESS,\n      registrationTime: Date.now()\n    };\n    const registrationPromise = registerInstallation(\n      installations,\n      inProgressEntry\n    );\n    return { installationEntry: inProgressEntry, registrationPromise };\n  } else if (\n    installationEntry.registrationStatus === RequestStatus.IN_PROGRESS\n  ) {\n    return {\n      installationEntry,\n      registrationPromise: waitUntilFidRegistration(installations)\n    };\n  } else {\n    return { installationEntry };\n  }\n}\n\n/** This will be executed only once for each new Firebase Installation. */\nasync function registerInstallation(\n  installations: FirebaseInstallationsImpl,\n  installationEntry: InProgressInstallationEntry\n): Promise<RegisteredInstallationEntry> {\n  try {\n    const registeredInstallationEntry = await createInstallationRequest(\n      installations,\n      installationEntry\n    );\n    return set(installations.appConfig, registeredInstallationEntry);\n  } catch (e) {\n    if (isServerError(e) && e.customData.serverCode === 409) {\n      // Server returned a \"FID can not be used\" error.\n      // Generate a new ID next time.\n      await remove(installations.appConfig);\n    } else {\n      // Registration failed. Set FID as not registered.\n      await set(installations.appConfig, {\n        fid: installationEntry.fid,\n        registrationStatus: RequestStatus.NOT_STARTED\n      });\n    }\n    throw e;\n  }\n}\n\n/** Call if FID registration is pending in another request. */\nasync function waitUntilFidRegistration(\n  installations: FirebaseInstallationsImpl\n): Promise<RegisteredInstallationEntry> {\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n\n  let entry: InstallationEntry = await updateInstallationRequest(\n    installations.appConfig\n  );\n  while (entry.registrationStatus === RequestStatus.IN_PROGRESS) {\n    // createInstallation request still in progress.\n    await sleep(100);\n\n    entry = await updateInstallationRequest(installations.appConfig);\n  }\n\n  if (entry.registrationStatus === RequestStatus.NOT_STARTED) {\n    // The request timed out or failed in a different call. Try again.\n    const { installationEntry, registrationPromise } =\n      await getInstallationEntry(installations);\n\n    if (registrationPromise) {\n      return registrationPromise;\n    } else {\n      // if there is no registrationPromise, entry is registered.\n      return installationEntry as RegisteredInstallationEntry;\n    }\n  }\n\n  return entry;\n}\n\n/**\n * Called only if there is a CreateInstallation request in progress.\n *\n * Updates the InstallationEntry in the DB based on the status of the\n * CreateInstallation request.\n *\n * Returns the updated InstallationEntry.\n */\nfunction updateInstallationRequest(\n  appConfig: AppConfig\n): Promise<InstallationEntry> {\n  return update(appConfig, oldEntry => {\n    if (!oldEntry) {\n      throw ERROR_FACTORY.create(ErrorCode.INSTALLATION_NOT_FOUND);\n    }\n    return clearTimedOutRequest(oldEntry);\n  });\n}\n\nfunction clearTimedOutRequest(entry: InstallationEntry): InstallationEntry {\n  if (hasInstallationRequestTimedOut(entry)) {\n    return {\n      fid: entry.fid,\n      registrationStatus: RequestStatus.NOT_STARTED\n    };\n  }\n\n  return entry;\n}\n\nfunction hasInstallationRequestTimedOut(\n  installationEntry: InstallationEntry\n): boolean {\n  return (\n    installationEntry.registrationStatus === RequestStatus.IN_PROGRESS &&\n    installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now()\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GenerateAuthTokenResponse } from '../interfaces/api-response';\nimport {\n  CompletedAuthToken,\n  RegisteredInstallationEntry\n} from '../interfaces/installation-entry';\nimport { PACKAGE_VERSION } from '../util/constants';\nimport {\n  extractAuthTokenInfoFromResponse,\n  getErrorFromResponse,\n  getHeadersWithAuth,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\nimport {\n  FirebaseInstallationsImpl,\n  AppConfig\n} from '../interfaces/installation-impl';\n\nexport async function generateAuthTokenRequest(\n  { appConfig, heartbeatServiceProvider }: FirebaseInstallationsImpl,\n  installationEntry: RegisteredInstallationEntry\n): Promise<CompletedAuthToken> {\n  const endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);\n\n  const headers = getHeadersWithAuth(appConfig, installationEntry);\n\n  // If heartbeat service exists, add the heartbeat string to the header.\n  const heartbeatService = heartbeatServiceProvider.getImmediate({\n    optional: true\n  });\n  if (heartbeatService) {\n    const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();\n    if (heartbeatsHeader) {\n      headers.append('x-firebase-client', heartbeatsHeader);\n    }\n  }\n\n  const body = {\n    installation: {\n      sdkVersion: PACKAGE_VERSION,\n      appId: appConfig.appId\n    }\n  };\n\n  const request: RequestInit = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (response.ok) {\n    const responseValue: GenerateAuthTokenResponse = await response.json();\n    const completedAuthToken: CompletedAuthToken =\n      extractAuthTokenInfoFromResponse(responseValue);\n    return completedAuthToken;\n  } else {\n    throw await getErrorFromResponse('Generate Auth Token', response);\n  }\n}\n\nfunction getGenerateAuthTokenEndpoint(\n  appConfig: AppConfig,\n  { fid }: RegisteredInstallationEntry\n): string {\n  return `${getInstallationsEndpoint(appConfig)}/${fid}/authTokens:generate`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { generateAuthTokenRequest } from '../functions/generate-auth-token-request';\nimport {\n  AppConfig,\n  FirebaseInstallationsImpl\n} from '../interfaces/installation-impl';\nimport {\n  AuthToken,\n  CompletedAuthToken,\n  InProgressAuthToken,\n  InstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { PENDING_TIMEOUT_MS, TOKEN_EXPIRATION_BUFFER } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode, isServerError } from '../util/errors';\nimport { sleep } from '../util/sleep';\nimport { remove, set, update } from './idb-manager';\n\n/**\n * Returns a valid authentication token for the installation. Generates a new\n * token if one doesn't exist, is expired or about to expire.\n *\n * Should only be called if the Firebase Installation is registered.\n */\nexport async function refreshAuthToken(\n  installations: FirebaseInstallationsImpl,\n  forceRefresh = false\n): Promise<CompletedAuthToken> {\n  let tokenPromise: Promise<CompletedAuthToken> | undefined;\n  const entry = await update(installations.appConfig, oldEntry => {\n    if (!isEntryRegistered(oldEntry)) {\n      throw ERROR_FACTORY.create(ErrorCode.NOT_REGISTERED);\n    }\n\n    const oldAuthToken = oldEntry.authToken;\n    if (!forceRefresh && isAuthTokenValid(oldAuthToken)) {\n      // There is a valid token in the DB.\n      return oldEntry;\n    } else if (oldAuthToken.requestStatus === RequestStatus.IN_PROGRESS) {\n      // There already is a token request in progress.\n      tokenPromise = waitUntilAuthTokenRequest(installations, forceRefresh);\n      return oldEntry;\n    } else {\n      // No token or token expired.\n      if (!navigator.onLine) {\n        throw ERROR_FACTORY.create(ErrorCode.APP_OFFLINE);\n      }\n\n      const inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);\n      tokenPromise = fetchAuthTokenFromServer(installations, inProgressEntry);\n      return inProgressEntry;\n    }\n  });\n\n  const authToken = tokenPromise\n    ? await tokenPromise\n    : (entry.authToken as CompletedAuthToken);\n  return authToken;\n}\n\n/**\n * Call only if FID is registered and Auth Token request is in progress.\n *\n * Waits until the current pending request finishes. If the request times out,\n * tries once in this thread as well.\n */\nasync function waitUntilAuthTokenRequest(\n  installations: FirebaseInstallationsImpl,\n  forceRefresh: boolean\n): Promise<CompletedAuthToken> {\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n\n  let entry = await updateAuthTokenRequest(installations.appConfig);\n  while (entry.authToken.requestStatus === RequestStatus.IN_PROGRESS) {\n    // generateAuthToken still in progress.\n    await sleep(100);\n\n    entry = await updateAuthTokenRequest(installations.appConfig);\n  }\n\n  const authToken = entry.authToken;\n  if (authToken.requestStatus === RequestStatus.NOT_STARTED) {\n    // The request timed out or failed in a different call. Try again.\n    return refreshAuthToken(installations, forceRefresh);\n  } else {\n    return authToken;\n  }\n}\n\n/**\n * Called only if there is a GenerateAuthToken request in progress.\n *\n * Updates the InstallationEntry in the DB based on the status of the\n * GenerateAuthToken request.\n *\n * Returns the updated InstallationEntry.\n */\nfunction updateAuthTokenRequest(\n  appConfig: AppConfig\n): Promise<RegisteredInstallationEntry> {\n  return update(appConfig, oldEntry => {\n    if (!isEntryRegistered(oldEntry)) {\n      throw ERROR_FACTORY.create(ErrorCode.NOT_REGISTERED);\n    }\n\n    const oldAuthToken = oldEntry.authToken;\n    if (hasAuthTokenRequestTimedOut(oldAuthToken)) {\n      return {\n        ...oldEntry,\n        authToken: { requestStatus: RequestStatus.NOT_STARTED }\n      };\n    }\n\n    return oldEntry;\n  });\n}\n\nasync function fetchAuthTokenFromServer(\n  installations: FirebaseInstallationsImpl,\n  installationEntry: RegisteredInstallationEntry\n): Promise<CompletedAuthToken> {\n  try {\n    const authToken = await generateAuthTokenRequest(\n      installations,\n      installationEntry\n    );\n    const updatedInstallationEntry: RegisteredInstallationEntry = {\n      ...installationEntry,\n      authToken\n    };\n    await set(installations.appConfig, updatedInstallationEntry);\n    return authToken;\n  } catch (e) {\n    if (\n      isServerError(e) &&\n      (e.customData.serverCode === 401 || e.customData.serverCode === 404)\n    ) {\n      // Server returned a \"FID not found\" or a \"Invalid authentication\" error.\n      // Generate a new ID next time.\n      await remove(installations.appConfig);\n    } else {\n      const updatedInstallationEntry: RegisteredInstallationEntry = {\n        ...installationEntry,\n        authToken: { requestStatus: RequestStatus.NOT_STARTED }\n      };\n      await set(installations.appConfig, updatedInstallationEntry);\n    }\n    throw e;\n  }\n}\n\nfunction isEntryRegistered(\n  installationEntry: InstallationEntry | undefined\n): installationEntry is RegisteredInstallationEntry {\n  return (\n    installationEntry !== undefined &&\n    installationEntry.registrationStatus === RequestStatus.COMPLETED\n  );\n}\n\nfunction isAuthTokenValid(authToken: AuthToken): boolean {\n  return (\n    authToken.requestStatus === RequestStatus.COMPLETED &&\n    !isAuthTokenExpired(authToken)\n  );\n}\n\nfunction isAuthTokenExpired(authToken: CompletedAuthToken): boolean {\n  const now = Date.now();\n  return (\n    now < authToken.creationTime ||\n    authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER\n  );\n}\n\n/** Returns an updated InstallationEntry with an InProgressAuthToken. */\nfunction makeAuthTokenRequestInProgressEntry(\n  oldEntry: RegisteredInstallationEntry\n): RegisteredInstallationEntry {\n  const inProgressAuthToken: InProgressAuthToken = {\n    requestStatus: RequestStatus.IN_PROGRESS,\n    requestTime: Date.now()\n  };\n  return {\n    ...oldEntry,\n    authToken: inProgressAuthToken\n  };\n}\n\nfunction hasAuthTokenRequestTimedOut(authToken: AuthToken): boolean {\n  return (\n    authToken.requestStatus === RequestStatus.IN_PROGRESS &&\n    authToken.requestTime + PENDING_TIMEOUT_MS < Date.now()\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getInstallationEntry } from '../helpers/get-installation-entry';\nimport { refreshAuthToken } from '../helpers/refresh-auth-token';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport { Installations } from '../interfaces/public-types';\n\n/**\n * Creates a Firebase Installation if there isn't one for the app and\n * returns the Installation ID.\n * @param installations - The `Installations` instance.\n *\n * @public\n */\nexport async function getId(installations: Installations): Promise<string> {\n  const installationsImpl = installations as FirebaseInstallationsImpl;\n  const { installationEntry, registrationPromise } = await getInstallationEntry(\n    installationsImpl\n  );\n\n  if (registrationPromise) {\n    registrationPromise.catch(console.error);\n  } else {\n    // If the installation is already registered, update the authentication\n    // token if needed.\n    refreshAuthToken(installationsImpl).catch(console.error);\n  }\n\n  return installationEntry.fid;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getInstallationEntry } from '../helpers/get-installation-entry';\nimport { refreshAuthToken } from '../helpers/refresh-auth-token';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport { Installations } from '../interfaces/public-types';\n\n/**\n * Returns a Firebase Installations auth token, identifying the current\n * Firebase Installation.\n * @param installations - The `Installations` instance.\n * @param forceRefresh - Force refresh regardless of token expiration.\n *\n * @public\n */\nexport async function getToken(\n  installations: Installations,\n  forceRefresh = false\n): Promise<string> {\n  const installationsImpl = installations as FirebaseInstallationsImpl;\n  await completeInstallationRegistration(installationsImpl);\n\n  // At this point we either have a Registered Installation in the DB, or we've\n  // already thrown an error.\n  const authToken = await refreshAuthToken(installationsImpl, forceRefresh);\n  return authToken.token;\n}\n\nasync function completeInstallationRegistration(\n  installations: FirebaseInstallationsImpl\n): Promise<void> {\n  const { registrationPromise } = await getInstallationEntry(installations);\n\n  if (registrationPromise) {\n    // A createInstallation request is in progress. Wait until it finishes.\n    await registrationPromise;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppConfig } from '../interfaces/installation-impl';\nimport { RegisteredInstallationEntry } from '../interfaces/installation-entry';\nimport {\n  getErrorFromResponse,\n  getHeadersWithAuth,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\n\nexport async function deleteInstallationRequest(\n  appConfig: AppConfig,\n  installationEntry: RegisteredInstallationEntry\n): Promise<void> {\n  const endpoint = getDeleteEndpoint(appConfig, installationEntry);\n\n  const headers = getHeadersWithAuth(appConfig, installationEntry);\n  const request: RequestInit = {\n    method: 'DELETE',\n    headers\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (!response.ok) {\n    throw await getErrorFromResponse('Delete Installation', response);\n  }\n}\n\nfunction getDeleteEndpoint(\n  appConfig: AppConfig,\n  { fid }: RegisteredInstallationEntry\n): string {\n  return `${getInstallationsEndpoint(appConfig)}/${fid}`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deleteInstallationRequest } from '../functions/delete-installation-request';\nimport { remove, update } from '../helpers/idb-manager';\nimport { RequestStatus } from '../interfaces/installation-entry';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport { Installations } from '../interfaces/public-types';\n\n/**\n * Deletes the Firebase Installation and all associated data.\n * @param installations - The `Installations` instance.\n *\n * @public\n */\nexport async function deleteInstallations(\n  installations: Installations\n): Promise<void> {\n  const { appConfig } = installations as FirebaseInstallationsImpl;\n\n  const entry = await update(appConfig, oldEntry => {\n    if (oldEntry && oldEntry.registrationStatus === RequestStatus.NOT_STARTED) {\n      // Delete the unregistered entry without sending a deleteInstallation request.\n      return undefined;\n    }\n    return oldEntry;\n  });\n\n  if (entry) {\n    if (entry.registrationStatus === RequestStatus.IN_PROGRESS) {\n      // Can't delete while trying to register.\n      throw ERROR_FACTORY.create(ErrorCode.DELETE_PENDING_REGISTRATION);\n    } else if (entry.registrationStatus === RequestStatus.COMPLETED) {\n      if (!navigator.onLine) {\n        throw ERROR_FACTORY.create(ErrorCode.APP_OFFLINE);\n      } else {\n        await deleteInstallationRequest(appConfig, entry);\n        await remove(appConfig);\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { addCallback, removeCallback } from '../helpers/fid-changed';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport { Installations } from '../interfaces/public-types';\n\n/**\n * An user defined callback function that gets called when Installations ID changes.\n *\n * @public\n */\nexport type IdChangeCallbackFn = (installationId: string) => void;\n/**\n * Unsubscribe a callback function previously added via {@link IdChangeCallbackFn}.\n *\n * @public\n */\nexport type IdChangeUnsubscribeFn = () => void;\n\n/**\n * Sets a new callback that will get called when Installation ID changes.\n * Returns an unsubscribe function that will remove the callback when called.\n * @param installations - The `Installations` instance.\n * @param callback - The callback function that is invoked when FID changes.\n * @returns A function that can be called to unsubscribe.\n *\n * @public\n */\nexport function onIdChange(\n  installations: Installations,\n  callback: IdChangeCallbackFn\n): IdChangeUnsubscribeFn {\n  const { appConfig } = installations as FirebaseInstallationsImpl;\n\n  addCallback(appConfig, callback);\n  return () => {\n    removeCallback(appConfig, callback);\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, getApp, _getProvider } from '@firebase/app';\nimport { Installations } from '../interfaces/public-types';\n\n/**\n * Returns an instance of {@link Installations} associated with the given\n * {@link @firebase/app#FirebaseApp} instance.\n * @param app - The {@link @firebase/app#FirebaseApp} instance.\n *\n * @public\n */\nexport function getInstallations(app: FirebaseApp = getApp()): Installations {\n  const installationsImpl = _getProvider(app, 'installations').getImmediate();\n  return installationsImpl;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, FirebaseOptions } from '@firebase/app';\nimport { FirebaseError } from '@firebase/util';\nimport { AppConfig } from '../interfaces/installation-impl';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nexport function extractAppConfig(app: FirebaseApp): AppConfig {\n  if (!app || !app.options) {\n    throw getMissingValueError('App Configuration');\n  }\n\n  if (!app.name) {\n    throw getMissingValueError('App Name');\n  }\n\n  // Required app config keys\n  const configKeys: Array<keyof FirebaseOptions> = [\n    'projectId',\n    'apiKey',\n    'appId'\n  ];\n\n  for (const keyName of configKeys) {\n    if (!app.options[keyName]) {\n      throw getMissingValueError(keyName);\n    }\n  }\n\n  return {\n    appName: app.name,\n    projectId: app.options.projectId!,\n    apiKey: app.options.apiKey!,\n    appId: app.options.appId!\n  };\n}\n\nfunction getMissingValueError(valueName: string): FirebaseError {\n  return ERROR_FACTORY.create(ErrorCode.MISSING_APP_CONFIG_VALUES, {\n    valueName\n  });\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _registerComponent, _getProvider } from '@firebase/app';\nimport {\n  Component,\n  ComponentType,\n  InstanceFactory,\n  ComponentContainer\n} from '@firebase/component';\nimport { getId, getToken } from '../api/index';\nimport { _FirebaseInstallationsInternal } from '../interfaces/public-types';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport { extractAppConfig } from '../helpers/extract-app-config';\n\nconst INSTALLATIONS_NAME = 'installations';\nconst INSTALLATIONS_NAME_INTERNAL = 'installations-internal';\n\nconst publicFactory: InstanceFactory<'installations'> = (\n  container: ComponentContainer\n) => {\n  const app = container.getProvider('app').getImmediate();\n  // Throws if app isn't configured properly.\n  const appConfig = extractAppConfig(app);\n  const heartbeatServiceProvider = _getProvider(app, 'heartbeat');\n\n  const installationsImpl: FirebaseInstallationsImpl = {\n    app,\n    appConfig,\n    heartbeatServiceProvider,\n    _delete: () => Promise.resolve()\n  };\n  return installationsImpl;\n};\n\nconst internalFactory: InstanceFactory<'installations-internal'> = (\n  container: ComponentContainer\n) => {\n  const app = container.getProvider('app').getImmediate();\n  // Internal FIS instance relies on public FIS instance.\n  const installations = _getProvider(app, INSTALLATIONS_NAME).getImmediate();\n\n  const installationsInternal: _FirebaseInstallationsInternal = {\n    getId: () => getId(installations),\n    getToken: (forceRefresh?: boolean) => getToken(installations, forceRefresh)\n  };\n  return installationsInternal;\n};\n\nexport function registerInstallations(): void {\n  _registerComponent(\n    new Component(INSTALLATIONS_NAME, publicFactory, ComponentType.PUBLIC)\n  );\n  _registerComponent(\n    new Component(\n      INSTALLATIONS_NAME_INTERNAL,\n      internalFactory,\n      ComponentType.PRIVATE\n    )\n  );\n}\n","/**\n * The Firebase Installations Web SDK.\n * This SDK does not work in a Node.js environment.\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { registerInstallations } from './functions/config';\nimport { registerVersion } from '@firebase/app';\nimport { name, version } from '../package.json';\n\nexport * from './api';\nexport * from './interfaces/public-types';\n\nregisterInstallations();\nregisterVersion(name, version);\n// BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\nregisterVersion(name, version, '__BUILD_TARGET__');\n"]},"metadata":{},"sourceType":"module"}