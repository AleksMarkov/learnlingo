{"ast":null,"code":"import _slicedToArray from \"/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _asyncToGenerator from \"/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _defineProperty from \"/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nvar _ERRORS;\nimport _regeneratorRuntime from \"/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@babel/runtime/regenerator/index.js\";\nimport { _getProvider, getApp, _registerComponent, registerVersion } from '@firebase/app';\nimport { Logger } from '@firebase/logger';\nimport { ErrorFactory, calculateBackoffMillis, FirebaseError, isIndexedDBAvailable, validateIndexedDBOpenable, isBrowserExtension, areCookiesEnabled, getModularInstance, deepEqual } from '@firebase/util';\nimport { Component } from '@firebase/component';\nimport '@firebase/installations';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Type constant for Firebase Analytics.\r\n */\nvar ANALYTICS_TYPE = 'analytics';\n// Key to attach FID to in gtag params.\nvar GA_FID_KEY = 'firebase_id';\nvar ORIGIN_KEY = 'origin';\nvar FETCH_TIMEOUT_MILLIS = 60 * 1000;\nvar DYNAMIC_CONFIG_URL = 'https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig';\nvar GTAG_URL = 'https://www.googletagmanager.com/gtag/js';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar logger = new Logger('@firebase/analytics');\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar ERRORS = (_ERRORS = {}, _defineProperty(_ERRORS, \"already-exists\" /* AnalyticsError.ALREADY_EXISTS */, 'A Firebase Analytics instance with the appId {$id} ' + ' already exists. ' + 'Only one Firebase Analytics instance can be created for each appId.'), _defineProperty(_ERRORS, \"already-initialized\" /* AnalyticsError.ALREADY_INITIALIZED */, 'initializeAnalytics() cannot be called again with different options than those ' + 'it was initially called with. It can be called again with the same options to ' + 'return the existing instance, or getAnalytics() can be used ' + 'to get a reference to the already-initialized instance.'), _defineProperty(_ERRORS, \"already-initialized-settings\" /* AnalyticsError.ALREADY_INITIALIZED_SETTINGS */, 'Firebase Analytics has already been initialized.' + 'settings() must be called before initializing any Analytics instance' + 'or it will have no effect.'), _defineProperty(_ERRORS, \"interop-component-reg-failed\" /* AnalyticsError.INTEROP_COMPONENT_REG_FAILED */, 'Firebase Analytics Interop Component failed to instantiate: {$reason}'), _defineProperty(_ERRORS, \"invalid-analytics-context\" /* AnalyticsError.INVALID_ANALYTICS_CONTEXT */, 'Firebase Analytics is not supported in this environment. ' + 'Wrap initialization of analytics in analytics.isSupported() ' + 'to prevent initialization in unsupported environments. Details: {$errorInfo}'), _defineProperty(_ERRORS, \"indexeddb-unavailable\" /* AnalyticsError.INDEXEDDB_UNAVAILABLE */, 'IndexedDB unavailable or restricted in this environment. ' + 'Wrap initialization of analytics in analytics.isSupported() ' + 'to prevent initialization in unsupported environments. Details: {$errorInfo}'), _defineProperty(_ERRORS, \"fetch-throttle\" /* AnalyticsError.FETCH_THROTTLE */, 'The config fetch request timed out while in an exponential backoff state.' + ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.'), _defineProperty(_ERRORS, \"config-fetch-failed\" /* AnalyticsError.CONFIG_FETCH_FAILED */, 'Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}'), _defineProperty(_ERRORS, \"no-api-key\" /* AnalyticsError.NO_API_KEY */, 'The \"apiKey\" field is empty in the local Firebase config. Firebase Analytics requires this field to' + 'contain a valid API key.'), _defineProperty(_ERRORS, \"no-app-id\" /* AnalyticsError.NO_APP_ID */, 'The \"appId\" field is empty in the local Firebase config. Firebase Analytics requires this field to' + 'contain a valid app ID.'), _defineProperty(_ERRORS, \"no-client-id\" /* AnalyticsError.NO_CLIENT_ID */, 'The \"client_id\" field is empty.'), _defineProperty(_ERRORS, \"invalid-gtag-resource\" /* AnalyticsError.INVALID_GTAG_RESOURCE */, 'Trusted Types detected an invalid gtag resource: {$gtagURL}.'), _ERRORS);\nvar ERROR_FACTORY = new ErrorFactory('analytics', 'Analytics', ERRORS);\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Verifies and creates a TrustedScriptURL.\r\n */\nfunction createGtagTrustedTypesScriptURL(url) {\n  if (!url.startsWith(GTAG_URL)) {\n    var err = ERROR_FACTORY.create(\"invalid-gtag-resource\" /* AnalyticsError.INVALID_GTAG_RESOURCE */, {\n      gtagURL: url\n    });\n    logger.warn(err.message);\n    return '';\n  }\n  return url;\n}\n/**\r\n * Makeshift polyfill for Promise.allSettled(). Resolves when all promises\r\n * have either resolved or rejected.\r\n *\r\n * @param promises Array of promises to wait for.\r\n */\nfunction promiseAllSettled(promises) {\n  return Promise.all(promises.map(function (promise) {\n    return promise.catch(function (e) {\n      return e;\n    });\n  }));\n}\n/**\r\n * Creates a TrustedTypePolicy object that implements the rules passed as policyOptions.\r\n *\r\n * @param policyName A string containing the name of the policy\r\n * @param policyOptions Object containing implementations of instance methods for TrustedTypesPolicy, see {@link https://developer.mozilla.org/en-US/docs/Web/API/TrustedTypePolicy#instance_methods\r\n * | the TrustedTypePolicy reference documentation}.\r\n */\nfunction createTrustedTypesPolicy(policyName, policyOptions) {\n  // Create a TrustedTypes policy that we can use for updating src\n  // properties\n  var trustedTypesPolicy;\n  if (window.trustedTypes) {\n    trustedTypesPolicy = window.trustedTypes.createPolicy(policyName, policyOptions);\n  }\n  return trustedTypesPolicy;\n}\n/**\r\n * Inserts gtag script tag into the page to asynchronously download gtag.\r\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\r\n */\nfunction insertScriptTag(dataLayerName, measurementId) {\n  var trustedTypesPolicy = createTrustedTypesPolicy('firebase-js-sdk-policy', {\n    createScriptURL: createGtagTrustedTypesScriptURL\n  });\n  var script = document.createElement('script');\n  // We are not providing an analyticsId in the URL because it would trigger a `page_view`\n  // without fid. We will initialize ga-id using gtag (config) command together with fid.\n  var gtagScriptURL = \"\".concat(GTAG_URL, \"?l=\").concat(dataLayerName, \"&id=\").concat(measurementId);\n  script.src = trustedTypesPolicy ? trustedTypesPolicy === null || trustedTypesPolicy === void 0 ? void 0 : trustedTypesPolicy.createScriptURL(gtagScriptURL) : gtagScriptURL;\n  script.async = true;\n  document.head.appendChild(script);\n}\n/**\r\n * Get reference to, or create, global datalayer.\r\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\r\n */\nfunction getOrCreateDataLayer(dataLayerName) {\n  // Check for existing dataLayer and create if needed.\n  var dataLayer = [];\n  if (Array.isArray(window[dataLayerName])) {\n    dataLayer = window[dataLayerName];\n  } else {\n    window[dataLayerName] = dataLayer;\n  }\n  return dataLayer;\n}\n/**\r\n * Wrapped gtag logic when gtag is called with 'config' command.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer.\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\r\n * @param measurementId GA Measurement ID to set config for.\r\n * @param gtagParams Gtag config params to set.\r\n */\nfunction gtagOnConfig(_x, _x2, _x3, _x4, _x5, _x6) {\n  return _gtagOnConfig.apply(this, arguments);\n}\n/**\r\n * Wrapped gtag logic when gtag is called with 'event' command.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer.\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementId GA Measurement ID to log event to.\r\n * @param gtagParams Params to log with this event.\r\n */\nfunction _gtagOnConfig() {\n  _gtagOnConfig = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, measurementId, gtagParams) {\n    var correspondingAppId, dynamicConfigResults, foundConfig;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            // If config is already fetched, we know the appId and can use it to look up what FID promise we\n            /// are waiting for, and wait only on that one.\n            correspondingAppId = measurementIdToAppId[measurementId];\n            _context2.prev = 1;\n            if (!correspondingAppId) {\n              _context2.next = 7;\n              break;\n            }\n            _context2.next = 5;\n            return initializationPromisesMap[correspondingAppId];\n          case 5:\n            _context2.next = 14;\n            break;\n          case 7:\n            _context2.next = 9;\n            return promiseAllSettled(dynamicConfigPromisesList);\n          case 9:\n            dynamicConfigResults = _context2.sent;\n            foundConfig = dynamicConfigResults.find(function (config) {\n              return config.measurementId === measurementId;\n            });\n            if (!foundConfig) {\n              _context2.next = 14;\n              break;\n            }\n            _context2.next = 14;\n            return initializationPromisesMap[foundConfig.appId];\n          case 14:\n            _context2.next = 19;\n            break;\n          case 16:\n            _context2.prev = 16;\n            _context2.t0 = _context2[\"catch\"](1);\n            logger.error(_context2.t0);\n          case 19:\n            gtagCore(\"config\" /* GtagCommand.CONFIG */, measurementId, gtagParams);\n          case 20:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[1, 16]]);\n  }));\n  return _gtagOnConfig.apply(this, arguments);\n}\nfunction gtagOnEvent(_x7, _x8, _x9, _x10, _x11) {\n  return _gtagOnEvent.apply(this, arguments);\n}\n/**\r\n * Wraps a standard gtag function with extra code to wait for completion of\r\n * relevant initialization promises before sending requests.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer.\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\r\n */\nfunction _gtagOnEvent() {\n  _gtagOnEvent = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementId, gtagParams) {\n    var initializationPromisesToWaitFor, gaSendToList, dynamicConfigResults, _iterator, _step, _loop, _ret;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            initializationPromisesToWaitFor = []; // If there's a 'send_to' param, check if any ID specified matches\n            // an initializeIds() promise we are waiting for.\n            if (!(gtagParams && gtagParams['send_to'])) {\n              _context3.next = 26;\n              break;\n            }\n            gaSendToList = gtagParams['send_to']; // Make it an array if is isn't, so it can be dealt with the same way.\n            if (!Array.isArray(gaSendToList)) {\n              gaSendToList = [gaSendToList];\n            }\n            // Checking 'send_to' fields requires having all measurement ID results back from\n            // the dynamic config fetch.\n            _context3.next = 7;\n            return promiseAllSettled(dynamicConfigPromisesList);\n          case 7:\n            dynamicConfigResults = _context3.sent;\n            _iterator = _createForOfIteratorHelper(gaSendToList);\n            _context3.prev = 9;\n            _loop = function _loop() {\n              var sendToId = _step.value;\n              // Any fetched dynamic measurement ID that matches this 'send_to' ID\n              var foundConfig = dynamicConfigResults.find(function (config) {\n                return config.measurementId === sendToId;\n              });\n              var initializationPromise = foundConfig && initializationPromisesMap[foundConfig.appId];\n              if (initializationPromise) {\n                initializationPromisesToWaitFor.push(initializationPromise);\n              } else {\n                // Found an item in 'send_to' that is not associated\n                // directly with an FID, possibly a group.  Empty this array,\n                // exit the loop early, and let it get populated below.\n                initializationPromisesToWaitFor = [];\n                return \"break\";\n              }\n            };\n            _iterator.s();\n          case 12:\n            if ((_step = _iterator.n()).done) {\n              _context3.next = 18;\n              break;\n            }\n            _ret = _loop();\n            if (!(_ret === \"break\")) {\n              _context3.next = 16;\n              break;\n            }\n            return _context3.abrupt(\"break\", 18);\n          case 16:\n            _context3.next = 12;\n            break;\n          case 18:\n            _context3.next = 23;\n            break;\n          case 20:\n            _context3.prev = 20;\n            _context3.t0 = _context3[\"catch\"](9);\n            _iterator.e(_context3.t0);\n          case 23:\n            _context3.prev = 23;\n            _iterator.f();\n            return _context3.finish(23);\n          case 26:\n            // This will be unpopulated if there was no 'send_to' field , or\n            // if not all entries in the 'send_to' field could be mapped to\n            // a FID. In these cases, wait on all pending initialization promises.\n            if (initializationPromisesToWaitFor.length === 0) {\n              /* eslint-disable-next-line @typescript-eslint/no-floating-promises */\n              initializationPromisesToWaitFor = Object.values(initializationPromisesMap);\n            }\n            // Run core gtag function with args after all relevant initialization\n            // promises have been resolved.\n            _context3.next = 29;\n            return Promise.all(initializationPromisesToWaitFor);\n          case 29:\n            // Workaround for http://b/141370449 - third argument cannot be undefined.\n            gtagCore(\"event\" /* GtagCommand.EVENT */, measurementId, gtagParams || {});\n            _context3.next = 35;\n            break;\n          case 32:\n            _context3.prev = 32;\n            _context3.t1 = _context3[\"catch\"](0);\n            logger.error(_context3.t1);\n          case 35:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[0, 32], [9, 20, 23, 26]]);\n  }));\n  return _gtagOnEvent.apply(this, arguments);\n}\nfunction wrapGtag(gtagCore,\n/**\r\n * Allows wrapped gtag calls to wait on whichever initialization promises are required,\r\n * depending on the contents of the gtag params' `send_to` field, if any.\r\n */\ninitializationPromisesMap,\n/**\r\n * Wrapped gtag calls sometimes require all dynamic config fetches to have returned\r\n * before determining what initialization promises (which include FIDs) to wait for.\r\n */\ndynamicConfigPromisesList,\n/**\r\n * Wrapped gtag config calls can narrow down which initialization promise (with FID)\r\n * to wait for if the measurementId is already fetched, by getting the corresponding appId,\r\n * which is the key for the initialization promises map.\r\n */\nmeasurementIdToAppId) {\n  /**\r\n   * Wrapper around gtag that ensures FID is sent with gtag calls.\r\n   * @param command Gtag command type.\r\n   * @param idOrNameOrParams Measurement ID if command is EVENT/CONFIG, params if command is SET.\r\n   * @param gtagParams Params if event is EVENT/CONFIG.\r\n   */\n  function gtagWrapper(_x12) {\n    return _gtagWrapper.apply(this, arguments);\n  }\n  function _gtagWrapper() {\n    _gtagWrapper = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(command) {\n      var _len,\n        args,\n        _key,\n        measurementId,\n        gtagParams,\n        _measurementId,\n        _gtagParams,\n        consentAction,\n        _gtagParams2,\n        _measurementId2,\n        fieldName,\n        callback,\n        customParams,\n        _args2 = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              for (_len = _args2.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n                args[_key - 1] = _args2[_key];\n              }\n              if (!(command === \"event\" /* GtagCommand.EVENT */)) {\n                _context.next = 8;\n                break;\n              }\n              measurementId = args[0], gtagParams = args[1]; // If EVENT, second arg must be measurementId.\n              _context.next = 6;\n              return gtagOnEvent(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementId, gtagParams);\n            case 6:\n              _context.next = 15;\n              break;\n            case 8:\n              if (!(command === \"config\" /* GtagCommand.CONFIG */)) {\n                _context.next = 14;\n                break;\n              }\n              _measurementId = args[0], _gtagParams = args[1]; // If CONFIG, second arg must be measurementId.\n              _context.next = 12;\n              return gtagOnConfig(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, _measurementId, _gtagParams);\n            case 12:\n              _context.next = 15;\n              break;\n            case 14:\n              if (command === \"consent\" /* GtagCommand.CONSENT */) {\n                consentAction = args[0], _gtagParams2 = args[1]; // consentAction can be one of 'default' or 'update'.\n                gtagCore(\"consent\" /* GtagCommand.CONSENT */, consentAction, _gtagParams2);\n              } else if (command === \"get\" /* GtagCommand.GET */) {\n                _measurementId2 = args[0], fieldName = args[1], callback = args[2];\n                gtagCore(\"get\" /* GtagCommand.GET */, _measurementId2, fieldName, callback);\n              } else if (command === \"set\" /* GtagCommand.SET */) {\n                customParams = args[0]; // If SET, second arg must be params.\n                gtagCore(\"set\" /* GtagCommand.SET */, customParams);\n              } else {\n                gtagCore.apply(void 0, [command].concat(args));\n              }\n            case 15:\n              _context.next = 20;\n              break;\n            case 17:\n              _context.prev = 17;\n              _context.t0 = _context[\"catch\"](0);\n              logger.error(_context.t0);\n            case 20:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 17]]);\n    }));\n    return _gtagWrapper.apply(this, arguments);\n  }\n  return gtagWrapper;\n}\n/**\r\n * Creates global gtag function or wraps existing one if found.\r\n * This wrapped function attaches Firebase instance ID (FID) to gtag 'config' and\r\n * 'event' calls that belong to the GAID associated with this Firebase instance.\r\n *\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\r\n * @param dataLayerName Name of global GA datalayer array.\r\n * @param gtagFunctionName Name of global gtag function (\"gtag\" if not user-specified).\r\n */\nfunction wrapOrCreateGtag(initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, dataLayerName, gtagFunctionName) {\n  // Create a basic core gtag function\n  var gtagCore = function gtagCore() {\n    for (var _len2 = arguments.length, _args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      _args[_key2] = arguments[_key2];\n    }\n    // Must push IArguments object, not an array.\n    window[dataLayerName].push(arguments);\n  };\n  // Replace it with existing one if found\n  if (window[gtagFunctionName] && typeof window[gtagFunctionName] === 'function') {\n    // @ts-ignore\n    gtagCore = window[gtagFunctionName];\n  }\n  window[gtagFunctionName] = wrapGtag(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId);\n  return {\n    gtagCore: gtagCore,\n    wrappedGtag: window[gtagFunctionName]\n  };\n}\n/**\r\n * Returns the script tag in the DOM matching both the gtag url pattern\r\n * and the provided data layer name.\r\n */\nfunction findGtagScriptOnPage(dataLayerName) {\n  var scriptTags = window.document.getElementsByTagName('script');\n  for (var _i = 0, _Object$values = Object.values(scriptTags); _i < _Object$values.length; _i++) {\n    var tag = _Object$values[_i];\n    if (tag.src && tag.src.includes(GTAG_URL) && tag.src.includes(dataLayerName)) {\n      return tag;\n    }\n  }\n  return null;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Backoff factor for 503 errors, which we want to be conservative about\r\n * to avoid overloading servers. Each retry interval will be\r\n * BASE_INTERVAL_MILLIS * LONG_RETRY_FACTOR ^ retryCount, so the second one\r\n * will be ~30 seconds (with fuzzing).\r\n */\nvar LONG_RETRY_FACTOR = 30;\n/**\r\n * Base wait interval to multiplied by backoffFactor^backoffCount.\r\n */\nvar BASE_INTERVAL_MILLIS = 1000;\n/**\r\n * Stubbable retry data storage class.\r\n */\nvar RetryData = /*#__PURE__*/function () {\n  function RetryData() {\n    var throttleMetadata = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var intervalMillis = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : BASE_INTERVAL_MILLIS;\n    _classCallCheck(this, RetryData);\n    this.throttleMetadata = throttleMetadata;\n    this.intervalMillis = intervalMillis;\n  }\n  _createClass(RetryData, [{\n    key: \"getThrottleMetadata\",\n    value: function getThrottleMetadata(appId) {\n      return this.throttleMetadata[appId];\n    }\n  }, {\n    key: \"setThrottleMetadata\",\n    value: function setThrottleMetadata(appId, metadata) {\n      this.throttleMetadata[appId] = metadata;\n    }\n  }, {\n    key: \"deleteThrottleMetadata\",\n    value: function deleteThrottleMetadata(appId) {\n      delete this.throttleMetadata[appId];\n    }\n  }]);\n  return RetryData;\n}();\nvar defaultRetryData = new RetryData();\n/**\r\n * Set GET request headers.\r\n * @param apiKey App API key.\r\n */\nfunction getHeaders(apiKey) {\n  return new Headers({\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\n/**\r\n * Fetches dynamic config from backend.\r\n * @param app Firebase app to fetch config for.\r\n */\nfunction fetchDynamicConfig(_x13) {\n  return _fetchDynamicConfig.apply(this, arguments);\n}\n/**\r\n * Fetches dynamic config from backend, retrying if failed.\r\n * @param app Firebase app to fetch config for.\r\n */\nfunction _fetchDynamicConfig() {\n  _fetchDynamicConfig = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(appFields) {\n    var _a, appId, apiKey, request, appUrl, response, errorMessage, jsonResponse;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            appId = appFields.appId, apiKey = appFields.apiKey;\n            request = {\n              method: 'GET',\n              headers: getHeaders(apiKey)\n            };\n            appUrl = DYNAMIC_CONFIG_URL.replace('{app-id}', appId);\n            _context4.next = 5;\n            return fetch(appUrl, request);\n          case 5:\n            response = _context4.sent;\n            if (!(response.status !== 200 && response.status !== 304)) {\n              _context4.next = 18;\n              break;\n            }\n            errorMessage = '';\n            _context4.prev = 8;\n            _context4.next = 11;\n            return response.json();\n          case 11:\n            jsonResponse = _context4.sent;\n            if ((_a = jsonResponse.error) === null || _a === void 0 ? void 0 : _a.message) {\n              errorMessage = jsonResponse.error.message;\n            }\n            _context4.next = 17;\n            break;\n          case 15:\n            _context4.prev = 15;\n            _context4.t0 = _context4[\"catch\"](8);\n          case 17:\n            throw ERROR_FACTORY.create(\"config-fetch-failed\" /* AnalyticsError.CONFIG_FETCH_FAILED */, {\n              httpStatus: response.status,\n              responseMessage: errorMessage\n            });\n          case 18:\n            return _context4.abrupt(\"return\", response.json());\n          case 19:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, null, [[8, 15]]);\n  }));\n  return _fetchDynamicConfig.apply(this, arguments);\n}\nfunction fetchDynamicConfigWithRetry(_x14) {\n  return _fetchDynamicConfigWithRetry.apply(this, arguments);\n}\n/**\r\n * Runs one retry attempt.\r\n * @param appFields Necessary app config fields.\r\n * @param throttleMetadata Ongoing metadata to determine throttling times.\r\n * @param signal Abort signal.\r\n */\nfunction _fetchDynamicConfigWithRetry() {\n  _fetchDynamicConfigWithRetry = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(app) {\n    var retryData,\n      timeoutMillis,\n      _app$options,\n      appId,\n      apiKey,\n      measurementId,\n      throttleMetadata,\n      signal,\n      _args7 = arguments;\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            retryData = _args7.length > 1 && _args7[1] !== undefined ? _args7[1] : defaultRetryData;\n            timeoutMillis = _args7.length > 2 ? _args7[2] : undefined;\n            _app$options = app.options, appId = _app$options.appId, apiKey = _app$options.apiKey, measurementId = _app$options.measurementId;\n            if (appId) {\n              _context6.next = 5;\n              break;\n            }\n            throw ERROR_FACTORY.create(\"no-app-id\" /* AnalyticsError.NO_APP_ID */);\n          case 5:\n            if (apiKey) {\n              _context6.next = 9;\n              break;\n            }\n            if (!measurementId) {\n              _context6.next = 8;\n              break;\n            }\n            return _context6.abrupt(\"return\", {\n              measurementId: measurementId,\n              appId: appId\n            });\n          case 8:\n            throw ERROR_FACTORY.create(\"no-api-key\" /* AnalyticsError.NO_API_KEY */);\n          case 9:\n            throttleMetadata = retryData.getThrottleMetadata(appId) || {\n              backoffCount: 0,\n              throttleEndTimeMillis: Date.now()\n            };\n            signal = new AnalyticsAbortSignal();\n            setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n              return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n                while (1) {\n                  switch (_context5.prev = _context5.next) {\n                    case 0:\n                      // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\n                      signal.abort();\n                    case 1:\n                    case \"end\":\n                      return _context5.stop();\n                  }\n                }\n              }, _callee5);\n            })), timeoutMillis !== undefined ? timeoutMillis : FETCH_TIMEOUT_MILLIS);\n            return _context6.abrupt(\"return\", attemptFetchDynamicConfigWithRetry({\n              appId: appId,\n              apiKey: apiKey,\n              measurementId: measurementId\n            }, throttleMetadata, signal, retryData));\n          case 13:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n  return _fetchDynamicConfigWithRetry.apply(this, arguments);\n}\nfunction attemptFetchDynamicConfigWithRetry(_x15, _x16, _x17) {\n  return _attemptFetchDynamicConfigWithRetry.apply(this, arguments);\n}\n/**\r\n * Supports waiting on a backoff by:\r\n *\r\n * <ul>\r\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\r\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\r\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\r\n *       request appear the same.</li>\r\n * </ul>\r\n *\r\n * <p>Visible for testing.\r\n */\nfunction _attemptFetchDynamicConfigWithRetry() {\n  _attemptFetchDynamicConfigWithRetry = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(appFields, _ref, signal) {\n    var throttleEndTimeMillis,\n      backoffCount,\n      retryData,\n      _a,\n      appId,\n      measurementId,\n      response,\n      error,\n      backoffMillis,\n      throttleMetadata,\n      _args8 = arguments;\n    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            throttleEndTimeMillis = _ref.throttleEndTimeMillis, backoffCount = _ref.backoffCount;\n            retryData = _args8.length > 3 && _args8[3] !== undefined ? _args8[3] : defaultRetryData;\n            appId = appFields.appId, measurementId = appFields.measurementId; // Starts with a (potentially zero) timeout to support resumption from stored state.\n            // Ensures the throttle end time is honored if the last attempt timed out.\n            // Note the SDK will never make a request if the fetch timeout expires at this point.\n            _context7.prev = 3;\n            _context7.next = 6;\n            return setAbortableTimeout(signal, throttleEndTimeMillis);\n          case 6:\n            _context7.next = 14;\n            break;\n          case 8:\n            _context7.prev = 8;\n            _context7.t0 = _context7[\"catch\"](3);\n            if (!measurementId) {\n              _context7.next = 13;\n              break;\n            }\n            logger.warn(\"Timed out fetching this Firebase app's measurement ID from the server.\" + \" Falling back to the measurement ID \".concat(measurementId) + \" provided in the \\\"measurementId\\\" field in the local Firebase config. [\".concat(_context7.t0 === null || _context7.t0 === void 0 ? void 0 : _context7.t0.message, \"]\"));\n            return _context7.abrupt(\"return\", {\n              appId: appId,\n              measurementId: measurementId\n            });\n          case 13:\n            throw _context7.t0;\n          case 14:\n            _context7.prev = 14;\n            _context7.next = 17;\n            return fetchDynamicConfig(appFields);\n          case 17:\n            response = _context7.sent;\n            // Note the SDK only clears throttle state if response is success or non-retriable.\n            retryData.deleteThrottleMetadata(appId);\n            return _context7.abrupt(\"return\", response);\n          case 22:\n            _context7.prev = 22;\n            _context7.t1 = _context7[\"catch\"](14);\n            error = _context7.t1;\n            if (isRetriableError(error)) {\n              _context7.next = 33;\n              break;\n            }\n            retryData.deleteThrottleMetadata(appId);\n            if (!measurementId) {\n              _context7.next = 32;\n              break;\n            }\n            logger.warn(\"Failed to fetch this Firebase app's measurement ID from the server.\" + \" Falling back to the measurement ID \".concat(measurementId) + \" provided in the \\\"measurementId\\\" field in the local Firebase config. [\".concat(error === null || error === void 0 ? void 0 : error.message, \"]\"));\n            return _context7.abrupt(\"return\", {\n              appId: appId,\n              measurementId: measurementId\n            });\n          case 32:\n            throw _context7.t1;\n          case 33:\n            backoffMillis = Number((_a = error === null || error === void 0 ? void 0 : error.customData) === null || _a === void 0 ? void 0 : _a.httpStatus) === 503 ? calculateBackoffMillis(backoffCount, retryData.intervalMillis, LONG_RETRY_FACTOR) : calculateBackoffMillis(backoffCount, retryData.intervalMillis); // Increments backoff state.\n            throttleMetadata = {\n              throttleEndTimeMillis: Date.now() + backoffMillis,\n              backoffCount: backoffCount + 1\n            }; // Persists state.\n            retryData.setThrottleMetadata(appId, throttleMetadata);\n            logger.debug(\"Calling attemptFetch again in \".concat(backoffMillis, \" millis\"));\n            return _context7.abrupt(\"return\", attemptFetchDynamicConfigWithRetry(appFields, throttleMetadata, signal, retryData));\n          case 38:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7, null, [[3, 8], [14, 22]]);\n  }));\n  return _attemptFetchDynamicConfigWithRetry.apply(this, arguments);\n}\nfunction setAbortableTimeout(signal, throttleEndTimeMillis) {\n  return new Promise(function (resolve, reject) {\n    // Derives backoff from given end time, normalizing negative numbers to zero.\n    var backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\n    var timeout = setTimeout(resolve, backoffMillis);\n    // Adds listener, rather than sets onabort, because signal is a shared object.\n    signal.addEventListener(function () {\n      clearTimeout(timeout);\n      // If the request completes before this timeout, the rejection has no effect.\n      reject(ERROR_FACTORY.create(\"fetch-throttle\" /* AnalyticsError.FETCH_THROTTLE */, {\n        throttleEndTimeMillis: throttleEndTimeMillis\n      }));\n    });\n  });\n}\n/**\r\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\r\n */\nfunction isRetriableError(e) {\n  if (!(e instanceof FirebaseError) || !e.customData) {\n    return false;\n  }\n  // Uses string index defined by ErrorData, which FirebaseError implements.\n  var httpStatus = Number(e.customData['httpStatus']);\n  return httpStatus === 429 || httpStatus === 500 || httpStatus === 503 || httpStatus === 504;\n}\n/**\r\n * Shims a minimal AbortSignal (copied from Remote Config).\r\n *\r\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\r\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\r\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\r\n * swapped out if/when we do.\r\n */\nvar AnalyticsAbortSignal = /*#__PURE__*/function () {\n  function AnalyticsAbortSignal() {\n    _classCallCheck(this, AnalyticsAbortSignal);\n    this.listeners = [];\n  }\n  _createClass(AnalyticsAbortSignal, [{\n    key: \"addEventListener\",\n    value: function addEventListener(listener) {\n      this.listeners.push(listener);\n    }\n  }, {\n    key: \"abort\",\n    value: function abort() {\n      this.listeners.forEach(function (listener) {\n        return listener();\n      });\n    }\n  }]);\n  return AnalyticsAbortSignal;\n}();\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Event parameters to set on 'gtag' during initialization.\r\n */\nvar defaultEventParametersForInit;\n/**\r\n * Logs an analytics event through the Firebase SDK.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param eventName Google Analytics event name, choose from standard list or use a custom string.\r\n * @param eventParams Analytics event parameters.\r\n */\nfunction logEvent$1(_x18, _x19, _x20, _x21, _x22) {\n  return _logEvent$.apply(this, arguments);\n}\n/**\r\n * Set screen_name parameter for this Google Analytics ID.\r\n *\r\n * @deprecated Use {@link logEvent} with `eventName` as 'screen_view' and add relevant `eventParams`.\r\n * See {@link https://firebase.google.com/docs/analytics/screenviews | Track Screenviews}.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param screenName Screen name string to set.\r\n */\nfunction _logEvent$() {\n  _logEvent$ = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(gtagFunction, initializationPromise, eventName, eventParams, options) {\n    var measurementId, params;\n    return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            if (!(options && options.global)) {\n              _context8.next = 5;\n              break;\n            }\n            gtagFunction(\"event\" /* GtagCommand.EVENT */, eventName, eventParams);\n            return _context8.abrupt(\"return\");\n          case 5:\n            _context8.next = 7;\n            return initializationPromise;\n          case 7:\n            measurementId = _context8.sent;\n            params = Object.assign(Object.assign({}, eventParams), {\n              'send_to': measurementId\n            });\n            gtagFunction(\"event\" /* GtagCommand.EVENT */, eventName, params);\n          case 10:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee8);\n  }));\n  return _logEvent$.apply(this, arguments);\n}\nfunction setCurrentScreen$1(_x23, _x24, _x25, _x26) {\n  return _setCurrentScreen$.apply(this, arguments);\n}\n/**\r\n * Set user_id parameter for this Google Analytics ID.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param id User ID string to set\r\n */\nfunction _setCurrentScreen$() {\n  _setCurrentScreen$ = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(gtagFunction, initializationPromise, screenName, options) {\n    var measurementId;\n    return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            if (!(options && options.global)) {\n              _context9.next = 5;\n              break;\n            }\n            gtagFunction(\"set\" /* GtagCommand.SET */, {\n              'screen_name': screenName\n            });\n            return _context9.abrupt(\"return\", Promise.resolve());\n          case 5:\n            _context9.next = 7;\n            return initializationPromise;\n          case 7:\n            measurementId = _context9.sent;\n            gtagFunction(\"config\" /* GtagCommand.CONFIG */, measurementId, {\n              update: true,\n              'screen_name': screenName\n            });\n          case 9:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, _callee9);\n  }));\n  return _setCurrentScreen$.apply(this, arguments);\n}\nfunction setUserId$1(_x27, _x28, _x29, _x30) {\n  return _setUserId$.apply(this, arguments);\n}\n/**\r\n * Set all other user properties other than user_id and screen_name.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param properties Map of user properties to set\r\n */\nfunction _setUserId$() {\n  _setUserId$ = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(gtagFunction, initializationPromise, id, options) {\n    var measurementId;\n    return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            if (!(options && options.global)) {\n              _context10.next = 5;\n              break;\n            }\n            gtagFunction(\"set\" /* GtagCommand.SET */, {\n              'user_id': id\n            });\n            return _context10.abrupt(\"return\", Promise.resolve());\n          case 5:\n            _context10.next = 7;\n            return initializationPromise;\n          case 7:\n            measurementId = _context10.sent;\n            gtagFunction(\"config\" /* GtagCommand.CONFIG */, measurementId, {\n              update: true,\n              'user_id': id\n            });\n          case 9:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, _callee10);\n  }));\n  return _setUserId$.apply(this, arguments);\n}\nfunction setUserProperties$1(_x31, _x32, _x33, _x34) {\n  return _setUserProperties$.apply(this, arguments);\n}\n/**\r\n * Retrieves a unique Google Analytics identifier for the web client.\r\n * See {@link https://developers.google.com/analytics/devguides/collection/ga4/reference/config#client_id | client_id}.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n */\nfunction _setUserProperties$() {\n  _setUserProperties$ = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(gtagFunction, initializationPromise, properties, options) {\n    var flatProperties, _i2, _Object$keys, key, measurementId;\n    return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n      while (1) {\n        switch (_context11.prev = _context11.next) {\n          case 0:\n            if (!(options && options.global)) {\n              _context11.next = 7;\n              break;\n            }\n            flatProperties = {};\n            for (_i2 = 0, _Object$keys = Object.keys(properties); _i2 < _Object$keys.length; _i2++) {\n              key = _Object$keys[_i2];\n              // use dot notation for merge behavior in gtag.js\n              flatProperties[\"user_properties.\".concat(key)] = properties[key];\n            }\n            gtagFunction(\"set\" /* GtagCommand.SET */, flatProperties);\n            return _context11.abrupt(\"return\", Promise.resolve());\n          case 7:\n            _context11.next = 9;\n            return initializationPromise;\n          case 9:\n            measurementId = _context11.sent;\n            gtagFunction(\"config\" /* GtagCommand.CONFIG */, measurementId, {\n              update: true,\n              'user_properties': properties\n            });\n          case 11:\n          case \"end\":\n            return _context11.stop();\n        }\n      }\n    }, _callee11);\n  }));\n  return _setUserProperties$.apply(this, arguments);\n}\nfunction internalGetGoogleAnalyticsClientId(_x35, _x36) {\n  return _internalGetGoogleAnalyticsClientId.apply(this, arguments);\n}\n/**\r\n * Set whether collection is enabled for this ID.\r\n *\r\n * @param enabled If true, collection is enabled for this ID.\r\n */\nfunction _internalGetGoogleAnalyticsClientId() {\n  _internalGetGoogleAnalyticsClientId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(gtagFunction, initializationPromise) {\n    var measurementId;\n    return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n      while (1) {\n        switch (_context12.prev = _context12.next) {\n          case 0:\n            _context12.next = 2;\n            return initializationPromise;\n          case 2:\n            measurementId = _context12.sent;\n            return _context12.abrupt(\"return\", new Promise(function (resolve, reject) {\n              gtagFunction(\"get\" /* GtagCommand.GET */, measurementId, 'client_id', function (clientId) {\n                if (!clientId) {\n                  reject(ERROR_FACTORY.create(\"no-client-id\" /* AnalyticsError.NO_CLIENT_ID */));\n                }\n\n                resolve(clientId);\n              });\n            }));\n          case 4:\n          case \"end\":\n            return _context12.stop();\n        }\n      }\n    }, _callee12);\n  }));\n  return _internalGetGoogleAnalyticsClientId.apply(this, arguments);\n}\nfunction setAnalyticsCollectionEnabled$1(_x37, _x38) {\n  return _setAnalyticsCollectionEnabled$.apply(this, arguments);\n}\n/**\r\n * Consent parameters to default to during 'gtag' initialization.\r\n */\nfunction _setAnalyticsCollectionEnabled$() {\n  _setAnalyticsCollectionEnabled$ = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(initializationPromise, enabled) {\n    var measurementId;\n    return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n      while (1) {\n        switch (_context13.prev = _context13.next) {\n          case 0:\n            _context13.next = 2;\n            return initializationPromise;\n          case 2:\n            measurementId = _context13.sent;\n            window[\"ga-disable-\".concat(measurementId)] = !enabled;\n          case 4:\n          case \"end\":\n            return _context13.stop();\n        }\n      }\n    }, _callee13);\n  }));\n  return _setAnalyticsCollectionEnabled$.apply(this, arguments);\n}\nvar defaultConsentSettingsForInit;\n/**\r\n * Sets the variable {@link defaultConsentSettingsForInit} for use in the initialization of\r\n * analytics.\r\n *\r\n * @param consentSettings Maps the applicable end user consent state for gtag.js.\r\n */\nfunction _setConsentDefaultForInit(consentSettings) {\n  defaultConsentSettingsForInit = consentSettings;\n}\n/**\r\n * Sets the variable `defaultEventParametersForInit` for use in the initialization of\r\n * analytics.\r\n *\r\n * @param customParams Any custom params the user may pass to gtag.js.\r\n */\nfunction _setDefaultEventParametersForInit(customParams) {\n  defaultEventParametersForInit = customParams;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction validateIndexedDB() {\n  return _validateIndexedDB.apply(this, arguments);\n}\n/**\r\n * Initialize the analytics instance in gtag.js by calling config command with fid.\r\n *\r\n * NOTE: We combine analytics initialization and setting fid together because we want fid to be\r\n * part of the `page_view` event that's sent during the initialization\r\n * @param app Firebase app\r\n * @param gtagCore The gtag function that's not wrapped.\r\n * @param dynamicConfigPromisesList Array of all dynamic config promises.\r\n * @param measurementIdToAppId Maps measurementID to appID.\r\n * @param installations _FirebaseInstallationsInternal instance.\r\n *\r\n * @returns Measurement ID.\r\n */\nfunction _validateIndexedDB() {\n  _validateIndexedDB = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14() {\n    return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n      while (1) {\n        switch (_context14.prev = _context14.next) {\n          case 0:\n            if (isIndexedDBAvailable()) {\n              _context14.next = 5;\n              break;\n            }\n            logger.warn(ERROR_FACTORY.create(\"indexeddb-unavailable\" /* AnalyticsError.INDEXEDDB_UNAVAILABLE */, {\n              errorInfo: 'IndexedDB is not available in this environment.'\n            }).message);\n            return _context14.abrupt(\"return\", false);\n          case 5:\n            _context14.prev = 5;\n            _context14.next = 8;\n            return validateIndexedDBOpenable();\n          case 8:\n            _context14.next = 14;\n            break;\n          case 10:\n            _context14.prev = 10;\n            _context14.t0 = _context14[\"catch\"](5);\n            logger.warn(ERROR_FACTORY.create(\"indexeddb-unavailable\" /* AnalyticsError.INDEXEDDB_UNAVAILABLE */, {\n              errorInfo: _context14.t0 === null || _context14.t0 === void 0 ? void 0 : _context14.t0.toString()\n            }).message);\n            return _context14.abrupt(\"return\", false);\n          case 14:\n            return _context14.abrupt(\"return\", true);\n          case 15:\n          case \"end\":\n            return _context14.stop();\n        }\n      }\n    }, _callee14, null, [[5, 10]]);\n  }));\n  return _validateIndexedDB.apply(this, arguments);\n}\nfunction _initializeAnalytics(_x39, _x40, _x41, _x42, _x43, _x44, _x45) {\n  return _initializeAnalytics2.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Analytics Service class.\r\n */\nfunction _initializeAnalytics2() {\n  _initializeAnalytics2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(app, dynamicConfigPromisesList, measurementIdToAppId, installations, gtagCore, dataLayerName, options) {\n    var _a, dynamicConfigPromise, fidPromise, _yield$Promise$all, _yield$Promise$all2, dynamicConfig, fid, configProperties;\n    return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n      while (1) {\n        switch (_context15.prev = _context15.next) {\n          case 0:\n            dynamicConfigPromise = fetchDynamicConfigWithRetry(app); // Once fetched, map measurementIds to appId, for ease of lookup in wrapped gtag function.\n            dynamicConfigPromise.then(function (config) {\n              measurementIdToAppId[config.measurementId] = config.appId;\n              if (app.options.measurementId && config.measurementId !== app.options.measurementId) {\n                logger.warn(\"The measurement ID in the local Firebase config (\".concat(app.options.measurementId, \")\") + \" does not match the measurement ID fetched from the server (\".concat(config.measurementId, \").\") + \" To ensure analytics events are always sent to the correct Analytics property,\" + \" update the\" + \" measurement ID field in the local config or remove it from the local config.\");\n              }\n            }).catch(function (e) {\n              return logger.error(e);\n            });\n            // Add to list to track state of all dynamic config promises.\n            dynamicConfigPromisesList.push(dynamicConfigPromise);\n            fidPromise = validateIndexedDB().then(function (envIsValid) {\n              if (envIsValid) {\n                return installations.getId();\n              } else {\n                return undefined;\n              }\n            });\n            _context15.next = 6;\n            return Promise.all([dynamicConfigPromise, fidPromise]);\n          case 6:\n            _yield$Promise$all = _context15.sent;\n            _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);\n            dynamicConfig = _yield$Promise$all2[0];\n            fid = _yield$Promise$all2[1];\n            // Detect if user has already put the gtag <script> tag on this page with the passed in\n            // data layer name.\n            if (!findGtagScriptOnPage(dataLayerName)) {\n              insertScriptTag(dataLayerName, dynamicConfig.measurementId);\n            }\n            // Detects if there are consent settings that need to be configured.\n            if (defaultConsentSettingsForInit) {\n              gtagCore(\"consent\" /* GtagCommand.CONSENT */, 'default', defaultConsentSettingsForInit);\n              _setConsentDefaultForInit(undefined);\n            }\n            // This command initializes gtag.js and only needs to be called once for the entire web app,\n            // but since it is idempotent, we can call it multiple times.\n            // We keep it together with other initialization logic for better code structure.\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            gtagCore('js', new Date());\n            // User config added first. We don't want users to accidentally overwrite\n            // base Firebase config properties.\n            configProperties = (_a = options === null || options === void 0 ? void 0 : options.config) !== null && _a !== void 0 ? _a : {}; // guard against developers accidentally setting properties with prefix `firebase_`\n            configProperties[ORIGIN_KEY] = 'firebase';\n            configProperties.update = true;\n            if (fid != null) {\n              configProperties[GA_FID_KEY] = fid;\n            }\n            // It should be the first config command called on this GA-ID\n            // Initialize this GA-ID and set FID on it using the gtag config API.\n            // Note: This will trigger a page_view event unless 'send_page_view' is set to false in\n            // `configProperties`.\n            gtagCore(\"config\" /* GtagCommand.CONFIG */, dynamicConfig.measurementId, configProperties);\n            // Detects if there is data that will be set on every event logged from the SDK.\n            if (defaultEventParametersForInit) {\n              gtagCore(\"set\" /* GtagCommand.SET */, defaultEventParametersForInit);\n              _setDefaultEventParametersForInit(undefined);\n            }\n            return _context15.abrupt(\"return\", dynamicConfig.measurementId);\n          case 20:\n          case \"end\":\n            return _context15.stop();\n        }\n      }\n    }, _callee15);\n  }));\n  return _initializeAnalytics2.apply(this, arguments);\n}\nvar AnalyticsService = /*#__PURE__*/function () {\n  function AnalyticsService(app) {\n    _classCallCheck(this, AnalyticsService);\n    this.app = app;\n  }\n  _createClass(AnalyticsService, [{\n    key: \"_delete\",\n    value: function _delete() {\n      delete initializationPromisesMap[this.app.options.appId];\n      return Promise.resolve();\n    }\n  }]);\n  return AnalyticsService;\n}();\n/**\r\n * Maps appId to full initialization promise. Wrapped gtag calls must wait on\r\n * all or some of these, depending on the call's `send_to` param and the status\r\n * of the dynamic config fetches (see below).\r\n */\nvar initializationPromisesMap = {};\n/**\r\n * List of dynamic config fetch promises. In certain cases, wrapped gtag calls\r\n * wait on all these to be complete in order to determine if it can selectively\r\n * wait for only certain initialization (FID) promises or if it must wait for all.\r\n */\nvar dynamicConfigPromisesList = [];\n/**\r\n * Maps fetched measurementIds to appId. Populated when the app's dynamic config\r\n * fetch completes. If already populated, gtag config calls can use this to\r\n * selectively wait for only this app's initialization promise (FID) instead of all\r\n * initialization promises.\r\n */\nvar measurementIdToAppId = {};\n/**\r\n * Name for window global data layer array used by GA: defaults to 'dataLayer'.\r\n */\nvar dataLayerName = 'dataLayer';\n/**\r\n * Name for window global gtag function used by GA: defaults to 'gtag'.\r\n */\nvar gtagName = 'gtag';\n/**\r\n * Reproduction of standard gtag function or reference to existing\r\n * gtag function on window object.\r\n */\nvar gtagCoreFunction;\n/**\r\n * Wrapper around gtag function that ensures FID is sent with all\r\n * relevant event and config calls.\r\n */\nvar wrappedGtagFunction;\n/**\r\n * Flag to ensure page initialization steps (creation or wrapping of\r\n * dataLayer and gtag script) are only run once per page load.\r\n */\nvar globalInitDone = false;\n/**\r\n * Configures Firebase Analytics to use custom `gtag` or `dataLayer` names.\r\n * Intended to be used if `gtag.js` script has been installed on\r\n * this page independently of Firebase Analytics, and is using non-default\r\n * names for either the `gtag` function or for `dataLayer`.\r\n * Must be called before calling `getAnalytics()` or it won't\r\n * have any effect.\r\n *\r\n * @public\r\n *\r\n * @param options - Custom gtag and dataLayer names.\r\n */\nfunction settings(options) {\n  if (globalInitDone) {\n    throw ERROR_FACTORY.create(\"already-initialized\" /* AnalyticsError.ALREADY_INITIALIZED */);\n  }\n\n  if (options.dataLayerName) {\n    dataLayerName = options.dataLayerName;\n  }\n  if (options.gtagName) {\n    gtagName = options.gtagName;\n  }\n}\n/**\r\n * Returns true if no environment mismatch is found.\r\n * If environment mismatches are found, throws an INVALID_ANALYTICS_CONTEXT\r\n * error that also lists details for each mismatch found.\r\n */\nfunction warnOnBrowserContextMismatch() {\n  var mismatchedEnvMessages = [];\n  if (isBrowserExtension()) {\n    mismatchedEnvMessages.push('This is a browser extension environment.');\n  }\n  if (!areCookiesEnabled()) {\n    mismatchedEnvMessages.push('Cookies are not available.');\n  }\n  if (mismatchedEnvMessages.length > 0) {\n    var details = mismatchedEnvMessages.map(function (message, index) {\n      return \"(\".concat(index + 1, \") \").concat(message);\n    }).join(' ');\n    var err = ERROR_FACTORY.create(\"invalid-analytics-context\" /* AnalyticsError.INVALID_ANALYTICS_CONTEXT */, {\n      errorInfo: details\n    });\n    logger.warn(err.message);\n  }\n}\n/**\r\n * Analytics instance factory.\r\n * @internal\r\n */\nfunction factory(app, installations, options) {\n  warnOnBrowserContextMismatch();\n  var appId = app.options.appId;\n  if (!appId) {\n    throw ERROR_FACTORY.create(\"no-app-id\" /* AnalyticsError.NO_APP_ID */);\n  }\n\n  if (!app.options.apiKey) {\n    if (app.options.measurementId) {\n      logger.warn(\"The \\\"apiKey\\\" field is empty in the local Firebase config. This is needed to fetch the latest\" + \" measurement ID for this Firebase app. Falling back to the measurement ID \".concat(app.options.measurementId) + \" provided in the \\\"measurementId\\\" field in the local Firebase config.\");\n    } else {\n      throw ERROR_FACTORY.create(\"no-api-key\" /* AnalyticsError.NO_API_KEY */);\n    }\n  }\n\n  if (initializationPromisesMap[appId] != null) {\n    throw ERROR_FACTORY.create(\"already-exists\" /* AnalyticsError.ALREADY_EXISTS */, {\n      id: appId\n    });\n  }\n  if (!globalInitDone) {\n    // Steps here should only be done once per page: creation or wrapping\n    // of dataLayer and global gtag function.\n    getOrCreateDataLayer(dataLayerName);\n    var _wrapOrCreateGtag = wrapOrCreateGtag(initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, dataLayerName, gtagName),\n      wrappedGtag = _wrapOrCreateGtag.wrappedGtag,\n      gtagCore = _wrapOrCreateGtag.gtagCore;\n    wrappedGtagFunction = wrappedGtag;\n    gtagCoreFunction = gtagCore;\n    globalInitDone = true;\n  }\n  // Async but non-blocking.\n  // This map reflects the completion state of all promises for each appId.\n  initializationPromisesMap[appId] = _initializeAnalytics(app, dynamicConfigPromisesList, measurementIdToAppId, installations, gtagCoreFunction, dataLayerName, options);\n  var analyticsInstance = new AnalyticsService(app);\n  return analyticsInstance;\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\r\n * Returns an {@link Analytics} instance for the given app.\r\n *\r\n * @public\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\r\n */\nfunction getAnalytics() {\n  var app = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getApp();\n  app = getModularInstance(app);\n  // Dependencies\n  var analyticsProvider = _getProvider(app, ANALYTICS_TYPE);\n  if (analyticsProvider.isInitialized()) {\n    return analyticsProvider.getImmediate();\n  }\n  return initializeAnalytics(app);\n}\n/**\r\n * Returns an {@link Analytics} instance for the given app.\r\n *\r\n * @public\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\r\n */\nfunction initializeAnalytics(app) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  // Dependencies\n  var analyticsProvider = _getProvider(app, ANALYTICS_TYPE);\n  if (analyticsProvider.isInitialized()) {\n    var existingInstance = analyticsProvider.getImmediate();\n    if (deepEqual(options, analyticsProvider.getOptions())) {\n      return existingInstance;\n    } else {\n      throw ERROR_FACTORY.create(\"already-initialized\" /* AnalyticsError.ALREADY_INITIALIZED */);\n    }\n  }\n\n  var analyticsInstance = analyticsProvider.initialize({\n    options: options\n  });\n  return analyticsInstance;\n}\n/**\r\n * This is a public static method provided to users that wraps four different checks:\r\n *\r\n * 1. Check if it's not a browser extension environment.\r\n * 2. Check if cookies are enabled in current browser.\r\n * 3. Check if IndexedDB is supported by the browser environment.\r\n * 4. Check if the current browser context is valid for using `IndexedDB.open()`.\r\n *\r\n * @public\r\n *\r\n */\nfunction isSupported() {\n  return _isSupported.apply(this, arguments);\n}\n/**\r\n * Use gtag `config` command to set `screen_name`.\r\n *\r\n * @public\r\n *\r\n * @deprecated Use {@link logEvent} with `eventName` as 'screen_view' and add relevant `eventParams`.\r\n * See {@link https://firebase.google.com/docs/analytics/screenviews | Track Screenviews}.\r\n *\r\n * @param analyticsInstance - The {@link Analytics} instance.\r\n * @param screenName - Screen name to set.\r\n */\nfunction _isSupported() {\n  _isSupported = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16() {\n    var isDBOpenable;\n    return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n      while (1) {\n        switch (_context16.prev = _context16.next) {\n          case 0:\n            if (!isBrowserExtension()) {\n              _context16.next = 2;\n              break;\n            }\n            return _context16.abrupt(\"return\", false);\n          case 2:\n            if (areCookiesEnabled()) {\n              _context16.next = 4;\n              break;\n            }\n            return _context16.abrupt(\"return\", false);\n          case 4:\n            if (isIndexedDBAvailable()) {\n              _context16.next = 6;\n              break;\n            }\n            return _context16.abrupt(\"return\", false);\n          case 6:\n            _context16.prev = 6;\n            _context16.next = 9;\n            return validateIndexedDBOpenable();\n          case 9:\n            isDBOpenable = _context16.sent;\n            return _context16.abrupt(\"return\", isDBOpenable);\n          case 13:\n            _context16.prev = 13;\n            _context16.t0 = _context16[\"catch\"](6);\n            return _context16.abrupt(\"return\", false);\n          case 16:\n          case \"end\":\n            return _context16.stop();\n        }\n      }\n    }, _callee16, null, [[6, 13]]);\n  }));\n  return _isSupported.apply(this, arguments);\n}\nfunction setCurrentScreen(analyticsInstance, screenName, options) {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  setCurrentScreen$1(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId], screenName, options).catch(function (e) {\n    return logger.error(e);\n  });\n}\n/**\r\n * Retrieves a unique Google Analytics identifier for the web client.\r\n * See {@link https://developers.google.com/analytics/devguides/collection/ga4/reference/config#client_id | client_id}.\r\n *\r\n * @public\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\r\n */\nfunction getGoogleAnalyticsClientId(_x46) {\n  return _getGoogleAnalyticsClientId.apply(this, arguments);\n}\n/**\r\n * Use gtag `config` command to set `user_id`.\r\n *\r\n * @public\r\n *\r\n * @param analyticsInstance - The {@link Analytics} instance.\r\n * @param id - User ID to set.\r\n */\nfunction _getGoogleAnalyticsClientId() {\n  _getGoogleAnalyticsClientId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(analyticsInstance) {\n    return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n      while (1) {\n        switch (_context17.prev = _context17.next) {\n          case 0:\n            analyticsInstance = getModularInstance(analyticsInstance);\n            return _context17.abrupt(\"return\", internalGetGoogleAnalyticsClientId(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId]));\n          case 2:\n          case \"end\":\n            return _context17.stop();\n        }\n      }\n    }, _callee17);\n  }));\n  return _getGoogleAnalyticsClientId.apply(this, arguments);\n}\nfunction setUserId(analyticsInstance, id, options) {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  setUserId$1(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId], id, options).catch(function (e) {\n    return logger.error(e);\n  });\n}\n/**\r\n * Use gtag `config` command to set all params specified.\r\n *\r\n * @public\r\n */\nfunction setUserProperties(analyticsInstance, properties, options) {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  setUserProperties$1(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId], properties, options).catch(function (e) {\n    return logger.error(e);\n  });\n}\n/**\r\n * Sets whether Google Analytics collection is enabled for this app on this device.\r\n * Sets global `window['ga-disable-analyticsId'] = true;`\r\n *\r\n * @public\r\n *\r\n * @param analyticsInstance - The {@link Analytics} instance.\r\n * @param enabled - If true, enables collection, if false, disables it.\r\n */\nfunction setAnalyticsCollectionEnabled(analyticsInstance, enabled) {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  setAnalyticsCollectionEnabled$1(initializationPromisesMap[analyticsInstance.app.options.appId], enabled).catch(function (e) {\n    return logger.error(e);\n  });\n}\n/**\r\n * Adds data that will be set on every event logged from the SDK, including automatic ones.\r\n * With gtag's \"set\" command, the values passed persist on the current page and are passed with\r\n * all subsequent events.\r\n * @public\r\n * @param customParams - Any custom params the user may pass to gtag.js.\r\n */\nfunction setDefaultEventParameters(customParams) {\n  // Check if reference to existing gtag function on window object exists\n  if (wrappedGtagFunction) {\n    wrappedGtagFunction(\"set\" /* GtagCommand.SET */, customParams);\n  } else {\n    _setDefaultEventParametersForInit(customParams);\n  }\n}\n/**\r\n * Sends a Google Analytics event with given `eventParams`. This method\r\n * automatically associates this logged event with this Firebase web\r\n * app instance on this device.\r\n * List of official event parameters can be found in the gtag.js\r\n * reference documentation:\r\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\r\n * | the GA4 reference documentation}.\r\n *\r\n * @public\r\n */\nfunction _logEvent(analyticsInstance, eventName, eventParams, options) {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  logEvent$1(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId], eventName, eventParams, options).catch(function (e) {\n    return logger.error(e);\n  });\n}\n/**\r\n * Sets the applicable end user consent state for this web app across all gtag references once\r\n * Firebase Analytics is initialized.\r\n *\r\n * Use the {@link ConsentSettings} to specify individual consent type values. By default consent\r\n * types are set to \"granted\".\r\n * @public\r\n * @param consentSettings - Maps the applicable end user consent state for gtag.js.\r\n */\nfunction setConsent(consentSettings) {\n  // Check if reference to existing gtag function on window object exists\n  if (wrappedGtagFunction) {\n    wrappedGtagFunction(\"consent\" /* GtagCommand.CONSENT */, 'update', consentSettings);\n  } else {\n    _setConsentDefaultForInit(consentSettings);\n  }\n}\nvar name = \"@firebase/analytics\";\nvar version = \"0.10.7\";\n\n/**\r\n * The Firebase Analytics Web SDK.\r\n * This SDK does not work in a Node.js environment.\r\n *\r\n * @packageDocumentation\r\n */\nfunction registerAnalytics() {\n  _registerComponent(new Component(ANALYTICS_TYPE, function (container, _ref2) {\n    var analyticsOptions = _ref2.options;\n    // getImmediate for FirebaseApp will always succeed\n    var app = container.getProvider('app').getImmediate();\n    var installations = container.getProvider('installations-internal').getImmediate();\n    return factory(app, installations, analyticsOptions);\n  }, \"PUBLIC\" /* ComponentType.PUBLIC */));\n  _registerComponent(new Component('analytics-internal', internalFactory, \"PRIVATE\" /* ComponentType.PRIVATE */));\n  registerVersion(name, version);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, 'esm2017');\n  function internalFactory(container) {\n    try {\n      var analytics = container.getProvider(ANALYTICS_TYPE).getImmediate();\n      return {\n        logEvent: function logEvent(eventName, eventParams, options) {\n          return _logEvent(analytics, eventName, eventParams, options);\n        }\n      };\n    } catch (e) {\n      throw ERROR_FACTORY.create(\"interop-component-reg-failed\" /* AnalyticsError.INTEROP_COMPONENT_REG_FAILED */, {\n        reason: e\n      });\n    }\n  }\n}\nregisterAnalytics();\nexport { getAnalytics, getGoogleAnalyticsClientId, initializeAnalytics, isSupported, _logEvent as logEvent, setAnalyticsCollectionEnabled, setConsent, setCurrentScreen, setDefaultEventParameters, setUserId, setUserProperties, settings };","map":{"version":3,"mappings":"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","names":["ANALYTICS_TYPE","GA_FID_KEY","ORIGIN_KEY","FETCH_TIMEOUT_MILLIS","DYNAMIC_CONFIG_URL","GTAG_URL","logger","Logger","ERRORS","ERROR_FACTORY","ErrorFactory","createGtagTrustedTypesScriptURL","url","startsWith","err","create","gtagURL","warn","message","promiseAllSettled","promises","Promise","all","map","promise","catch","e","createTrustedTypesPolicy","policyName","policyOptions","trustedTypesPolicy","window","trustedTypes","createPolicy","insertScriptTag","dataLayerName","measurementId","createScriptURL","script","document","createElement","gtagScriptURL","src","async","head","appendChild","getOrCreateDataLayer","dataLayer","Array","isArray","gtagOnConfig","_gtagOnConfig","gtagCore","initializationPromisesMap","dynamicConfigPromisesList","measurementIdToAppId","gtagParams","correspondingAppId","_context2","dynamicConfigResults","foundConfig","find","config","appId","error","gtagOnEvent","_gtagOnEvent","_context3","initializationPromisesToWaitFor","gaSendToList","_iterator","_loop","sendToId","initializationPromise","push","_ret","length","Object","values","wrapGtag","gtagWrapper","_gtagWrapper","command","args","_key","_measurementId","_gtagParams","consentAction","_gtagParams2","_measurementId2","fieldName","callback","customParams","_args2","_context","wrapOrCreateGtag","gtagFunctionName","_args","arguments","wrappedGtag","findGtagScriptOnPage","scriptTags","getElementsByTagName","tag","includes","LONG_RETRY_FACTOR","BASE_INTERVAL_MILLIS","RetryData","throttleMetadata","intervalMillis","_classCallCheck","_createClass","key","value","metadata","defaultRetryData","getHeaders","apiKey","Headers","Accept","fetchDynamicConfig","_fetchDynamicConfig","appFields","request","method","headers","appUrl","replace","_context4","fetch","response","status","errorMessage","json","jsonResponse","httpStatus","responseMessage","fetchDynamicConfigWithRetry","_fetchDynamicConfigWithRetry","app","timeoutMillis","_app$options","signal","_args7","retryData","options","_context6","getThrottleMetadata","backoffCount","throttleEndTimeMillis","Date","now","AnalyticsAbortSignal","setTimeout","abort","undefined","attemptFetchDynamicConfigWithRetry","_attemptFetchDynamicConfigWithRetry","_a","backoffMillis","_args8","setAbortableTimeout","_context7","deleteThrottleMetadata","isRetriableError","Number","customData","calculateBackoffMillis","setThrottleMetadata","debug","resolve","reject","Math","max","timeout","addEventListener","clearTimeout","FirebaseError","listener","listeners","forEach","defaultEventParametersForInit","logEvent","logEvent$1","_logEvent$","gtagFunction","eventName","eventParams","global","_context8","params","setCurrentScreen","setCurrentScreen$1","_setCurrentScreen$","screenName","_context9","update","setUserId","setUserId$1","_setUserId$","id","_context10","setUserProperties","setUserProperties$1","_setUserProperties$","properties","_context11","flatProperties","keys","internalGetGoogleAnalyticsClientId","_internalGetGoogleAnalyticsClientId","_context12","clientId","setAnalyticsCollectionEnabled","setAnalyticsCollectionEnabled$1","_setAnalyticsCollectionEnabled$","enabled","_context13","defaultConsentSettingsForInit","_setConsentDefaultForInit","consentSettings","_setDefaultEventParametersForInit","validateIndexedDB","_validateIndexedDB","isIndexedDBAvailable","_context14","errorInfo","validateIndexedDBOpenable","toString","_initializeAnalytics","_initializeAnalytics2","installations","dynamicConfigPromise","then","fidPromise","envIsValid","getId","_context15","_yield$Promise$all","_yield$Promise$all2","dynamicConfig","fid","configProperties","AnalyticsService","gtagName","gtagCoreFunction","wrappedGtagFunction","globalInitDone","settings","warnOnBrowserContextMismatch","mismatchedEnvMessages","isBrowserExtension","areCookiesEnabled","details","index","join","factory","analyticsInstance","getAnalytics","getApp","getModularInstance","analyticsProvider","_getProvider","isInitialized","getImmediate","initializeAnalytics","existingInstance","deepEqual","getOptions","initialize","isSupported","_isSupported","_context16","isDBOpenable","internalSetCurrentScreen","getGoogleAnalyticsClientId","_getGoogleAnalyticsClientId","internalSetUserId","internalSetUserProperties","internalSetAnalyticsCollectionEnabled","setDefaultEventParameters","internalLogEvent","setConsent","registerAnalytics","_registerComponent","Component","container","analyticsOptions","getProvider","internalFactory","registerVersion","name","version","analytics","reason"],"sources":["/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@firebase/analytics/src/constants.ts","/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@firebase/analytics/src/logger.ts","/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@firebase/analytics/src/errors.ts","/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@firebase/analytics/src/helpers.ts","/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@firebase/analytics/src/get-config.ts","/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@firebase/analytics/src/functions.ts","/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@firebase/analytics/src/initialize-analytics.ts","/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@firebase/analytics/src/factory.ts","/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@firebase/analytics/src/api.ts","/Users/oleksandrmarkov/Documents/GitHub/learnlingo/node_modules/@firebase/analytics/src/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Type constant for Firebase Analytics.\n */\nexport const ANALYTICS_TYPE = 'analytics';\n\n// Key to attach FID to in gtag params.\nexport const GA_FID_KEY = 'firebase_id';\nexport const ORIGIN_KEY = 'origin';\n\nexport const FETCH_TIMEOUT_MILLIS = 60 * 1000;\n\nexport const DYNAMIC_CONFIG_URL =\n  'https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig';\n\nexport const GTAG_URL = 'https://www.googletagmanager.com/gtag/js';\n\nexport const enum GtagCommand {\n  EVENT = 'event',\n  SET = 'set',\n  CONFIG = 'config',\n  CONSENT = 'consent',\n  GET = 'get'\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@firebase/logger';\n\nexport const logger = new Logger('@firebase/analytics');\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AnalyticsError {\n  ALREADY_EXISTS = 'already-exists',\n  ALREADY_INITIALIZED = 'already-initialized',\n  ALREADY_INITIALIZED_SETTINGS = 'already-initialized-settings',\n  INTEROP_COMPONENT_REG_FAILED = 'interop-component-reg-failed',\n  INVALID_ANALYTICS_CONTEXT = 'invalid-analytics-context',\n  INDEXEDDB_UNAVAILABLE = 'indexeddb-unavailable',\n  FETCH_THROTTLE = 'fetch-throttle',\n  CONFIG_FETCH_FAILED = 'config-fetch-failed',\n  NO_API_KEY = 'no-api-key',\n  NO_APP_ID = 'no-app-id',\n  NO_CLIENT_ID = 'no-client-id',\n  INVALID_GTAG_RESOURCE = 'invalid-gtag-resource'\n}\n\nconst ERRORS: ErrorMap<AnalyticsError> = {\n  [AnalyticsError.ALREADY_EXISTS]:\n    'A Firebase Analytics instance with the appId {$id} ' +\n    ' already exists. ' +\n    'Only one Firebase Analytics instance can be created for each appId.',\n  [AnalyticsError.ALREADY_INITIALIZED]:\n    'initializeAnalytics() cannot be called again with different options than those ' +\n    'it was initially called with. It can be called again with the same options to ' +\n    'return the existing instance, or getAnalytics() can be used ' +\n    'to get a reference to the already-initialized instance.',\n  [AnalyticsError.ALREADY_INITIALIZED_SETTINGS]:\n    'Firebase Analytics has already been initialized.' +\n    'settings() must be called before initializing any Analytics instance' +\n    'or it will have no effect.',\n  [AnalyticsError.INTEROP_COMPONENT_REG_FAILED]:\n    'Firebase Analytics Interop Component failed to instantiate: {$reason}',\n  [AnalyticsError.INVALID_ANALYTICS_CONTEXT]:\n    'Firebase Analytics is not supported in this environment. ' +\n    'Wrap initialization of analytics in analytics.isSupported() ' +\n    'to prevent initialization in unsupported environments. Details: {$errorInfo}',\n  [AnalyticsError.INDEXEDDB_UNAVAILABLE]:\n    'IndexedDB unavailable or restricted in this environment. ' +\n    'Wrap initialization of analytics in analytics.isSupported() ' +\n    'to prevent initialization in unsupported environments. Details: {$errorInfo}',\n  [AnalyticsError.FETCH_THROTTLE]:\n    'The config fetch request timed out while in an exponential backoff state.' +\n    ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',\n  [AnalyticsError.CONFIG_FETCH_FAILED]:\n    'Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}',\n  [AnalyticsError.NO_API_KEY]:\n    'The \"apiKey\" field is empty in the local Firebase config. Firebase Analytics requires this field to' +\n    'contain a valid API key.',\n  [AnalyticsError.NO_APP_ID]:\n    'The \"appId\" field is empty in the local Firebase config. Firebase Analytics requires this field to' +\n    'contain a valid app ID.',\n  [AnalyticsError.NO_CLIENT_ID]: 'The \"client_id\" field is empty.',\n  [AnalyticsError.INVALID_GTAG_RESOURCE]:\n    'Trusted Types detected an invalid gtag resource: {$gtagURL}.'\n};\n\ninterface ErrorParams {\n  [AnalyticsError.ALREADY_EXISTS]: { id: string };\n  [AnalyticsError.INTEROP_COMPONENT_REG_FAILED]: { reason: Error };\n  [AnalyticsError.FETCH_THROTTLE]: { throttleEndTimeMillis: number };\n  [AnalyticsError.CONFIG_FETCH_FAILED]: {\n    httpStatus: number;\n    responseMessage: string;\n  };\n  [AnalyticsError.INVALID_ANALYTICS_CONTEXT]: { errorInfo: string };\n  [AnalyticsError.INDEXEDDB_UNAVAILABLE]: { errorInfo: string };\n  [AnalyticsError.INVALID_GTAG_RESOURCE]: { gtagURL: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AnalyticsError, ErrorParams>(\n  'analytics',\n  'Analytics',\n  ERRORS\n);\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CustomParams,\n  ControlParams,\n  EventParams,\n  ConsentSettings\n} from './public-types';\nimport { DynamicConfig, DataLayer, Gtag, MinimalDynamicConfig } from './types';\nimport { GtagCommand, GTAG_URL } from './constants';\nimport { logger } from './logger';\nimport { AnalyticsError, ERROR_FACTORY } from './errors';\n\n// Possible parameter types for gtag 'event' and 'config' commands\ntype GtagConfigOrEventParams = ControlParams & EventParams & CustomParams;\n\n/**\n * Verifies and creates a TrustedScriptURL.\n */\nexport function createGtagTrustedTypesScriptURL(url: string): string {\n  if (!url.startsWith(GTAG_URL)) {\n    const err = ERROR_FACTORY.create(AnalyticsError.INVALID_GTAG_RESOURCE, {\n      gtagURL: url\n    });\n    logger.warn(err.message);\n    return '';\n  }\n  return url;\n}\n\n/**\n * Makeshift polyfill for Promise.allSettled(). Resolves when all promises\n * have either resolved or rejected.\n *\n * @param promises Array of promises to wait for.\n */\nexport function promiseAllSettled<T>(\n  promises: Array<Promise<T>>\n): Promise<T[]> {\n  return Promise.all(promises.map(promise => promise.catch(e => e)));\n}\n\n/**\n * Creates a TrustedTypePolicy object that implements the rules passed as policyOptions.\n *\n * @param policyName A string containing the name of the policy\n * @param policyOptions Object containing implementations of instance methods for TrustedTypesPolicy, see {@link https://developer.mozilla.org/en-US/docs/Web/API/TrustedTypePolicy#instance_methods\n * | the TrustedTypePolicy reference documentation}.\n */\nexport function createTrustedTypesPolicy(\n  policyName: string,\n  policyOptions: Partial<TrustedTypePolicyOptions>\n): Partial<TrustedTypePolicy> | undefined {\n  // Create a TrustedTypes policy that we can use for updating src\n  // properties\n  let trustedTypesPolicy: Partial<TrustedTypePolicy> | undefined;\n  if (window.trustedTypes) {\n    trustedTypesPolicy = window.trustedTypes.createPolicy(\n      policyName,\n      policyOptions\n    );\n  }\n  return trustedTypesPolicy;\n}\n\n/**\n * Inserts gtag script tag into the page to asynchronously download gtag.\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\n */\nexport function insertScriptTag(\n  dataLayerName: string,\n  measurementId: string\n): void {\n  const trustedTypesPolicy = createTrustedTypesPolicy(\n    'firebase-js-sdk-policy',\n    {\n      createScriptURL: createGtagTrustedTypesScriptURL\n    }\n  );\n\n  const script = document.createElement('script');\n  // We are not providing an analyticsId in the URL because it would trigger a `page_view`\n  // without fid. We will initialize ga-id using gtag (config) command together with fid.\n\n  const gtagScriptURL = `${GTAG_URL}?l=${dataLayerName}&id=${measurementId}`;\n  (script.src as string | TrustedScriptURL) = trustedTypesPolicy\n    ? (trustedTypesPolicy as TrustedTypePolicy)?.createScriptURL(gtagScriptURL)\n    : gtagScriptURL;\n\n  script.async = true;\n  document.head.appendChild(script);\n}\n\n/**\n * Get reference to, or create, global datalayer.\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\n */\nexport function getOrCreateDataLayer(dataLayerName: string): DataLayer {\n  // Check for existing dataLayer and create if needed.\n  let dataLayer: DataLayer = [];\n  if (Array.isArray(window[dataLayerName])) {\n    dataLayer = window[dataLayerName] as DataLayer;\n  } else {\n    window[dataLayerName] = dataLayer;\n  }\n  return dataLayer;\n}\n\n/**\n * Wrapped gtag logic when gtag is called with 'config' command.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n * @param measurementId GA Measurement ID to set config for.\n * @param gtagParams Gtag config params to set.\n */\nasync function gtagOnConfig(\n  gtagCore: Gtag,\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementIdToAppId: { [measurementId: string]: string },\n  measurementId: string,\n  gtagParams?: ControlParams & EventParams & CustomParams\n): Promise<void> {\n  // If config is already fetched, we know the appId and can use it to look up what FID promise we\n  /// are waiting for, and wait only on that one.\n  const correspondingAppId = measurementIdToAppId[measurementId as string];\n  try {\n    if (correspondingAppId) {\n      await initializationPromisesMap[correspondingAppId];\n    } else {\n      // If config is not fetched yet, wait for all configs (we don't know which one we need) and\n      // find the appId (if any) corresponding to this measurementId. If there is one, wait on\n      // that appId's initialization promise. If there is none, promise resolves and gtag\n      // call goes through.\n      const dynamicConfigResults = await promiseAllSettled(\n        dynamicConfigPromisesList\n      );\n      const foundConfig = dynamicConfigResults.find(\n        config => config.measurementId === measurementId\n      );\n      if (foundConfig) {\n        await initializationPromisesMap[foundConfig.appId];\n      }\n    }\n  } catch (e) {\n    logger.error(e);\n  }\n  gtagCore(GtagCommand.CONFIG, measurementId, gtagParams);\n}\n\n/**\n * Wrapped gtag logic when gtag is called with 'event' command.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementId GA Measurement ID to log event to.\n * @param gtagParams Params to log with this event.\n */\nasync function gtagOnEvent(\n  gtagCore: Gtag,\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementId: string,\n  gtagParams?: ControlParams & EventParams & CustomParams\n): Promise<void> {\n  try {\n    let initializationPromisesToWaitFor: Array<Promise<string>> = [];\n\n    // If there's a 'send_to' param, check if any ID specified matches\n    // an initializeIds() promise we are waiting for.\n    if (gtagParams && gtagParams['send_to']) {\n      let gaSendToList: string | string[] = gtagParams['send_to'];\n      // Make it an array if is isn't, so it can be dealt with the same way.\n      if (!Array.isArray(gaSendToList)) {\n        gaSendToList = [gaSendToList];\n      }\n      // Checking 'send_to' fields requires having all measurement ID results back from\n      // the dynamic config fetch.\n      const dynamicConfigResults = await promiseAllSettled(\n        dynamicConfigPromisesList\n      );\n      for (const sendToId of gaSendToList) {\n        // Any fetched dynamic measurement ID that matches this 'send_to' ID\n        const foundConfig = dynamicConfigResults.find(\n          config => config.measurementId === sendToId\n        );\n        const initializationPromise =\n          foundConfig && initializationPromisesMap[foundConfig.appId];\n        if (initializationPromise) {\n          initializationPromisesToWaitFor.push(initializationPromise);\n        } else {\n          // Found an item in 'send_to' that is not associated\n          // directly with an FID, possibly a group.  Empty this array,\n          // exit the loop early, and let it get populated below.\n          initializationPromisesToWaitFor = [];\n          break;\n        }\n      }\n    }\n\n    // This will be unpopulated if there was no 'send_to' field , or\n    // if not all entries in the 'send_to' field could be mapped to\n    // a FID. In these cases, wait on all pending initialization promises.\n    if (initializationPromisesToWaitFor.length === 0) {\n      /* eslint-disable-next-line @typescript-eslint/no-floating-promises */\n      initializationPromisesToWaitFor = Object.values(\n        initializationPromisesMap\n      );\n    }\n\n    // Run core gtag function with args after all relevant initialization\n    // promises have been resolved.\n    await Promise.all(initializationPromisesToWaitFor);\n    // Workaround for http://b/141370449 - third argument cannot be undefined.\n    gtagCore(GtagCommand.EVENT, measurementId, gtagParams || {});\n  } catch (e) {\n    logger.error(e);\n  }\n}\n\n/**\n * Wraps a standard gtag function with extra code to wait for completion of\n * relevant initialization promises before sending requests.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n */\nfunction wrapGtag(\n  gtagCore: Gtag,\n  /**\n   * Allows wrapped gtag calls to wait on whichever initialization promises are required,\n   * depending on the contents of the gtag params' `send_to` field, if any.\n   */\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  /**\n   * Wrapped gtag calls sometimes require all dynamic config fetches to have returned\n   * before determining what initialization promises (which include FIDs) to wait for.\n   */\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  /**\n   * Wrapped gtag config calls can narrow down which initialization promise (with FID)\n   * to wait for if the measurementId is already fetched, by getting the corresponding appId,\n   * which is the key for the initialization promises map.\n   */\n  measurementIdToAppId: { [measurementId: string]: string }\n): Gtag {\n  /**\n   * Wrapper around gtag that ensures FID is sent with gtag calls.\n   * @param command Gtag command type.\n   * @param idOrNameOrParams Measurement ID if command is EVENT/CONFIG, params if command is SET.\n   * @param gtagParams Params if event is EVENT/CONFIG.\n   */\n  async function gtagWrapper(\n    command: 'config' | 'set' | 'event' | 'consent' | 'get' | string,\n    ...args: unknown[]\n  ): Promise<void> {\n    try {\n      // If event, check that relevant initialization promises have completed.\n      if (command === GtagCommand.EVENT) {\n        const [measurementId, gtagParams] = args;\n        // If EVENT, second arg must be measurementId.\n        await gtagOnEvent(\n          gtagCore,\n          initializationPromisesMap,\n          dynamicConfigPromisesList,\n          measurementId as string,\n          gtagParams as GtagConfigOrEventParams\n        );\n      } else if (command === GtagCommand.CONFIG) {\n        const [measurementId, gtagParams] = args;\n        // If CONFIG, second arg must be measurementId.\n        await gtagOnConfig(\n          gtagCore,\n          initializationPromisesMap,\n          dynamicConfigPromisesList,\n          measurementIdToAppId,\n          measurementId as string,\n          gtagParams as GtagConfigOrEventParams\n        );\n      } else if (command === GtagCommand.CONSENT) {\n        const [consentAction, gtagParams] = args;\n        // consentAction can be one of 'default' or 'update'.\n        gtagCore(\n          GtagCommand.CONSENT,\n          consentAction,\n          gtagParams as ConsentSettings\n        );\n      } else if (command === GtagCommand.GET) {\n        const [measurementId, fieldName, callback] = args;\n        gtagCore(\n          GtagCommand.GET,\n          measurementId as string,\n          fieldName as string,\n          callback as (...args: unknown[]) => void\n        );\n      } else if (command === GtagCommand.SET) {\n        const [customParams] = args;\n        // If SET, second arg must be params.\n        gtagCore(GtagCommand.SET, customParams as CustomParams);\n      } else {\n        gtagCore(command, ...args);\n      }\n    } catch (e) {\n      logger.error(e);\n    }\n  }\n  return gtagWrapper as Gtag;\n}\n\n/**\n * Creates global gtag function or wraps existing one if found.\n * This wrapped function attaches Firebase instance ID (FID) to gtag 'config' and\n * 'event' calls that belong to the GAID associated with this Firebase instance.\n *\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n * @param dataLayerName Name of global GA datalayer array.\n * @param gtagFunctionName Name of global gtag function (\"gtag\" if not user-specified).\n */\nexport function wrapOrCreateGtag(\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementIdToAppId: { [measurementId: string]: string },\n  dataLayerName: string,\n  gtagFunctionName: string\n): {\n  gtagCore: Gtag;\n  wrappedGtag: Gtag;\n} {\n  // Create a basic core gtag function\n  let gtagCore: Gtag = function (..._args: unknown[]) {\n    // Must push IArguments object, not an array.\n    (window[dataLayerName] as DataLayer).push(arguments);\n  };\n\n  // Replace it with existing one if found\n  if (\n    window[gtagFunctionName] &&\n    typeof window[gtagFunctionName] === 'function'\n  ) {\n    // @ts-ignore\n    gtagCore = window[gtagFunctionName];\n  }\n\n  window[gtagFunctionName] = wrapGtag(\n    gtagCore,\n    initializationPromisesMap,\n    dynamicConfigPromisesList,\n    measurementIdToAppId\n  );\n\n  return {\n    gtagCore,\n    wrappedGtag: window[gtagFunctionName] as Gtag\n  };\n}\n\n/**\n * Returns the script tag in the DOM matching both the gtag url pattern\n * and the provided data layer name.\n */\nexport function findGtagScriptOnPage(\n  dataLayerName: string\n): HTMLScriptElement | null {\n  const scriptTags = window.document.getElementsByTagName('script');\n  for (const tag of Object.values(scriptTags)) {\n    if (\n      tag.src &&\n      tag.src.includes(GTAG_URL) &&\n      tag.src.includes(dataLayerName)\n    ) {\n      return tag;\n    }\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Most logic is copied from packages/remote-config/src/client/retrying_client.ts\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport { DynamicConfig, ThrottleMetadata, MinimalDynamicConfig } from './types';\nimport { FirebaseError, calculateBackoffMillis } from '@firebase/util';\nimport { AnalyticsError, ERROR_FACTORY } from './errors';\nimport { DYNAMIC_CONFIG_URL, FETCH_TIMEOUT_MILLIS } from './constants';\nimport { logger } from './logger';\n\n// App config fields needed by analytics.\nexport interface AppFields {\n  appId: string;\n  apiKey: string;\n  measurementId?: string;\n}\n\n/**\n * Backoff factor for 503 errors, which we want to be conservative about\n * to avoid overloading servers. Each retry interval will be\n * BASE_INTERVAL_MILLIS * LONG_RETRY_FACTOR ^ retryCount, so the second one\n * will be ~30 seconds (with fuzzing).\n */\nexport const LONG_RETRY_FACTOR = 30;\n\n/**\n * Base wait interval to multiplied by backoffFactor^backoffCount.\n */\nconst BASE_INTERVAL_MILLIS = 1000;\n\n/**\n * Stubbable retry data storage class.\n */\nclass RetryData {\n  constructor(\n    public throttleMetadata: { [appId: string]: ThrottleMetadata } = {},\n    public intervalMillis: number = BASE_INTERVAL_MILLIS\n  ) {}\n\n  getThrottleMetadata(appId: string): ThrottleMetadata {\n    return this.throttleMetadata[appId];\n  }\n\n  setThrottleMetadata(appId: string, metadata: ThrottleMetadata): void {\n    this.throttleMetadata[appId] = metadata;\n  }\n\n  deleteThrottleMetadata(appId: string): void {\n    delete this.throttleMetadata[appId];\n  }\n}\n\nconst defaultRetryData = new RetryData();\n\n/**\n * Set GET request headers.\n * @param apiKey App API key.\n */\nfunction getHeaders(apiKey: string): Headers {\n  return new Headers({\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\n\n/**\n * Fetches dynamic config from backend.\n * @param app Firebase app to fetch config for.\n */\nexport async function fetchDynamicConfig(\n  appFields: AppFields\n): Promise<DynamicConfig> {\n  const { appId, apiKey } = appFields;\n  const request: RequestInit = {\n    method: 'GET',\n    headers: getHeaders(apiKey)\n  };\n  const appUrl = DYNAMIC_CONFIG_URL.replace('{app-id}', appId);\n  const response = await fetch(appUrl, request);\n  if (response.status !== 200 && response.status !== 304) {\n    let errorMessage = '';\n    try {\n      // Try to get any error message text from server response.\n      const jsonResponse = (await response.json()) as {\n        error?: { message?: string };\n      };\n      if (jsonResponse.error?.message) {\n        errorMessage = jsonResponse.error.message;\n      }\n    } catch (_ignored) {}\n    throw ERROR_FACTORY.create(AnalyticsError.CONFIG_FETCH_FAILED, {\n      httpStatus: response.status,\n      responseMessage: errorMessage\n    });\n  }\n  return response.json();\n}\n\n/**\n * Fetches dynamic config from backend, retrying if failed.\n * @param app Firebase app to fetch config for.\n */\nexport async function fetchDynamicConfigWithRetry(\n  app: FirebaseApp,\n  // retryData and timeoutMillis are parameterized to allow passing a different value for testing.\n  retryData: RetryData = defaultRetryData,\n  timeoutMillis?: number\n): Promise<DynamicConfig | MinimalDynamicConfig> {\n  const { appId, apiKey, measurementId } = app.options;\n\n  if (!appId) {\n    throw ERROR_FACTORY.create(AnalyticsError.NO_APP_ID);\n  }\n\n  if (!apiKey) {\n    if (measurementId) {\n      return {\n        measurementId,\n        appId\n      };\n    }\n    throw ERROR_FACTORY.create(AnalyticsError.NO_API_KEY);\n  }\n\n  const throttleMetadata: ThrottleMetadata = retryData.getThrottleMetadata(\n    appId\n  ) || {\n    backoffCount: 0,\n    throttleEndTimeMillis: Date.now()\n  };\n\n  const signal = new AnalyticsAbortSignal();\n\n  setTimeout(\n    async () => {\n      // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\n      signal.abort();\n    },\n    timeoutMillis !== undefined ? timeoutMillis : FETCH_TIMEOUT_MILLIS\n  );\n\n  return attemptFetchDynamicConfigWithRetry(\n    { appId, apiKey, measurementId },\n    throttleMetadata,\n    signal,\n    retryData\n  );\n}\n\n/**\n * Runs one retry attempt.\n * @param appFields Necessary app config fields.\n * @param throttleMetadata Ongoing metadata to determine throttling times.\n * @param signal Abort signal.\n */\nasync function attemptFetchDynamicConfigWithRetry(\n  appFields: AppFields,\n  { throttleEndTimeMillis, backoffCount }: ThrottleMetadata,\n  signal: AnalyticsAbortSignal,\n  retryData: RetryData = defaultRetryData // for testing\n): Promise<DynamicConfig | MinimalDynamicConfig> {\n  const { appId, measurementId } = appFields;\n  // Starts with a (potentially zero) timeout to support resumption from stored state.\n  // Ensures the throttle end time is honored if the last attempt timed out.\n  // Note the SDK will never make a request if the fetch timeout expires at this point.\n  try {\n    await setAbortableTimeout(signal, throttleEndTimeMillis);\n  } catch (e) {\n    if (measurementId) {\n      logger.warn(\n        `Timed out fetching this Firebase app's measurement ID from the server.` +\n          ` Falling back to the measurement ID ${measurementId}` +\n          ` provided in the \"measurementId\" field in the local Firebase config. [${\n            (e as Error)?.message\n          }]`\n      );\n      return { appId, measurementId };\n    }\n    throw e;\n  }\n\n  try {\n    const response = await fetchDynamicConfig(appFields);\n\n    // Note the SDK only clears throttle state if response is success or non-retriable.\n    retryData.deleteThrottleMetadata(appId);\n\n    return response;\n  } catch (e) {\n    const error = e as Error;\n    if (!isRetriableError(error)) {\n      retryData.deleteThrottleMetadata(appId);\n      if (measurementId) {\n        logger.warn(\n          `Failed to fetch this Firebase app's measurement ID from the server.` +\n            ` Falling back to the measurement ID ${measurementId}` +\n            ` provided in the \"measurementId\" field in the local Firebase config. [${error?.message}]`\n        );\n        return { appId, measurementId };\n      } else {\n        throw e;\n      }\n    }\n\n    const backoffMillis =\n      Number(error?.customData?.httpStatus) === 503\n        ? calculateBackoffMillis(\n            backoffCount,\n            retryData.intervalMillis,\n            LONG_RETRY_FACTOR\n          )\n        : calculateBackoffMillis(backoffCount, retryData.intervalMillis);\n\n    // Increments backoff state.\n    const throttleMetadata = {\n      throttleEndTimeMillis: Date.now() + backoffMillis,\n      backoffCount: backoffCount + 1\n    };\n\n    // Persists state.\n    retryData.setThrottleMetadata(appId, throttleMetadata);\n    logger.debug(`Calling attemptFetch again in ${backoffMillis} millis`);\n\n    return attemptFetchDynamicConfigWithRetry(\n      appFields,\n      throttleMetadata,\n      signal,\n      retryData\n    );\n  }\n}\n\n/**\n * Supports waiting on a backoff by:\n *\n * <ul>\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\n *       request appear the same.</li>\n * </ul>\n *\n * <p>Visible for testing.\n */\nfunction setAbortableTimeout(\n  signal: AnalyticsAbortSignal,\n  throttleEndTimeMillis: number\n): Promise<void> {\n  return new Promise((resolve, reject) => {\n    // Derives backoff from given end time, normalizing negative numbers to zero.\n    const backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\n\n    const timeout = setTimeout(resolve, backoffMillis);\n\n    // Adds listener, rather than sets onabort, because signal is a shared object.\n    signal.addEventListener(() => {\n      clearTimeout(timeout);\n      // If the request completes before this timeout, the rejection has no effect.\n      reject(\n        ERROR_FACTORY.create(AnalyticsError.FETCH_THROTTLE, {\n          throttleEndTimeMillis\n        })\n      );\n    });\n  });\n}\n\ntype RetriableError = FirebaseError & { customData: { httpStatus: string } };\n\n/**\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\n */\nfunction isRetriableError(e: Error): e is RetriableError {\n  if (!(e instanceof FirebaseError) || !e.customData) {\n    return false;\n  }\n\n  // Uses string index defined by ErrorData, which FirebaseError implements.\n  const httpStatus = Number(e.customData['httpStatus']);\n\n  return (\n    httpStatus === 429 ||\n    httpStatus === 500 ||\n    httpStatus === 503 ||\n    httpStatus === 504\n  );\n}\n\n/**\n * Shims a minimal AbortSignal (copied from Remote Config).\n *\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\n * swapped out if/when we do.\n */\nexport class AnalyticsAbortSignal {\n  listeners: Array<() => void> = [];\n  addEventListener(listener: () => void): void {\n    this.listeners.push(listener);\n  }\n  abort(): void {\n    this.listeners.forEach(listener => listener());\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AnalyticsCallOptions,\n  CustomParams,\n  ControlParams,\n  EventParams,\n  ConsentSettings\n} from './public-types';\nimport { Gtag } from './types';\nimport { GtagCommand } from './constants';\nimport { AnalyticsError, ERROR_FACTORY } from './errors';\n\n/**\n * Event parameters to set on 'gtag' during initialization.\n */\nexport let defaultEventParametersForInit: CustomParams | undefined;\n\n/**\n * Logs an analytics event through the Firebase SDK.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param eventName Google Analytics event name, choose from standard list or use a custom string.\n * @param eventParams Analytics event parameters.\n */\nexport async function logEvent(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  eventName: string,\n  eventParams?: EventParams,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.EVENT, eventName, eventParams);\n    return;\n  } else {\n    const measurementId = await initializationPromise;\n    const params: EventParams | ControlParams = {\n      ...eventParams,\n      'send_to': measurementId\n    };\n    gtagFunction(GtagCommand.EVENT, eventName, params);\n  }\n}\n\n/**\n * Set screen_name parameter for this Google Analytics ID.\n *\n * @deprecated Use {@link logEvent} with `eventName` as 'screen_view' and add relevant `eventParams`.\n * See {@link https://firebase.google.com/docs/analytics/screenviews | Track Screenviews}.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param screenName Screen name string to set.\n */\nexport async function setCurrentScreen(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  screenName: string | null,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.SET, { 'screen_name': screenName });\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(GtagCommand.CONFIG, measurementId, {\n      update: true,\n      'screen_name': screenName\n    });\n  }\n}\n\n/**\n * Set user_id parameter for this Google Analytics ID.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param id User ID string to set\n */\nexport async function setUserId(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  id: string | null,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.SET, { 'user_id': id });\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(GtagCommand.CONFIG, measurementId, {\n      update: true,\n      'user_id': id\n    });\n  }\n}\n\n/**\n * Set all other user properties other than user_id and screen_name.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param properties Map of user properties to set\n */\nexport async function setUserProperties(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  properties: CustomParams,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    const flatProperties: { [key: string]: unknown } = {};\n    for (const key of Object.keys(properties)) {\n      // use dot notation for merge behavior in gtag.js\n      flatProperties[`user_properties.${key}`] = properties[key];\n    }\n    gtagFunction(GtagCommand.SET, flatProperties);\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(GtagCommand.CONFIG, measurementId, {\n      update: true,\n      'user_properties': properties\n    });\n  }\n}\n\n/**\n * Retrieves a unique Google Analytics identifier for the web client.\n * See {@link https://developers.google.com/analytics/devguides/collection/ga4/reference/config#client_id | client_id}.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n */\nexport async function internalGetGoogleAnalyticsClientId(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>\n): Promise<string> {\n  const measurementId = await initializationPromise;\n  return new Promise((resolve, reject) => {\n    gtagFunction(\n      GtagCommand.GET,\n      measurementId,\n      'client_id',\n      (clientId: string) => {\n        if (!clientId) {\n          reject(ERROR_FACTORY.create(AnalyticsError.NO_CLIENT_ID));\n        }\n        resolve(clientId);\n      }\n    );\n  });\n}\n\n/**\n * Set whether collection is enabled for this ID.\n *\n * @param enabled If true, collection is enabled for this ID.\n */\nexport async function setAnalyticsCollectionEnabled(\n  initializationPromise: Promise<string>,\n  enabled: boolean\n): Promise<void> {\n  const measurementId = await initializationPromise;\n  window[`ga-disable-${measurementId}`] = !enabled;\n}\n\n/**\n * Consent parameters to default to during 'gtag' initialization.\n */\nexport let defaultConsentSettingsForInit: ConsentSettings | undefined;\n\n/**\n * Sets the variable {@link defaultConsentSettingsForInit} for use in the initialization of\n * analytics.\n *\n * @param consentSettings Maps the applicable end user consent state for gtag.js.\n */\nexport function _setConsentDefaultForInit(\n  consentSettings?: ConsentSettings\n): void {\n  defaultConsentSettingsForInit = consentSettings;\n}\n\n/**\n * Sets the variable `defaultEventParametersForInit` for use in the initialization of\n * analytics.\n *\n * @param customParams Any custom params the user may pass to gtag.js.\n */\nexport function _setDefaultEventParametersForInit(\n  customParams?: CustomParams\n): void {\n  defaultEventParametersForInit = customParams;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DynamicConfig, Gtag, MinimalDynamicConfig } from './types';\nimport { GtagCommand, GA_FID_KEY, ORIGIN_KEY } from './constants';\nimport { _FirebaseInstallationsInternal } from '@firebase/installations';\nimport { fetchDynamicConfigWithRetry } from './get-config';\nimport { logger } from './logger';\nimport { FirebaseApp } from '@firebase/app';\nimport {\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable\n} from '@firebase/util';\nimport { ERROR_FACTORY, AnalyticsError } from './errors';\nimport { findGtagScriptOnPage, insertScriptTag } from './helpers';\nimport { AnalyticsSettings } from './public-types';\nimport {\n  defaultConsentSettingsForInit,\n  _setConsentDefaultForInit,\n  defaultEventParametersForInit,\n  _setDefaultEventParametersForInit\n} from './functions';\n\nasync function validateIndexedDB(): Promise<boolean> {\n  if (!isIndexedDBAvailable()) {\n    logger.warn(\n      ERROR_FACTORY.create(AnalyticsError.INDEXEDDB_UNAVAILABLE, {\n        errorInfo: 'IndexedDB is not available in this environment.'\n      }).message\n    );\n    return false;\n  } else {\n    try {\n      await validateIndexedDBOpenable();\n    } catch (e) {\n      logger.warn(\n        ERROR_FACTORY.create(AnalyticsError.INDEXEDDB_UNAVAILABLE, {\n          errorInfo: (e as Error)?.toString()\n        }).message\n      );\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Initialize the analytics instance in gtag.js by calling config command with fid.\n *\n * NOTE: We combine analytics initialization and setting fid together because we want fid to be\n * part of the `page_view` event that's sent during the initialization\n * @param app Firebase app\n * @param gtagCore The gtag function that's not wrapped.\n * @param dynamicConfigPromisesList Array of all dynamic config promises.\n * @param measurementIdToAppId Maps measurementID to appID.\n * @param installations _FirebaseInstallationsInternal instance.\n *\n * @returns Measurement ID.\n */\nexport async function _initializeAnalytics(\n  app: FirebaseApp,\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementIdToAppId: { [key: string]: string },\n  installations: _FirebaseInstallationsInternal,\n  gtagCore: Gtag,\n  dataLayerName: string,\n  options?: AnalyticsSettings\n): Promise<string> {\n  const dynamicConfigPromise = fetchDynamicConfigWithRetry(app);\n  // Once fetched, map measurementIds to appId, for ease of lookup in wrapped gtag function.\n  dynamicConfigPromise\n    .then(config => {\n      measurementIdToAppId[config.measurementId] = config.appId;\n      if (\n        app.options.measurementId &&\n        config.measurementId !== app.options.measurementId\n      ) {\n        logger.warn(\n          `The measurement ID in the local Firebase config (${app.options.measurementId})` +\n            ` does not match the measurement ID fetched from the server (${config.measurementId}).` +\n            ` To ensure analytics events are always sent to the correct Analytics property,` +\n            ` update the` +\n            ` measurement ID field in the local config or remove it from the local config.`\n        );\n      }\n    })\n    .catch(e => logger.error(e));\n  // Add to list to track state of all dynamic config promises.\n  dynamicConfigPromisesList.push(dynamicConfigPromise);\n\n  const fidPromise: Promise<string | undefined> = validateIndexedDB().then(\n    envIsValid => {\n      if (envIsValid) {\n        return installations.getId();\n      } else {\n        return undefined;\n      }\n    }\n  );\n\n  const [dynamicConfig, fid] = await Promise.all([\n    dynamicConfigPromise,\n    fidPromise\n  ]);\n\n  // Detect if user has already put the gtag <script> tag on this page with the passed in\n  // data layer name.\n  if (!findGtagScriptOnPage(dataLayerName)) {\n    insertScriptTag(dataLayerName, dynamicConfig.measurementId);\n  }\n\n  // Detects if there are consent settings that need to be configured.\n  if (defaultConsentSettingsForInit) {\n    gtagCore(GtagCommand.CONSENT, 'default', defaultConsentSettingsForInit);\n    _setConsentDefaultForInit(undefined);\n  }\n\n  // This command initializes gtag.js and only needs to be called once for the entire web app,\n  // but since it is idempotent, we can call it multiple times.\n  // We keep it together with other initialization logic for better code structure.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (gtagCore as any)('js', new Date());\n  // User config added first. We don't want users to accidentally overwrite\n  // base Firebase config properties.\n  const configProperties: Record<string, unknown> = options?.config ?? {};\n\n  // guard against developers accidentally setting properties with prefix `firebase_`\n  configProperties[ORIGIN_KEY] = 'firebase';\n  configProperties.update = true;\n\n  if (fid != null) {\n    configProperties[GA_FID_KEY] = fid;\n  }\n\n  // It should be the first config command called on this GA-ID\n  // Initialize this GA-ID and set FID on it using the gtag config API.\n  // Note: This will trigger a page_view event unless 'send_page_view' is set to false in\n  // `configProperties`.\n  gtagCore(GtagCommand.CONFIG, dynamicConfig.measurementId, configProperties);\n\n  // Detects if there is data that will be set on every event logged from the SDK.\n  if (defaultEventParametersForInit) {\n    gtagCore(GtagCommand.SET, defaultEventParametersForInit);\n    _setDefaultEventParametersForInit(undefined);\n  }\n\n  return dynamicConfig.measurementId;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SettingsOptions, Analytics, AnalyticsSettings } from './public-types';\nimport { Gtag, DynamicConfig, MinimalDynamicConfig } from './types';\nimport { getOrCreateDataLayer, wrapOrCreateGtag } from './helpers';\nimport { AnalyticsError, ERROR_FACTORY } from './errors';\nimport { _FirebaseInstallationsInternal } from '@firebase/installations';\nimport { areCookiesEnabled, isBrowserExtension } from '@firebase/util';\nimport { _initializeAnalytics } from './initialize-analytics';\nimport { logger } from './logger';\nimport { FirebaseApp, _FirebaseService } from '@firebase/app';\n\n/**\n * Analytics Service class.\n */\nexport class AnalyticsService implements Analytics, _FirebaseService {\n  constructor(public app: FirebaseApp) {}\n  _delete(): Promise<void> {\n    delete initializationPromisesMap[this.app.options.appId!];\n    return Promise.resolve();\n  }\n}\n\n/**\n * Maps appId to full initialization promise. Wrapped gtag calls must wait on\n * all or some of these, depending on the call's `send_to` param and the status\n * of the dynamic config fetches (see below).\n */\nexport let initializationPromisesMap: {\n  [appId: string]: Promise<string>; // Promise contains measurement ID string.\n} = {};\n\n/**\n * List of dynamic config fetch promises. In certain cases, wrapped gtag calls\n * wait on all these to be complete in order to determine if it can selectively\n * wait for only certain initialization (FID) promises or if it must wait for all.\n */\nlet dynamicConfigPromisesList: Array<\n  Promise<DynamicConfig | MinimalDynamicConfig>\n> = [];\n\n/**\n * Maps fetched measurementIds to appId. Populated when the app's dynamic config\n * fetch completes. If already populated, gtag config calls can use this to\n * selectively wait for only this app's initialization promise (FID) instead of all\n * initialization promises.\n */\nconst measurementIdToAppId: { [measurementId: string]: string } = {};\n\n/**\n * Name for window global data layer array used by GA: defaults to 'dataLayer'.\n */\nlet dataLayerName: string = 'dataLayer';\n\n/**\n * Name for window global gtag function used by GA: defaults to 'gtag'.\n */\nlet gtagName: string = 'gtag';\n\n/**\n * Reproduction of standard gtag function or reference to existing\n * gtag function on window object.\n */\nlet gtagCoreFunction: Gtag;\n\n/**\n * Wrapper around gtag function that ensures FID is sent with all\n * relevant event and config calls.\n */\nexport let wrappedGtagFunction: Gtag;\n\n/**\n * Flag to ensure page initialization steps (creation or wrapping of\n * dataLayer and gtag script) are only run once per page load.\n */\nlet globalInitDone: boolean = false;\n\n/**\n * For testing\n * @internal\n */\nexport function resetGlobalVars(\n  newGlobalInitDone = false,\n  newInitializationPromisesMap = {},\n  newDynamicPromises = []\n): void {\n  globalInitDone = newGlobalInitDone;\n  initializationPromisesMap = newInitializationPromisesMap;\n  dynamicConfigPromisesList = newDynamicPromises;\n  dataLayerName = 'dataLayer';\n  gtagName = 'gtag';\n}\n\n/**\n * For testing\n * @internal\n */\nexport function getGlobalVars(): {\n  initializationPromisesMap: { [appId: string]: Promise<string> };\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >;\n} {\n  return {\n    initializationPromisesMap,\n    dynamicConfigPromisesList\n  };\n}\n\n/**\n * Configures Firebase Analytics to use custom `gtag` or `dataLayer` names.\n * Intended to be used if `gtag.js` script has been installed on\n * this page independently of Firebase Analytics, and is using non-default\n * names for either the `gtag` function or for `dataLayer`.\n * Must be called before calling `getAnalytics()` or it won't\n * have any effect.\n *\n * @public\n *\n * @param options - Custom gtag and dataLayer names.\n */\nexport function settings(options: SettingsOptions): void {\n  if (globalInitDone) {\n    throw ERROR_FACTORY.create(AnalyticsError.ALREADY_INITIALIZED);\n  }\n  if (options.dataLayerName) {\n    dataLayerName = options.dataLayerName;\n  }\n  if (options.gtagName) {\n    gtagName = options.gtagName;\n  }\n}\n\n/**\n * Returns true if no environment mismatch is found.\n * If environment mismatches are found, throws an INVALID_ANALYTICS_CONTEXT\n * error that also lists details for each mismatch found.\n */\nfunction warnOnBrowserContextMismatch(): void {\n  const mismatchedEnvMessages = [];\n  if (isBrowserExtension()) {\n    mismatchedEnvMessages.push('This is a browser extension environment.');\n  }\n  if (!areCookiesEnabled()) {\n    mismatchedEnvMessages.push('Cookies are not available.');\n  }\n  if (mismatchedEnvMessages.length > 0) {\n    const details = mismatchedEnvMessages\n      .map((message, index) => `(${index + 1}) ${message}`)\n      .join(' ');\n    const err = ERROR_FACTORY.create(AnalyticsError.INVALID_ANALYTICS_CONTEXT, {\n      errorInfo: details\n    });\n    logger.warn(err.message);\n  }\n}\n\n/**\n * Analytics instance factory.\n * @internal\n */\nexport function factory(\n  app: FirebaseApp,\n  installations: _FirebaseInstallationsInternal,\n  options?: AnalyticsSettings\n): AnalyticsService {\n  warnOnBrowserContextMismatch();\n  const appId = app.options.appId;\n  if (!appId) {\n    throw ERROR_FACTORY.create(AnalyticsError.NO_APP_ID);\n  }\n  if (!app.options.apiKey) {\n    if (app.options.measurementId) {\n      logger.warn(\n        `The \"apiKey\" field is empty in the local Firebase config. This is needed to fetch the latest` +\n          ` measurement ID for this Firebase app. Falling back to the measurement ID ${app.options.measurementId}` +\n          ` provided in the \"measurementId\" field in the local Firebase config.`\n      );\n    } else {\n      throw ERROR_FACTORY.create(AnalyticsError.NO_API_KEY);\n    }\n  }\n  if (initializationPromisesMap[appId] != null) {\n    throw ERROR_FACTORY.create(AnalyticsError.ALREADY_EXISTS, {\n      id: appId\n    });\n  }\n\n  if (!globalInitDone) {\n    // Steps here should only be done once per page: creation or wrapping\n    // of dataLayer and global gtag function.\n\n    getOrCreateDataLayer(dataLayerName);\n\n    const { wrappedGtag, gtagCore } = wrapOrCreateGtag(\n      initializationPromisesMap,\n      dynamicConfigPromisesList,\n      measurementIdToAppId,\n      dataLayerName,\n      gtagName\n    );\n    wrappedGtagFunction = wrappedGtag;\n    gtagCoreFunction = gtagCore;\n\n    globalInitDone = true;\n  }\n  // Async but non-blocking.\n  // This map reflects the completion state of all promises for each appId.\n  initializationPromisesMap[appId] = _initializeAnalytics(\n    app,\n    dynamicConfigPromisesList,\n    measurementIdToAppId,\n    installations,\n    gtagCoreFunction,\n    dataLayerName,\n    options\n  );\n\n  const analyticsInstance: AnalyticsService = new AnalyticsService(app);\n\n  return analyticsInstance;\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable camelcase */\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _getProvider, FirebaseApp, getApp } from '@firebase/app';\nimport {\n  Analytics,\n  AnalyticsCallOptions,\n  AnalyticsSettings,\n  ConsentSettings,\n  CustomParams,\n  EventNameString,\n  EventParams\n} from './public-types';\nimport { Provider } from '@firebase/component';\nimport {\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable,\n  areCookiesEnabled,\n  isBrowserExtension,\n  getModularInstance,\n  deepEqual\n} from '@firebase/util';\nimport { ANALYTICS_TYPE, GtagCommand } from './constants';\nimport {\n  AnalyticsService,\n  initializationPromisesMap,\n  wrappedGtagFunction\n} from './factory';\nimport { logger } from './logger';\nimport {\n  logEvent as internalLogEvent,\n  setCurrentScreen as internalSetCurrentScreen,\n  setUserId as internalSetUserId,\n  setUserProperties as internalSetUserProperties,\n  setAnalyticsCollectionEnabled as internalSetAnalyticsCollectionEnabled,\n  _setConsentDefaultForInit,\n  _setDefaultEventParametersForInit,\n  internalGetGoogleAnalyticsClientId\n} from './functions';\nimport { ERROR_FACTORY, AnalyticsError } from './errors';\n\nexport { settings } from './factory';\n\ndeclare module '@firebase/component' {\n  interface NameServiceMapping {\n    [ANALYTICS_TYPE]: AnalyticsService;\n  }\n}\n\n/**\n * Returns an {@link Analytics} instance for the given app.\n *\n * @public\n *\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\n */\nexport function getAnalytics(app: FirebaseApp = getApp()): Analytics {\n  app = getModularInstance(app);\n  // Dependencies\n  const analyticsProvider: Provider<'analytics'> = _getProvider(\n    app,\n    ANALYTICS_TYPE\n  );\n\n  if (analyticsProvider.isInitialized()) {\n    return analyticsProvider.getImmediate();\n  }\n\n  return initializeAnalytics(app);\n}\n\n/**\n * Returns an {@link Analytics} instance for the given app.\n *\n * @public\n *\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\n */\nexport function initializeAnalytics(\n  app: FirebaseApp,\n  options: AnalyticsSettings = {}\n): Analytics {\n  // Dependencies\n  const analyticsProvider: Provider<'analytics'> = _getProvider(\n    app,\n    ANALYTICS_TYPE\n  );\n  if (analyticsProvider.isInitialized()) {\n    const existingInstance = analyticsProvider.getImmediate();\n    if (deepEqual(options, analyticsProvider.getOptions())) {\n      return existingInstance;\n    } else {\n      throw ERROR_FACTORY.create(AnalyticsError.ALREADY_INITIALIZED);\n    }\n  }\n  const analyticsInstance = analyticsProvider.initialize({ options });\n  return analyticsInstance;\n}\n\n/**\n * This is a public static method provided to users that wraps four different checks:\n *\n * 1. Check if it's not a browser extension environment.\n * 2. Check if cookies are enabled in current browser.\n * 3. Check if IndexedDB is supported by the browser environment.\n * 4. Check if the current browser context is valid for using `IndexedDB.open()`.\n *\n * @public\n *\n */\nexport async function isSupported(): Promise<boolean> {\n  if (isBrowserExtension()) {\n    return false;\n  }\n  if (!areCookiesEnabled()) {\n    return false;\n  }\n  if (!isIndexedDBAvailable()) {\n    return false;\n  }\n\n  try {\n    const isDBOpenable: boolean = await validateIndexedDBOpenable();\n    return isDBOpenable;\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Use gtag `config` command to set `screen_name`.\n *\n * @public\n *\n * @deprecated Use {@link logEvent} with `eventName` as 'screen_view' and add relevant `eventParams`.\n * See {@link https://firebase.google.com/docs/analytics/screenviews | Track Screenviews}.\n *\n * @param analyticsInstance - The {@link Analytics} instance.\n * @param screenName - Screen name to set.\n */\nexport function setCurrentScreen(\n  analyticsInstance: Analytics,\n  screenName: string,\n  options?: AnalyticsCallOptions\n): void {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  internalSetCurrentScreen(\n    wrappedGtagFunction,\n    initializationPromisesMap[analyticsInstance.app.options.appId!],\n    screenName,\n    options\n  ).catch(e => logger.error(e));\n}\n\n/**\n * Retrieves a unique Google Analytics identifier for the web client.\n * See {@link https://developers.google.com/analytics/devguides/collection/ga4/reference/config#client_id | client_id}.\n *\n * @public\n *\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\n */\nexport async function getGoogleAnalyticsClientId(\n  analyticsInstance: Analytics\n): Promise<string> {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  return internalGetGoogleAnalyticsClientId(\n    wrappedGtagFunction,\n    initializationPromisesMap[analyticsInstance.app.options.appId!]\n  );\n}\n\n/**\n * Use gtag `config` command to set `user_id`.\n *\n * @public\n *\n * @param analyticsInstance - The {@link Analytics} instance.\n * @param id - User ID to set.\n */\nexport function setUserId(\n  analyticsInstance: Analytics,\n  id: string | null,\n  options?: AnalyticsCallOptions\n): void {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  internalSetUserId(\n    wrappedGtagFunction,\n    initializationPromisesMap[analyticsInstance.app.options.appId!],\n    id,\n    options\n  ).catch(e => logger.error(e));\n}\n\n/**\n * Use gtag `config` command to set all params specified.\n *\n * @public\n */\nexport function setUserProperties(\n  analyticsInstance: Analytics,\n  properties: CustomParams,\n  options?: AnalyticsCallOptions\n): void {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  internalSetUserProperties(\n    wrappedGtagFunction,\n    initializationPromisesMap[analyticsInstance.app.options.appId!],\n    properties,\n    options\n  ).catch(e => logger.error(e));\n}\n\n/**\n * Sets whether Google Analytics collection is enabled for this app on this device.\n * Sets global `window['ga-disable-analyticsId'] = true;`\n *\n * @public\n *\n * @param analyticsInstance - The {@link Analytics} instance.\n * @param enabled - If true, enables collection, if false, disables it.\n */\nexport function setAnalyticsCollectionEnabled(\n  analyticsInstance: Analytics,\n  enabled: boolean\n): void {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  internalSetAnalyticsCollectionEnabled(\n    initializationPromisesMap[analyticsInstance.app.options.appId!],\n    enabled\n  ).catch(e => logger.error(e));\n}\n\n/**\n * Adds data that will be set on every event logged from the SDK, including automatic ones.\n * With gtag's \"set\" command, the values passed persist on the current page and are passed with\n * all subsequent events.\n * @public\n * @param customParams - Any custom params the user may pass to gtag.js.\n */\nexport function setDefaultEventParameters(customParams: CustomParams): void {\n  // Check if reference to existing gtag function on window object exists\n  if (wrappedGtagFunction) {\n    wrappedGtagFunction(GtagCommand.SET, customParams);\n  } else {\n    _setDefaultEventParametersForInit(customParams);\n  }\n}\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'add_payment_info',\n  eventParams?: {\n    coupon?: EventParams['coupon'];\n    currency?: EventParams['currency'];\n    items?: EventParams['items'];\n    payment_type?: EventParams['payment_type'];\n    value?: EventParams['value'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'add_shipping_info',\n  eventParams?: {\n    coupon?: EventParams['coupon'];\n    currency?: EventParams['currency'];\n    items?: EventParams['items'];\n    shipping_tier?: EventParams['shipping_tier'];\n    value?: EventParams['value'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'add_to_cart' | 'add_to_wishlist' | 'remove_from_cart',\n  eventParams?: {\n    currency?: EventParams['currency'];\n    value?: EventParams['value'];\n    items?: EventParams['items'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'begin_checkout',\n  eventParams?: {\n    currency?: EventParams['currency'];\n    coupon?: EventParams['coupon'];\n    value?: EventParams['value'];\n    items?: EventParams['items'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'checkout_progress',\n  eventParams?: {\n    currency?: EventParams['currency'];\n    coupon?: EventParams['coupon'];\n    value?: EventParams['value'];\n    items?: EventParams['items'];\n    checkout_step?: EventParams['checkout_step'];\n    checkout_option?: EventParams['checkout_option'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * See\n * {@link https://developers.google.com/analytics/devguides/collection/ga4/exceptions\n * | Measure exceptions}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'exception',\n  eventParams?: {\n    description?: EventParams['description'];\n    fatal?: EventParams['fatal'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'generate_lead',\n  eventParams?: {\n    value?: EventParams['value'];\n    currency?: EventParams['currency'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'login',\n  eventParams?: {\n    method?: EventParams['method'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * See\n * {@link https://developers.google.com/analytics/devguides/collection/ga4/views\n * | Page views}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'page_view',\n  eventParams?: {\n    page_title?: string;\n    page_location?: string;\n    page_path?: string;\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'purchase' | 'refund',\n  eventParams?: {\n    value?: EventParams['value'];\n    currency?: EventParams['currency'];\n    transaction_id: EventParams['transaction_id'];\n    tax?: EventParams['tax'];\n    shipping?: EventParams['shipping'];\n    items?: EventParams['items'];\n    coupon?: EventParams['coupon'];\n    affiliation?: EventParams['affiliation'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * See {@link https://firebase.google.com/docs/analytics/screenviews\n * | Track Screenviews}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'screen_view',\n  eventParams?: {\n    firebase_screen: EventParams['firebase_screen'];\n    firebase_screen_class: EventParams['firebase_screen_class'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'search' | 'view_search_results',\n  eventParams?: {\n    search_term?: EventParams['search_term'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'select_content',\n  eventParams?: {\n    content_type?: EventParams['content_type'];\n    item_id?: EventParams['item_id'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'select_item',\n  eventParams?: {\n    items?: EventParams['items'];\n    item_list_name?: EventParams['item_list_name'];\n    item_list_id?: EventParams['item_list_id'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'select_promotion' | 'view_promotion',\n  eventParams?: {\n    items?: EventParams['items'];\n    promotion_id?: EventParams['promotion_id'];\n    promotion_name?: EventParams['promotion_name'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'set_checkout_option',\n  eventParams?: {\n    checkout_step?: EventParams['checkout_step'];\n    checkout_option?: EventParams['checkout_option'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'share',\n  eventParams?: {\n    method?: EventParams['method'];\n    content_type?: EventParams['content_type'];\n    item_id?: EventParams['item_id'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'sign_up',\n  eventParams?: {\n    method?: EventParams['method'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'timing_complete',\n  eventParams?: {\n    name: string;\n    value: number;\n    event_category?: string;\n    event_label?: string;\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'view_cart' | 'view_item',\n  eventParams?: {\n    currency?: EventParams['currency'];\n    items?: EventParams['items'];\n    value?: EventParams['value'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'view_item_list',\n  eventParams?: {\n    items?: EventParams['items'];\n    item_list_name?: EventParams['item_list_name'];\n    item_list_id?: EventParams['item_list_id'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent<T extends string>(\n  analyticsInstance: Analytics,\n  eventName: CustomEventName<T>,\n  eventParams?: { [key: string]: any },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * List of official event parameters can be found in the gtag.js\n * reference documentation:\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n *\n * @public\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: string,\n  eventParams?: EventParams,\n  options?: AnalyticsCallOptions\n): void {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  internalLogEvent(\n    wrappedGtagFunction,\n    initializationPromisesMap[analyticsInstance.app.options.appId!],\n    eventName,\n    eventParams,\n    options\n  ).catch(e => logger.error(e));\n}\n\n/**\n * Any custom event name string not in the standard list of recommended\n * event names.\n * @public\n */\nexport type CustomEventName<T> = T extends EventNameString ? never : T;\n\n/**\n * Sets the applicable end user consent state for this web app across all gtag references once\n * Firebase Analytics is initialized.\n *\n * Use the {@link ConsentSettings} to specify individual consent type values. By default consent\n * types are set to \"granted\".\n * @public\n * @param consentSettings - Maps the applicable end user consent state for gtag.js.\n */\nexport function setConsent(consentSettings: ConsentSettings): void {\n  // Check if reference to existing gtag function on window object exists\n  if (wrappedGtagFunction) {\n    wrappedGtagFunction(GtagCommand.CONSENT, 'update', consentSettings);\n  } else {\n    _setConsentDefaultForInit(consentSettings);\n  }\n}\n","/**\n * The Firebase Analytics Web SDK.\n * This SDK does not work in a Node.js environment.\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { registerVersion, _registerComponent } from '@firebase/app';\nimport { FirebaseAnalyticsInternal } from '@firebase/analytics-interop-types';\nimport { factory } from './factory';\nimport { ANALYTICS_TYPE } from './constants';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer,\n  InstanceFactoryOptions\n} from '@firebase/component';\nimport { ERROR_FACTORY, AnalyticsError } from './errors';\nimport { logEvent } from './api';\nimport { name, version } from '../package.json';\nimport { AnalyticsCallOptions } from './public-types';\nimport '@firebase/installations';\n\ndeclare global {\n  interface Window {\n    [key: string]: unknown;\n  }\n}\n\nfunction registerAnalytics(): void {\n  _registerComponent(\n    new Component(\n      ANALYTICS_TYPE,\n      (container, { options: analyticsOptions }: InstanceFactoryOptions) => {\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app').getImmediate();\n        const installations = container\n          .getProvider('installations-internal')\n          .getImmediate();\n\n        return factory(app, installations, analyticsOptions);\n      },\n      ComponentType.PUBLIC\n    )\n  );\n\n  _registerComponent(\n    new Component('analytics-internal', internalFactory, ComponentType.PRIVATE)\n  );\n\n  registerVersion(name, version);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n\n  function internalFactory(\n    container: ComponentContainer\n  ): FirebaseAnalyticsInternal {\n    try {\n      const analytics = container.getProvider(ANALYTICS_TYPE).getImmediate();\n      return {\n        logEvent: (\n          eventName: string,\n          eventParams?: { [key: string]: unknown },\n          options?: AnalyticsCallOptions\n        ) => logEvent(analytics, eventName, eventParams, options)\n      };\n    } catch (e) {\n      throw ERROR_FACTORY.create(AnalyticsError.INTEROP_COMPONENT_REG_FAILED, {\n        reason: e as Error\n      });\n    }\n  }\n}\n\nregisterAnalytics();\n\nexport * from './api';\nexport * from './public-types';\n"]},"metadata":{},"sourceType":"module"}